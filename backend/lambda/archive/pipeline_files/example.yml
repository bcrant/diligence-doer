name:  pipeline_name 
frequency:  TASKRUNNER_FREQUENCY 
load_time:  PIPELINE_LOAD_TIME 
# depends on polls

description: denormalized view of engage data

bootstrap:
  ec2:
     depends.generate_bootstrap_step(pipeline_name) 

steps:
- step_type: company-custom-dependencies-step
  name: wait-for-others-engage-pipelines
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -company-engage-1
    -  DEPENDENT_PIPELINE_ENV -company-engage-2
    -  DEPENDENT_PIPELINE_ENV -company-engage-3
    -  DEPENDENT_PIPELINE_ENV -company-engage-4

- step_type: company-custom-dependencies-step
  name: wait-for-others-admini-pipelines
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -admini-1
    -  DEPENDENT_PIPELINE_ENV -admini-2
    -  DEPENDENT_PIPELINE_ENV -admini-3
    -  DEPENDENT_PIPELINE_ENV -admini-7

- step_type: company-custom-dependencies-step
  name: wait-for-others-content-service-pipelines
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -content_service-1
    -  DEPENDENT_PIPELINE_ENV -content_service-2
    -  DEPENDENT_PIPELINE_ENV -content_service-4
    -  DEPENDENT_PIPELINE_ENV -content_service-6

- step_type: company-custom-dependencies-step
  name: wait-for-ods-pipeline-1
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -ods-transforms-1

- step_type: company-custom-dependencies-step
  name: wait-for-ods-pipeline-2
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -ods-transforms-2

- step_type: company-custom-dependencies-step
  name: wait-for-ods-pipeline-3
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -ods-transforms-3

- step_type: company-custom-dependencies-step
  name: wait-for-others-next-pipelines
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -next-5
    -  DEPENDENT_PIPELINE_ENV -next-8

- step_type: company-custom-dependencies-step
  name: wait-for-events-import-pipeline
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -events-imports-1

- step_type: company-custom-dependencies-step
  name: wait-for-others-awayplace-pipelines
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -company-awayplace-1
    -  DEPENDENT_PIPELINE_ENV -company-awayplace-2
    -  DEPENDENT_PIPELINE_ENV -company-awayplace-4
    -  DEPENDENT_PIPELINE_ENV -company-curriculums
    -  DEPENDENT_PIPELINE_ENV -company-users

- step_type: company-custom-dependencies-step
  name: wait-for-others-pipelines
  finished_pipeline_root_path:  depends.finished_pipeline_root_path 
  depends_on: []
  dependent_pipelines:
    -  DEPENDENT_PIPELINE_ENV -admini-1
    -  DEPENDENT_PIPELINE_ENV -company-curriculums
    -  DEPENDENT_PIPELINE_ENV -company-evalu-1
    -  DEPENDENT_PIPELINE_ENV -company-evalu-2
    -  DEPENDENT_PIPELINE_ENV -company-awayplace-1
    -  DEPENDENT_PIPELINE_ENV -company-awayplace-3
    -  DEPENDENT_PIPELINE_ENV -company-awayplace-5
    -  DEPENDENT_PIPELINE_ENV -company-awayplace-6
    -  DEPENDENT_PIPELINE_ENV -company-users

# ORG EVENTS ACTIVITY
# LMI QUALIFICATION MAPPING FROM https://github.com/company/-live/blob/cae54e5a2df1c5f005442725468fed64e2fce06f/db/migrate/20170612222159_convert_attendee_lmi_qualificaiton_to_enum.rb
# Attendee.where(lmi_qualification: 0).update_all(lmi_qualification_string: "Not Applicable")
# Attendee.where(lmi_qualification: 1).update_all(lmi_qualification_string: "Self-reported Income")
# Attendee.where(lmi_qualification: 2).update_all(lmi_qualification_string: "Venue's Income Level Indicator")
- step_type: sql-command
  depends_on: [wait-for-others-engage-pipelines]
  input_node: []
  name: events-activity-reporting
  command:
    drop table if exists event_volunteer_details;
    create temp table event_volunteer_details
    distkey (event_id) as (
      select
        events.id as event_id,
        COUNT(DISTINCT CASE WHEN event_users.role = 'lead_volunteer' then event_users.user_id else null end) as event_lead_volunteer_count,
        COUNT(DISTINCT CASE WHEN event_users.role = 'volunteer' then event_users.user_id else null end) as event_non_lead_volunteer_count,
        SUM(CASE WHEN event_users.role = 'lead_volunteer'
          then nvl(event_users.event_setup_duration,0)
              +nvl(event_users.preparation_duration,0)
              +nvl(event_users.evidence_capture_duration,0)
              +nvl(event_users.event_duration,0)
              +nvl(event_users.other_duration,0)
          else 0 end) as lead_volunteer_total_hours,
        SUM(CASE WHEN event_users.role = 'volunteer'
          then  nvl(event_users.event_setup_duration,0)
              +nvl(event_users.preparation_duration,0)
              +nvl(event_users.evidence_capture_duration,0)
              +nvl(event_users.event_duration,0)
              +nvl(event_users.other_duration,0)
          else 0 end) as non_lead_volunteer_total_hours,
        COUNT(DISTINCT CASE  WHEN attendees.lmi_qualification = 0 THEN attendees.id ELSE NULL END) AS attendees_lmi_qualification_not_applicable_count,
        COUNT(DISTINCT CASE  WHEN attendees.lmi_qualification = 1 THEN attendees.id ELSE NULL END) attendees_lmi_qualification_self_reported_income_count,
        COUNT(DISTINCT CASE  WHEN attendees.lmi_qualification = 2 THEN attendees.id ELSE NULL END) attendees_lmi_qualification_venue_income_level_count,
        COUNT(DISTINCT CASE WHEN attendees.is_lmi THEN attendees.id ELSE NULL END) AS lmi_attendees_count,
        COUNT(DISTINCT attendees.id) as attendees_count,
        COUNT(DISTINCT reservations.id) as reservations_count,
          THEN engage_response_sets.id ELSE NULL END) AS event_pre_assessments_completed_count,
          THEN engage_response_sets.id ELSE NULL END) AS event_post_assessments_completed_count
      from
        engage_data.events
        inner join engage_data.event_users on event_users.event_id = events.id
        inner join engage_data.users as lead_volunteers on event_users.user_id = lead_volunteers.id
        left join engage_data.attendees on attendees.event_id=events.id
        left join engage_data.reservations on reservations.event_id = events.id
        left join evalufi_data.response_sets evalufi_response_sets on evalufi_response_sets.event_id = events.id
        left join engage_data.response_sets engage_response_sets on engage_response_sets.uid =evalufi_response_sets.id
      group by events.id
    );

    DROP TABLE IF EXISTS reporting_data.events_activity_staging;
    CREATE TABLE reporting_data.events_activity_staging
    DISTKEY (account_organization_uuid)
    SORTKEY (account_organization_uuid, event_title, event_topic)
    AS (
      select
        accounts.id as account_id,
        accounts.name as account_name,
        accounts.created_at as engage_account_created_at,
        accounts.enabled as engage_account_enabled,
        accounts.salesforce_id as account_sf_id,
        accounts.organization_uuid as account_organization_uuid,
        events.id as event_id,
        event_translations.title as event_title,
        events.start_time as event_start_time,
        events.end_time   as event_end_time,
        events.cancelled_at as event_cancelled_at,
        events.cancellation_reason as event_cancellation_reason,
        events.type as event_type,
        events.demo as event_isdemo,
        events.time_zone as event_time_zone,
        tz.abbrev as event_time_zone_abbreviation,
        convert_timezone(ods.fix_timezone(events.time_zone), events.start_time) as event_start_time_local,
        convert_timezone(ods.fix_timezone(events.time_zone), events.end_time) as event_end_time_local,
        convert_timezone(events.time_zone, events.start_time) as event_start_time_local,
        convert_timezone(events.time_zone, events.end_time) as event_end_time_local,
        locations.postal_code as event_venue_location_postal_code,
        locations.latitude as event_venue_location_latitude,
        locations.longitude as event_venue_location_longitude,
        locations.name as event_location_name,
        case when events.type = 'Events::Webinar' then 'Online'
             else locations.formatted_address
        end as event_venue_formatted_address,
        locations.administrative_area_level_1 as event_venue_area,
        locations.county_name as event_venue_location_county_name,
        topic_translations.name as event_topic,
        partners.name as partner_name,
        partners.serves_lmi as partner_serves_lmi,
        partners.contact_email as partner_contact_email,
        partners.contact_phone as partner_contact_phone,
        partners.contact_name as partner_contact_name,
        partner_translations.mission as partner_mission,
        events.desired_volunteer_count as event_desired_volunteer_count,
        events.manual_attendee_count as event_manual_attendee_count,
        DATEDIFF('hour', events.start_time, events.end_time) AS event_length_hrs,
        case when events.type = 'Events::Webinar' then 'Webinar'
             else venues.title
        end as event_venue_title,
        venues.capacity as event_venue_capacity,
        nvl(venues.is_lmi, false) as event_venue_is_lmi,
        lead_volunteers.first_name || ' ' || lead_volunteers.last_name as event_lead_volunteer_full_name,
        lead_volunteers.email as event_lead_volunteer_email,
        evd.event_lead_volunteer_count,
        evd.event_non_lead_volunteer_count,
        evd.lead_volunteer_total_hours,
        evd.non_lead_volunteer_total_hours,
        evd.attendees_lmi_qualification_not_applicable_count,
        evd.attendees_lmi_qualification_self_reported_income_count,
        evd.attendees_lmi_qualification_venue_income_level_count,
        evd.lmi_attendees_count,
        evd.attendees_count,
        evd.reservations_count,
        evd.event_pre_assessments_completed_count,
        evd.event_post_assessments_completed_count
      from engage_data.events
        inner join ods_static_data.timezone_names as tz on events.time_zone = tz.name
        inner join engage_data.event_translations on event_translations.event_id = events.id
          and event_translations.locale  in ('en', 'en-US')
        inner join engage_data.accounts on events.account_id = accounts.id
        left join engage_data.topic_translations on events.topic_id = topic_translations.topic_id
          and topic_translations.locale  in ('en', 'en-US')
        inner join engage_data.event_users on event_users.event_id = events.id
        inner join engage_data.users as lead_volunteers on event_users.user_id = lead_volunteers.id
          and event_users.role = 'lead_volunteer'
        inner join event_volunteer_details evd on evd.event_id = events.id
        left join engage_data.venues on venues.id = events.venue_id
        left join engage_data.locations on venues.id = locations.source_id
          and locations.source_type='Venue'
        left join engage_data.partners on partners.id = events.partner_id
        left join engage_data.partner_translations on partner_translations.partner_id=partners.id
          and partner_translations.locale in ('en', 'en-US')
    );

    alter table reporting_data.events_activity rename to events_activity_old;
    alter table reporting_data.events_activity_staging rename to events_activity;
    alter table reporting_data.events_activity owner to datapipeline_app;

    grant all on reporting_data.events_activity to group admin_group;
    grant insert, select, update, delete on reporting_data.events_activity to group internalapps_rw;
    grant select on reporting_data.events_activity to group internalapps_ro;
    grant select on reporting_data.events_activity to group internalapps_rw_rt;
    grant select on reporting_data.events_activity to group querywriters_ro;
    grant select on reporting_data.events_activity to group tableau_progress_report;
    grant select, insert, update, DELETE on table reporting_data.events_activity to group querywriters_selective_rw;

    DROP TABLE IF EXISTS reporting_data.events_activity_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines]
  input_node: []
  name: teams-admin-lookup
  command:
    drop table if exists admin_users;
    create temp table admin_users as (
      select
        users_roles.user_uuid
        ,users_roles.organization_uuid
        ,bool_or(admins.is_primary_admin) as is_primary_admin
      from spectrum_schema.adminifi_data_users_rule_set_roles as users_roles
      inner join ods_static_data.admin_reference as admins
        on users_roles.rule_key = admins.rules_set_id
        and users_roles.rule_value = admins.admin_type
      group by
        users_roles.user_uuid
        ,users_roles.organization_uuid
    );

    drop table if exists temp_managers;
    create temp table temp_managers as (
      select
        managers.user_id
        ,managers.team_id
        ,users.first_name as team_manager_first_name
        ,users.last_name as team_manager_last_name
        ,ods.f_lob_rls_finder(users.business_lines) lob_bitmap
        ,team.name as team_name
      from adminifi_data.team_managers managers
      inner join adminifi_data.teams team on managers.team_id = team.id
      join adminifi_data.users
        on managers.user_id = users.uuid
    );

    drop table if exists reporting_data.teams_admin_lookup_staging;
    create table reporting_data.teams_admin_lookup_staging (
        tableau_user_name        varchar(50) encode zstd,
        user_uuid                varchar(36) encode zstd,
        team_manager_first_name  varchar(100) encode zstd,
        team_manager_last_name   varchar(100) encode zstd,
        organization_uuid        varchar(36) encode zstd,
        team_uuid                varchar(36) encode zstd,
        team_name                varchar(200) encode zstd,
        is_primary_admin         boolean encode zstd,
        lob_bitmap               integer encode az64
    ) distkey(organization_uuid);

    insert into reporting_data.teams_admin_lookup_staging
      select distinct
        'user_' || admin_users.user_uuid as tableau_user_name
        ,admin_users.user_uuid
        ,managers.team_manager_first_name
        ,managers.team_manager_last_name
        ,admin_users.organization_uuid
        ,case
          when admin_users.is_primary_admin then null
          else managers.team_id
         end as team_uuid
       ,case
         when admin_users.is_primary_admin then null
         else managers.team_name
        end as team_name
        ,admin_users.is_primary_admin
        ,managers.lob_bitmap
      from admin_users
      left join temp_managers as managers
        on admin_users.user_uuid = managers.user_id
      where admin_users.is_primary_admin
        or managers.team_id is not null
    ;

    drop table if exists admin_users;
    drop table if exists temp_managers;

    alter table reporting_data.teams_admin_lookup rename to teams_admin_lookup_old;
    alter table reporting_data.teams_admin_lookup_staging rename to teams_admin_lookup;
    alter table reporting_data.teams_admin_lookup owner to datapipeline_app;

    grant all on reporting_data.teams_admin_lookup to group admin_group;
    grant select, insert, update, delete on reporting_data.teams_admin_lookup to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.teams_admin_lookup to group querywriters_selective_rw;
    grant select on reporting_data.teams_admin_lookup to group internalapps_ro;
    grant select on reporting_data.teams_admin_lookup to group internalapps_rw_rt;
    grant select on reporting_data.teams_admin_lookup to group querywriters_ro;
    grant select on reporting_data.teams_admin_lookup to group tableau_progress_report;

    drop table if exists reporting_data.teams_admin_lookup_old;

- step_type: sql-command
  depends_on: [wait-for-others-engage-pipelines]
  input_node: []
  name: attendee-assessments-reporting
  command:
    DROP TABLE IF EXISTS reporting_data.attendee_assessments_staging;

    CREATE TABLE reporting_data.attendee_assessments_staging AS (
        select
               events.id as event_id,
               event_translations.title as event_title,
               engage_topic_translations.name as event_topic,
               engage_response_sets.assessment_slug as attendee_responses_assessment_slug,
               case when engage_response_sets.assessment_slug = engage_course_modules.post_assessment_slug then 'Post Assessment'
                    when engage_response_sets.assessment_slug = engage_course_modules.pre_assessment_slug then 'Pre Assessment'
                    else 'N/A'
               end as assessment_type,
               engage_response_sets.course_module_id as engage_course_module_id,
               engage_course_modules.post_assessment_slug as course_module_post_assessment_slug,
               engage_course_modules.pre_assessment_slug as course_module_pre_assessment_slug,
               engage_course_modules.company_content_id as engage_company_content_id,
               engage_company_contents.content_id as company_content_id,
               cs_contents.type as cs_content_type,
               cs_content_translations.name as cs_content_name,
               engage_response_sets.updated_at as engage_response_set_updated_at,
               engage_response_sets.created_at as engage_response_set_created_at,
               evalufi_response_sets.id as response_set_id,
               evalufi_response_sets.grade as response_set_evalufi_grade,
               evalufi_response_sets.grading_status as evalufi_response_set_grading_status,
               evalufi_response_sets.status as evalufi_response_set_status,
               evalufi_response_sets.started_at as evalufi_response_set_created_at,
               evalufi_response_sets.completed_at as evalufi_response_set_completed_at,
               evalufi_response_sets.evaluation_id as evalufi_response_set_evaluation_id,
               evalufi_response_sets.attempt_number as evalufi_response_set_attempt_number,
               evalufi_responses.question_id as evalufi_response_question_id,
               evalufi_responses.answer_id as evalufi_answer_id,
               evalufi_responses.value as evalufi_answer_freetext_value,
               evalufi_question_translations.text as evalufi_question_text,
               evalufi_answer_translations.text as evalufi_answer_text_value,
               evalufi_questions.type as evalufi_question_type,
               evalufi_questions.slug as evalufi_question_slug,
               evalufi_questions.correct_answers as evalufi_question_correct_answer,
               events.demo as event_isdemo
        from engage_data.events
            join evalufi_data.response_sets evalufi_response_sets
                on evalufi_response_sets.event_id = engage_data.events.id
            join engage_data.response_sets engage_response_sets
                on engage_response_sets.uid = evalufi_response_sets.id
            join evalufi_data.responses evalufi_responses
                on evalufi_responses.response_set_id = evalufi_response_sets.id
            join engage_data.event_translations
                on event_translations.event_id=events.id and event_translations.locale  in ('en', 'en-US')
            join engage_data.topic_translations engage_topic_translations
                on engage_topic_translations.topic_id=events.topic_id and engage_topic_translations.locale in ('en', 'en-US')
            join engage_data.course_modules engage_course_modules
                on engage_course_modules.id = engage_response_sets.course_module_id
            join engage_data.company_contents as engage_company_contents
                on engage_company_contents.id=engage_course_modules.company_content_id
            join content_service_data.contents cs_contents
                on cs_contents.id = engage_company_contents.content_id
            join content_service_data.content_translations cs_content_translations
                on cs_content_translations.content_id=cs_contents.id and cs_content_translations.locale  in ('en', 'en-US')
            join evalufi_data.questions as evalufi_questions
                on evalufi_questions.id = evalufi_responses.question_id
            join evalufi_data.answer_translations evalufi_answer_translations
              on evalufi_answer_translations.answer_id = evalufi_responses.answer_id and evalufi_answer_translations.locale in ('en', 'en-US')
            join evalufi_data.question_translations as evalufi_question_translations
              on evalufi_question_translations.question_id=evalufi_responses.question_id and evalufi_question_translations.locale in ('en', 'en-US')
    );

    alter table reporting_data.attendee_assessments rename to attendee_assessments_old;
    alter table reporting_data.attendee_assessments_staging rename to attendee_assessments;
    alter table reporting_data.attendee_assessments owner to datapipeline_app;

    grant all on reporting_data.attendee_assessments to group admin_group;
    grant insert, select, update, delete on reporting_data.attendee_assessments to group internalapps_rw;
    grant select on reporting_data.attendee_assessments to group internalapps_ro;
    grant select on reporting_data.attendee_assessments to group internalapps_rw_rt;
    grant select on reporting_data.attendee_assessments to group querywriters_ro;
    grant select on reporting_data.attendee_assessments to group tableau_progress_report;
    grant select, insert, update, DELETE on table reporting_data.attendee_assessments to group querywriters_selective_rw;

    DROP TABLE IF EXISTS reporting_data.attendee_assessments_old;

# ORG EVENTS ACTIVITY
# LMI QUALIFICATION MAPPING FROM https://github.com/company/-live/blob/cae54e5a2df1c5f005442725468fed64e2fce06f/db/migrate/20170612222159_convert_attendee_lmi_qualificaiton_to_enum.rb
# Attendee.where(lmi_qualification: 0).update_all(lmi_qualification_string: "Not Applicable")
# Attendee.where(lmi_qualification: 1).update_all(lmi_qualification_string: "Self-reported Income")
# Attendee.where(lmi_qualification: 2).update_all(lmi_qualification_string: "Venue's Income Level Indicator")
- step_type: sql-command
  depends_on: [wait-for-others-engage-pipelines]
  input_node: []
  name: volunteer-activity-reporting
  command:
      DROP TABLE IF EXISTS reporting_data.volunteer_activity_table_staging;

      drop table if exists census_tract_med_family_income;
      create temp table census_tract_med_family_income
        distkey(engage_location_key) as (
        select
          del.engage_location_key,
          ci.tract_med_family_income
        from ods.dim_engage_locations as del
        inner join engage_data.census_incomes as ci
           on del.location_census_tract = ci.tract
          and del.location_msa_code = ci.msa
          and del.location_county_code = ci.county_code
          and del.location_state_code = ci.state_code
      );

      CREATE TABLE reporting_data.volunteer_activity_table_staging
      DISTKEY(engage_account_organization_uuid)
      INTERLEAVED SORTKEY(engage_account_organization_uuid, event_title, event_topic)
      AS (
        select
               engage_accounts.id as engage_account_id,
               engage_accounts.organization_uuid as engage_account_organization_uuid,
               engage_users.uid as engage_users_uid,
               event_translations.title as event_title,
               topic_translations.name as event_topic,
               events.id as event_id,
               events.account_id as account_id,
               events.start_time as events_start_time,
               events.end_time as event_end_time,
               events.manual_attendee_count as event_manual_attendee_count,
               events.demo as event_isdemo,
               events.time_zone as event_time_zone,
               tz.abbrev as event_time_zone_abbreviation,
               convert_timezone(ods.fix_timezone(events.time_zone), events.start_time) as event_start_time_local,
               convert_timezone(ods.fix_timezone(events.time_zone), events.end_time) as event_end_time_local,
               convert_timezone(events.time_zone, events.start_time) as event_start_time_local,
               convert_timezone(events.time_zone, events.end_time) as event_end_time_local,
               engage_users.first_name,
               engage_users.last_name,
               event_users.role as event_role,
               engage_users.email as event_user_contact_email,
               'N/A' as event_user_business_email,
               event_users.other_duration,
               event_users.event_duration,
               event_users.evidence_capture_duration,
               event_users.preparation_duration,
               event_users.event_setup_duration,
               event_users.media_consent as event_user_media_consent,
               event_users.checked_in as event_users_checked_in,
               event_users.notes as event_user_notes,
               engage_users.title as event_user_title,
               engage_users.is_employee as event_user_isemployee,
               engage_users.sign_in_count as event_user_sign_in_count,
               work_locations.name as work_location_name,
               work_locations.is_lmi as work_location_islmi,
               work_locations.external_id as user_work_location_name,
               Null as event_attendee_contact_followup,
               Null  as event_attendee_contact_promotional,
               'N/A' as event_attendee_contact_methods,
               'N/A' as event_attendee_contact_phone,
               'N/A' as event_attendee_home_phone,
               'N/A' as event_attendee_business_name,
               'N/A'    as event_attendee_business_zip,
               'Not Applicable' as event_attendee_lmi_qualification,
               Null as event_attendee_is_lmi,
               engage_venues.title as event_venue_title,
               engage_locations.location_formatted_address as event_venue_formatted_address,
               engage_locations.location_msa_name as event_venue_location_area,
               engage_locations.location_postal_code as event_venue_postal_code,
               engage_locations.location_census_tract as event_venue_census_tract,
               census_incomes.tract_med_family_income as event_venue_census_tract_med_family_income,
               engage_partners.name as event_partner_name,
               engage_partners.serves_lmi as event_partner_serves_lmi,
               engage_locations_2.location_formatted_address as user_work_location_formatted_address
        from engage_data.event_users
        join engage_data.users engage_users
            on engage_users.id = event_users.user_id
        join engage_data.event_translations
            on event_translations.event_id=event_users.event_id and event_translations.locale  in ('en', 'en-US')
        join engage_data.events
            on event_users.event_id = events.id
        join engage_data.topic_translations
            on topic_translations.topic_id=events.topic_id and topic_translations.locale  in ('en', 'en-US')
        left join engage_data.work_locations
            on engage_users.work_location_id = work_locations.id
        join engage_data.accounts engage_accounts
            on engage_accounts.id = events.account_id
        join ods_static_data.timezone_names as tz
            on events.time_zone = tz.name
        join engage_data.venues engage_venues
            on engage_venues.id = events.account_id
        left join ods.dim_engage_locations engage_locations
            on engage_locations.location_source_id = events.venue_id
           and engage_locations.location_source_type = 'Venue'
        left join engage_data.partners engage_partners
            on engage_partners.id = events.partner_id
        left join ods.dim_engage_locations engage_locations_2
            on engage_locations_2.location_id = engage_users.work_location_id
            and engage_locations_2.location_source_type = 'WorkLocation'
        left join census_tract_med_family_income census_incomes
            on engage_locations.engage_location_key = census_incomes.engage_location_key
        where engage_users.type = 'Users::Volunteer'

        /* This union is not expensive, we are working with less than 5k rows. */
        union

        select
               engage_accounts.id as engage_account_id,
               engage_accounts.organization_uuid as engage_account_organization_uuid,
               'N/A' as engage_users_uid,
               event_translations.title as event_title,
               topic_translations.name as event_topic,
               events.id as event_id,
               events.account_id as account_id,
               events.start_time as events_start_time,
               events.end_time as event_end_time,
               events.manual_attendee_count as event_manual_attendee_count,
               events.demo as event_isdemo,
               events.time_zone as event_time_zone,
               tz.abbrev as event_time_zone_abbreviation,
               convert_timezone(ods.fix_timezone(events.time_zone), events.start_time) as event_start_time_local,
               convert_timezone(ods.fix_timezone(events.time_zone), events.end_time) as event_end_time_local,
               convert_timezone(events.time_zone, events.start_time) as event_start_time_local,
               convert_timezone(events.time_zone, events.end_time) as event_end_time_local,
               attendees.first_name,
               attendees.last_name,
               'Attendee' as event_role,
               attendees.contact_email as event_user_contact_email,
               attendees.business_email as event_user_business_email,
               Null as other_duration,
               Null as event_duration,
               Null as evidence_capture_duration,
               Null as preparation_duration,
               Null as event_setup_duration,
               Null as event_user_media_consent,
               Null as event_users_checked_in,
               'N/A' as  event_user_notes,
               'N/A' as event_user_title,
               False as event_user_isemployee,
               Null as  event_user_sign_in_count,
               'N/A' as  work_location_name,
               Null as  work_location_islmi,
               'N/A' as user_work_location_name,
               attendees.contact_followup as event_attendee_contact_followup,
               attendees.contact_promotional as event_attendee_contact_promotional,
               attendees.contact_methods as event_attendee_contact_methods,
               attendees.contact_phone as event_attendee_contact_phone,
               attendees.home_phone as event_attendee_home_phone,
               attendees.business_name as event_attendee_business_name,
               attendees.business_zip   as event_attendee_business_zip,
               case
                  when attendees.lmi_qualification = 0 then 'Not Applicable'
                   when attendees.lmi_qualification = 1 then 'Self-reported Income'
                   when attendees.lmi_qualification = 2 then 'Venue Income Level Indicator'
                   else attendees.lmi_qualification::varchar
               end
                   as event_attendee_lmi_qualification,
               attendees.is_lmi as event_attendee_is_lmi,
               engage_venues.title as event_venue_title,
               engage_locations.location_formatted_address as event_venue_formatted_address,
               engage_locations.location_msa_name as event_venue_location_area,
               engage_locations.location_postal_code as event_venue_postal_code,
               engage_locations.location_census_tract as event_venue_census_tract,
               census_incomes.tract_med_family_income as event_venue_census_tract_med_family_income,
               engage_partners.name as event_partner_name,
               engage_partners.serves_lmi as event_partner_serves_lmi,
               'N/A' as user_work_location_formatted_address
        from engage_data.attendees
            join engage_data.events
                on events.id = attendees.event_id
            join engage_data.event_translations
                on event_translations.event_id=attendees.event_id and event_translations.locale  in ('en', 'en-US')
            join engage_data.topic_translations
                on topic_translations.topic_id=events.topic_id and topic_translations.locale  in ('en', 'en-US')
            join engage_data.accounts engage_accounts
                on engage_accounts.id = events.account_id
            join ods_static_data.timezone_names as tz
                on events.time_zone = tz.name
            join engage_data.venues engage_venues
                on engage_venues.id = events.account_id
            left join ods.dim_engage_locations engage_locations
                on engage_locations.location_source_id = events.venue_id
               and engage_locations.location_source_type = 'Venue'
            left join engage_data.partners engage_partners
                on engage_partners.id = events.partner_id
            left join census_tract_med_family_income census_incomes
                on engage_locations.engage_location_key = census_incomes.engage_location_key
    );

    drop table census_tract_med_family_income;

    alter table reporting_data.volunteer_activity_table rename to volunteer_activity_table_old;
    alter table reporting_data.volunteer_activity_table_staging rename to volunteer_activity_table;
    alter table reporting_data.volunteer_activity_table owner to datapipeline_app;

    grant all on reporting_data.volunteer_activity_table to group admin_group;
    grant insert, select, update, delete on reporting_data.volunteer_activity_table to group internalapps_rw;
    grant select on reporting_data.volunteer_activity_table to group internalapps_ro;
    grant select on reporting_data.volunteer_activity_table to group internalapps_rw_rt;
    grant select on reporting_data.volunteer_activity_table to group querywriters_ro;
    grant select on reporting_data.volunteer_activity_table to group tableau_progress_report;
    grant select, insert, update, DELETE on table reporting_data.volunteer_activity_table to group querywriters_selective_rw;

    DROP TABLE IF EXISTS reporting_data.volunteer_activity_table_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines, wait-for-ods-pipeline-1, wait-for-ods-pipeline-2]
  input_node: []
  name: progress-report-data
  command:

    drop table if exists roster_info;
    create temp table roster_info
    distkey(user_id)
    as
    (
      select
          r.organization_id
          ,r.id
          ,r.name
          ,ru.user_id
      from adminifi_data.rosters r
          inner join adminifi_data.rosters_users ru on r.id = ru.roster_id
      order by r.id asc
    );

    drop table if exists categories_info;
    create temp table categories_info
    distkey(user_id)
    as
    (
     select organization_id
        ,cg.id            as cg_id
        ,cg.name          as cg_name
        ,cgv.id           as cgv_id
        ,cgv.name         as cgv_name
        ,cgvu.user_id     as user_id
     from adminifi_data.categories cg
        inner join adminifi_data.category_labels cgv ON cg.id = cgv.category_id
        inner join adminifi_data.category_label_users cgvu ON cgv.id = cgvu.category_label_id
    );


    drop table if exists roles_rules;
    create temp table roles_rules distkey(user_uuid) as
    (
      select user_uuid,
      replace(replace(rule_set_role,'{',''),'}','') as parsed_role
      from spectrum_schema.adminifi_data_users_rule_set_roles
    );


    drop table if exists users_org_data;
    create temp table users_org_data (
      orgname varchar(255) encode zstd,
      orgid varchar(36) encode zstd,
      organization_salesforce_id varchar(255) encode zstd,
      organization_isdemo boolean encode zstd,
      organization_multi_country varchar(255) encode zstd,
      organization_multi_state varchar(255) encode zstd,
      organization_capabilities_list varchar(255) encode zstd,
      users_first_name varchar(2000) encode zstd,
      users_last_name varchar(2000) encode zstd,
      users_last_sign_in_at timestamp encode az64,
      users_created_at timestamp encode az64,
      users_id varchar(36) encode zstd,
      sso_id varchar(500) encode zstd,
      employee_id varchar(1000) encode zstd,
      student_id varchar(500) encode zstd,
      users_rule_set_roles varchar(1024) encode zstd,
      parsed_role varchar(60) encode zstd,
      location_name varchar(64) encode zstd,
      user_email varchar(512) encode zstd,
      user_active boolean encode zstd,
      roster_name varchar(1024) encode zstd,
      cg_name varchar(255) encode zstd,
      cgv_name varchar(255) encode zstd
    )distkey(orgid);

    insert into users_org_data
      select
          organizations.name               as OrgName
          ,organizations.uuid              as OrgId
          ,orgs.organization_salesforce_id as organization_salesforce_id
          ,orgs.organization_isdemo        as organization_isdemo
          ,orgs.organization_multi_country as organization_multi_country
          ,orgs.organization_multi_state   as organization_multi_state
          ,orgs.organization_capabilities_list as organization_capabilities_list
          ,users.first_name                as users_first_name
          ,users.last_name                 as users_last_name
          ,users.last_sign_in_at           as users_last_sign_in_at
          ,users.created_at                as users_created_at
          ,users.uuid                      as users_id
          ,users.sso_id                    as sso_id
          ,users.employee_id               as employee_id
          ,users.student_id                as student_id
          ,users.rule_set_roles            as users_rule_set_roles
          ,roles_rules.parsed_role         as parsed_role
          ,locations.name                  as location_name
          ,users.email                     as user_email
          ,users.active                    as user_active
          ,listagg(distinct rosters.name, ', ') as roster_name
          ,categories.cg_name              as cg_name
          ,categories.cgv_name             as cgv_name
      from
          adminifi_data.organizations
          join ods.dim_organizations as orgs
            on orgs.organization_id = organizations.uuid
            and orgs.sourcesystem_id = 1
          left join adminifi_data.users
            on organizations.uuid = users.organization_uuid
          left join adminifi_data.locations as locations
            on locations.id = users.location_id
          left join roster_info as rosters
            on rosters.user_id = users.uuid
          left join categories_info as categories
            on categories.user_id = users.uuid
          left join roles_rules
            on users.uuid = roles_rules.user_uuid
      where  1=1
        and users.uuid is not null
      group by
          organizations.name
          ,organizations.uuid
          ,orgs.organization_salesforce_id
          ,orgs.organization_isdemo
          ,orgs.organization_multi_country
          ,orgs.organization_multi_state
          ,orgs.organization_capabilities_list
          ,users.first_name
          ,users.last_name
          ,users.last_sign_in_at
          ,users.created_at
          ,users.uuid
          ,users.sso_id
          ,users.employee_id
          ,users.student_id
          ,users.rule_set_roles
          ,parsed_role
          ,locations.name
          ,users.email
          ,users.active
          ,categories.cg_name
          ,categories.cgv_name;


    drop table if exists roster_info;
    drop table if exists categories_info;
    drop table if exists rule_setting_roles_info;
    drop table if exists roles_rules;


    drop table if exists user_assignments_tmp;
    create temp table user_assignments_tmp distkey(id) as(
      select
         ua.starts_on::date as assignments_starts_on,
         ua.user_id as user_assignments_user_id,
         ua.id::varchar as id,
         ua.due_on::date as user_assignments_due_on,
         ua.completed_at::date as completed_at,
         ua.past_due as past_due,
         ua.progress_status as assignment_progress_status,
         ua.participation_status as participation_status,
         ua.invited_on::Date as invited_on,
         ua.assignment_id
       from content_service_data.user_assignments as ua
    );

    drop table if exists progress_user_assignments_tmp;
    create temp table progress_user_assignments_tmp distkey(progress_id) as(
      select
        pua.progress_id,
        pua.user_assignment_id
      from content_service_data.progress_user_assignments as pua
    );

    drop table if exists progress_enrollment_data;
    create temp table progress_enrollment_data distkey(id) as(
      select
         ped.id,
         ped.region,
         ped.worklocation as worklocation
      from spectrum_schema.content_service_data_progress_enrollment_data ped
    );

    drop table if exists progress_tmp;
    create temp table progress_tmp distkey(id) as(
      select
         p.id,
         p.content_id,
         p.status,
         p.created_at as created_at,
         p.completed_at::date as completed_at,
         json_extract_path_text(p.profile_data,'role') as role,
         p.policies_missing,
         p.started_at as started_at,
         p.sdk_timer,
         p.content_id as progress_content_id
      from content_service_data.progress as p
    );

    drop table if exists content_data;
    create temp table content_data distkey(assignments_organization_id)
    as
    (
    select
      ct.name                             as course,
      a.id                                as assignment_id,
      p.content_id                        as assignments_content_id,
      a.name                              as assignments_assignments_name,
      a.starts_on                         as assignments_starts_on,
      ua.assignments_starts_on            as user_assignments_starts_on,
      a.ends_on::date                     as assignments_ends_on,
      a.organization_id                   as assignments_organization_id,
      assignments.assignment_business_line as assignment_business_line,
      assignments.legacy_import_id        as legacy_import_id,
      a.training_period_id                as training_period_id,
      tp.training_period_title            as training_period_title,
      ua.user_assignments_user_id         as user_assignments_user_id,
      ua.id                               as user_assignments_id,
      ua.user_assignments_due_on          as user_assignments_due_on,
      ua.completed_at                     as completed_at,
      ua.past_due                         as past_due,
      ua.assignment_progress_status       as assignment_progress_status,
      ua.participation_status             as participation_status,
      ua.id || ' - ' || p.content_id      as user_course_assignment_counter,
      p.status                            as progress_derived_status,
      p.completed_at                      as course_completed_at,
      False                               as is_scorm,
      pua.progress_id                     as progress_id,
      (case when p.role = 'supervisor' then true else false end) as supervisor,
      ods.f_lob_rls_finder(a.business_line) as lob_rls_id,
      sum(ptl.total_time_spent_content) as total_time_spent_content,
      sum(ptl.total_time_spent_platform) as total_time_spent_platform,
      sum(
      case when ptl.total_time_spent_content > 0
            then ptl.total_time_spent_content else ptl.total_time_spent_platform
      end
      ) as time_spent_in_course,
      p.policies_missing,
      ua.invited_on as invited_on,
      ped.region,
      ped.worklocation as worklocation,
      p.created_at as progress_created_at,
      (case
        when ua.assignment_progress_status != 'not_started' then
        nvl(min(p.started_at)::Date, ua.assignments_starts_on::Date, p.created_at::Date)
      end) as progress_started_at,
      p.sdk_timer,
      a.status as assignment_status
    from
      content_service_data.assignments  as a
      inner join user_assignments_tmp as ua
        on a.id = ua.assignment_id
      inner join progress_user_assignments_tmp as pua
        on ua.id = pua.user_assignment_id
      inner join progress_tmp as p
        on pua.progress_id = p.id
      left join content_service_data.progress_time_logs as ptl
        on p.id = ptl.progress_id
      left join progress_enrollment_data ped
        on ped.id = p.id
      inner join content_service_data.content_translations as ct
        on ct.content_id = p.content_id
        and ct.locale  in ('en', 'en-US')
      left join ods.dim_training_periods as tp
        on tp.training_period_id = a.training_period_id
      inner join ods.dim_assignments as assignments
        on a.id = assignments.assignment_id
        and assignments.sourcesystem_id = 10
    where
        ua.assignments_starts_on <= current_date and ua.participation_status IN ('assigned','closed', 'ended')
    group by
      ct.name
      ,a.id
      ,p.content_id
      ,a.name
      ,a.starts_on
      ,ua.assignments_starts_on
      ,a.ends_on::date
      ,a.organization_id
      ,assignments.assignment_business_line
      ,assignments.legacy_import_id
      ,a.training_period_id
      ,tp.training_period_title
      ,ua.user_assignments_user_id
      ,ua.id
      ,ua.user_assignments_due_on
      ,ua.completed_at
      ,ua.past_due
      ,ua.assignment_progress_status
      ,ua.participation_status
      ,ua.id || ' - ' || p.content_id
      ,p.status
      ,p.completed_at
      ,pua.progress_id
      ,p.role
      ,a.business_line
      ,p.policies_missing
      ,ua.invited_on
      ,ped.region
      ,ped.worklocation
      ,p.created_at
      ,p.sdk_timer
      ,a.status
    );

    drop table if exists user_assignments_tmp;
    drop table if exists progress_user_assignments_tmp;

    drop table if exists reporting_data.progress_report_data_staging;
    create table reporting_data.progress_report_data_staging
    (
      OrgName                               varchar(255) encode zstd,
      OrgId                                 varchar(36) encode zstd,
      organization_salesforce_id            varchar(255) encode zstd,
      organization_isdemo                   boolean encode zstd,
      organization_multi_country            varchar(255) encode zstd,
      organization_multi_state              varchar(255) encode zstd,
      organization_capabilities_list        varchar(255) encode zstd,
      users_first_name                      varchar(2000) encode zstd,
      users_last_name                       varchar(2000) encode zstd,
      users_last_sign_in_at                 date encode az64,
      users_created_at                      timestamp encode az64,
      users_id                              varchar(50) encode zstd,
      sso_id                                varchar(500) encode zstd,
      employee_id                           varchar(1000) encode zstd,
      student_id                            varchar(500) encode zstd,
      users_rule_set_roles                  varchar(1024) encode zstd,
      parsed_role                           varchar(1024) encode zstd,
      location_name                         varchar(500) encode zstd,
      user_email                            varchar(512) encode zstd,
      user_active                           boolean encode zstd,
      roster_name                           varchar(1024) encode zstd,
      cg_name                               varchar(255) encode zstd,
      cgv_name                              varchar(255) encode zstd,
      course                                varchar(128) encode zstd,
      assignment_id                         integer encode az64,
      assignments_content_id                varchar(36) encode zstd,
      assignments_assignments_name          varchar(500) encode zstd,
      assignments_starts_on                 date encode az64,
      user_assignments_starts_on            date encode az64,
      assignments_ends_on                   timestamp encode az64,
      assignments_organization_id           varchar(36) encode zstd,
      assignment_business_line              varchar(48) encode zstd,
      assignment_status                     varchar(32) encode zstd,
      legacy_import_id                      varchar(48) encode zstd,
      training_period_id                    integer encode az64,
      training_period_title                 varchar(256) encode zstd,
      user_assignments_user_id              varchar(36) encode zstd,
      user_assignments_id                   varchar(128) encode zstd,
      user_assignments_due_on               timestamp encode zstd,
      completed_at                          timestamp encode zstd,
      past_due                              boolean encode zstd,
      assignment_progress_status            varchar(50) encode zstd,
      participation_status                  varchar(50) encode zstd,
      user_course_assignment_counter        varchar(200) encode zstd,
      progress_derived_status               varchar(100) encode zstd,
      course_completed_at                   date encode az64,
      is_scorm                              boolean encode zstd,
      progress_id                           varchar(64) encode zstd,
      supervisor                            boolean encode zstd,
      lob_rls_id                            integer encode az64,
      total_time_spent_content              integer encode az64,
      total_time_spent_platform             integer encode az64,
      time_spent_in_course                  integer encode az64,
      policies_missing                      boolean encode zstd,
      invited_on                            date encode az64,
      region                                varchar(80) encode zstd,
      worklocation                          varchar(80) encode zstd,
      final_completion_date                 date encode az64,
      progress_created_at                   timestamp encode az64,
      progress_started_at                   timestamp encode az64,
      sdk_timer                             boolean encode zstd,
      progress_content_id                   varchar(36) encode zstd
    )
    distkey(users_id);

    insert into reporting_data.progress_report_data_staging
    select uod.OrgName
      ,uod.OrgId
      ,uod.organization_salesforce_id
      ,uod.organization_isdemo
      ,uod.organization_multi_country
      ,uod.organization_multi_state
      ,uod.organization_capabilities_list
      ,uod.users_first_name
      ,uod.users_last_name
      ,uod.users_last_sign_in_at
      ,uod.users_created_at
      ,uod.users_id
      ,uod.sso_id
      ,uod.employee_id
      ,uod.student_id
      ,uod.users_rule_set_roles
      ,uod.parsed_role
      ,uod.location_name
      ,uod.user_email
      ,uod.user_active
      ,uod.roster_name
      ,uod.cg_name
      ,uod.cgv_name
      ,cd.course
      ,cd.assignment_id
      ,cd.assignments_content_id
      ,cd.assignments_assignments_name
      ,cd.assignments_starts_on
      ,cd.user_assignments_starts_on
      ,cd.assignments_ends_on
      ,cd.assignments_organization_id
      ,cd.assignment_business_line
      ,cd.assignment_status
      ,cd.legacy_import_id
      ,cd.training_period_id
      ,cd.training_period_title
      ,cd.user_assignments_user_id
      ,cd.user_assignments_id
      ,cd.user_assignments_due_on
      ,cd.completed_at
      ,cd.past_due
      ,cd.assignment_progress_status
      ,cd.participation_status
      ,cd.user_course_assignment_counter
      ,cd.progress_derived_status
      ,cd.course_completed_at
      ,cd.is_scorm
      ,cd.progress_id
      ,cd.supervisor
      ,cd.lob_rls_id
      ,cd.total_time_spent_content
      ,cd.total_time_spent_platform
      ,cd.time_spent_in_course
      ,cd.policies_missing
      ,cd.invited_on
      ,cd.region
      ,cd.worklocation as worklocation
      ,case
        when cd.policies_missing = false then
        cd.course_completed_at else null
      end as final_completion_date
      ,cd.progress_created_at
      ,cd.progress_started_at
      ,cd.sdk_timer
      ,cd.assignments_content_id as progress_content_id
    from users_org_data as uod
    left join content_data as cd
        on uod.orgid = cd.assignments_organization_id
        and uod.users_id = cd.user_assignments_user_id
    where 1 = 1
        and cd.user_assignments_user_id is not null;

    drop table if exists content_data;

    drop table if exists scorm_data;
    create temp table scorm_data distkey(assignments_organization_id)
    as
      (
      select
      ct.name                          as course,
      NULL::INTEGER                    as assignment_id,
      sc.content_id                    as assignments_content_id,
      'N/A'                            as assignments_assignments_name,
      null::date                       as assignments_starts_on,
      p.created_at ::date              as user_assignments_starts_on,
      dateadd(year, 1, p.created_at)::date as assignments_ends_on,
      u.organization_uuid              as assignments_organization_id,
      'N/A'                            as assignment_business_line,
      'N/A'                            as assignment_status,
      'N/A'                            as legacy_import_id,
      '-99999'::int      as training_period_id,
      'N/A'                            as training_period_title,
      sc.user_id                       as user_assignments_user_id,
      sc.content_id || ' - ' || sc.progress_id || ' - ' || sc.user_id as user_assignments_id,
      NULL::date                       as user_assignments_due_on,
      p.completed_at::date             as completed_at,
      NULL::boolean                    as past_due,
      case when sc.archived then 'scorm:\ archived' else 'scorm' end as participation_status,
      'N/A'                            as assignment_progress_status,
      sc.content_id || ' - ' || sc.progress_id || ' - ' || sc.user_id || ' - ' || sc.content_id  as user_course_assignment_counter,
      p.status                         as progress_derived_status,
      p.completed_at                   as course_completed_at,
      True                             as is_scorm,
      p.id                             as progress_id,
      (case when p.role = 'supervisor' then true else false end) as supervisor,
      ods.f_lob_rls_finder(cont.business_lines) as lob_rls_id,
      sum(ptl.total_time_spent_content) as total_time_spent_content,
      sum(ptl.total_time_spent_platform) as total_time_spent_platform,
      sum (
        case when ptl.total_time_spent_content > 0
            then ptl.total_time_spent_content else ptl.total_time_spent_platform
        end
      ) as time_spent_in_course,
      p.policies_missing,
      null::Date as invited_on,
      ped.region,
      ped.worklocation as worklocation,
      p.created_at as progress_created_at,
      min(p.started_at)::Date as progress_started_at,
      p.sdk_timer,
      p.content_id as progress_content_id
    from content_service_data.scorm_contexts as sc
    left join content_service_data.content_translations as ct
      on ct.content_id = sc.content_id and ct.locale  in ('en', 'en-US')
    left join content_service_data.contents cont on ct.content_id = cont.id
    left join progress_tmp as p
      on p.id = sc.progress_id
    left join progress_enrollment_data ped
      on ped.id = p.id
    left join content_service_data.progress_time_logs as ptl
      on p.id = ptl.progress_id
    left join adminifi_data.users as u
      on sc.user_id = u.uuid
    group by
      ct.name
      ,sc.content_id
      ,p.created_at::date
      ,u.organization_uuid
      ,sc.user_id
      ,sc.content_id || ' - ' || sc.progress_id || ' - ' || sc.user_id
      ,p.completed_at::date
      ,sc.archived
      ,sc.content_id || ' - ' || sc.progress_id || ' - ' || sc.user_id || ' - ' || sc.content_id
      ,p.status
      ,p.completed_at
      ,p.id
      ,p.role
      ,cont.business_lines
      ,p.policies_missing
      ,ped.region
      ,ped.worklocation
      ,p.created_at
      ,p.sdk_timer
      ,p.content_id
    );

    drop table if exists progress_enrollment_data;
    drop table if exists progress_tmp;

    insert into reporting_data.progress_report_data_staging
    select uod.OrgName
      ,uod.OrgId
      ,uod.organization_salesforce_id
      ,uod.organization_isdemo
      ,uod.organization_multi_country
      ,uod.organization_multi_state
      ,uod.organization_capabilities_list
      ,uod.users_first_name
      ,uod.users_last_name
      ,uod.users_last_sign_in_at
      ,uod.users_created_at
      ,uod.users_id
      ,uod.sso_id
      ,uod.employee_id
      ,uod.student_id
      ,uod.users_rule_set_roles
      ,uod.parsed_role
      ,uod.location_name
      ,uod.user_email
      ,uod.user_active
      ,uod.roster_name
      ,uod.cg_name
      ,uod.cgv_name
      ,sd.course
      ,sd.assignment_id
      ,sd.assignments_content_id
      ,sd.assignments_assignments_name
      ,sd.assignments_starts_on
      ,sd.user_assignments_starts_on
      ,sd.assignments_ends_on
      ,sd.assignments_organization_id
      ,sd.assignment_business_line
      ,sd.assignment_status
      ,sd.legacy_import_id
      ,sd.training_period_id
      ,sd.training_period_title
      ,sd.user_assignments_user_id
      ,sd.user_assignments_id
      ,sd.user_assignments_due_on
      ,sd.completed_at
      ,sd.past_due
      ,sd.assignment_progress_status
      ,sd.participation_status
      ,sd.user_course_assignment_counter
      ,sd.progress_derived_status
      ,sd.course_completed_at
      ,sd.is_scorm
      ,sd.progress_id
      ,sd.supervisor
      ,sd.lob_rls_id
      ,sd.total_time_spent_content
      ,sd.total_time_spent_platform
      ,sd.time_spent_in_course
      ,sd.policies_missing
      ,sd.invited_on
      ,sd.region
      ,sd.worklocation
      ,case
        when sd.policies_missing = false then
        sd.course_completed_at else null
      end as final_completion_date,
      sd.progress_created_at,
      sd.progress_started_at,
      sd.sdk_timer,
      sd.progress_content_id
    from users_org_data as uod
        left join scorm_data as sd
            on uod.orgid = sd.assignments_organization_id
            and uod.users_id = sd.user_assignments_user_id
    where 1 = 1
        and sd.user_assignments_user_id is not null;

    drop table if exists users_org_data;
    drop table if exists scorm_data;

    alter table reporting_data.progress_report_data rename to progress_report_data_old;
    alter table reporting_data.progress_report_data_staging rename to progress_report_data;
    alter table reporting_data.progress_report_data owner to datapipeline_app;
    grant all on reporting_data.progress_report_data to group admin_group;
    grant select, insert, update, delete on reporting_data.progress_report_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.progress_report_data to group querywriters_selective_rw;
    grant select on reporting_data.progress_report_data to group internalapps_ro;
    grant select on reporting_data.progress_report_data to group internalapps_rw_rt;
    grant select on reporting_data.progress_report_data to group querywriters_ro;
    grant select on reporting_data.progress_report_data to group tableau_progress_report;
    drop table if exists reporting_data.progress_report_data_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines, wait-for-ods-pipeline-1]
  input_node: []
  name: assessments-report-data
  command:
      drop table if exists progress_temp;
      create temp table progress_temp
      distkey(response_set_id)
      as (
          select
            j.version                   as course_version
            ,p.id                       as progress_id
            ,p.status                   as progress_status
            ,j.response_set_id          as response_set_id
            ,j.evaluation_slug          as evaluation_slug
            ,p.content_id               as content_id
            ,p.training_period_id     as training_period_id
          from
            spectrum_schema.ods_progress_json_extract j
            inner join content_service_data.progress p
              on j.id = p.id
         );

      drop table if exists assignments_temp;
      create temp table assignments_temp
      distkey(progress_id)
      as (
            select
              pua.progress_id           as progress_id
              ,ua.user_id               as user_id
              ,a.training_period_id     as training_period_id
              ,asgn.assignment_key      as assignment_key
              ,asgn.lob_rls_id          as lob_rls_id
              ,ua.participation_status  as participation_status
            from
              content_service_data.progress_user_assignments pua
              left join content_service_data.user_assignments ua on pua.user_assignment_id = ua.id
              left join content_service_data.assignments a on ua.assignment_id = a.id
              left join ods.dim_assignments asgn on asgn.assignment_id = a.id
                    and asgn.sourcesystem_id = 10 /*10 -- 10*/
         );

      drop table if exists reporting_data.assessments_report_data_staging;
      create table reporting_data.assessments_report_data_staging
      distkey(user_id)
      as (
            select
              u.uuid                       as user_id
              ,u.first_name                as first_name
              ,u.last_name                 as last_name
              ,u.student_id                as student_id
              ,u.email                     as email
              ,tp.training_period_title    as training_period_title
              ,c.content_title             as course_name
              ,ptmp.course_version         as course_version
              ,et.name                     as assessment_name
              ,rs.grade                    as assessment_score
              ,e.passing_grade             as assessment_passing_score
              ,rs.grading_status           as assessment_passed
              ,u.organization_uuid         as organization_uuid
              ,ptmp.progress_id            as progress_id
              ,ptmp.progress_status        as progress_status
              ,u.last_sign_in_at           as last_login_date
              ,(case when atmp.assignment_key is null then c.lob_rls_id else atmp.lob_rls_id end) as lob_rls_id
              ,e.slug                      as evaluation_slug
              ,atmp.participation_status
            from
              progress_temp ptmp
              left join assignments_temp atmp on ptmp.progress_id = atmp.progress_id
              left join adminifi_data.users u on atmp.user_id = u.uuid
              left join ods.dim_training_periods tp on atmp.training_period_id = tp.training_period_id
              left join ods.dim_contents c on ptmp.content_id = c.content_id
              left join evalufi_data.evaluations e on e.slug = ptmp.evaluation_slug
                and e.deleted_at is null
              left join evalufi_data.evaluation_translations et on e.id = et.evaluation_id
                   and et.locale  in ('en', 'en-US')
              left join evalufi_data.response_sets rs on ptmp.response_set_id = rs.id
            where
              e.type = 'Evaluations::Assessment'
            group by
              u.uuid
              ,u.first_name
              ,u.last_name
              ,u.student_id
              ,u.email
              ,tp.training_period_title
              ,c.content_title
              ,ptmp.course_version
              ,et.name
              ,rs.grade
              ,e.passing_grade
              ,rs.grading_status
              ,u.organization_uuid
              ,ptmp.progress_id
              ,ptmp.progress_status
              ,u.last_sign_in_at
              ,(case when atmp.assignment_key is null then c.lob_rls_id else atmp.lob_rls_id end)
              ,e.slug
              ,atmp.participation_status
         );

      drop table if exists assignments_temp;

      insert into reporting_data.assessments_report_data_staging
        select
          u.uuid                      as user_id
          ,u.first_name                as first_name
          ,u.last_name                 as last_name
          ,u.student_id                as student_id
          ,u.email                     as email
          ,tp.training_period_title    as training_period_title
          ,c.content_title             as course_name
          ,ptmp.course_version         as course_version
          ,et.name                     as assessment_name
          ,rs.grade                    as assessment_score
          ,e.passing_grade             as assessment_passing_score
          ,rs.grading_status           as assessment_passed
          ,u.organization_uuid         as organization_uuid
          ,ptmp.progress_id            as progress_id
          ,ptmp.progress_status        as progress_status
          ,u.last_sign_in_at           as last_login_date
          ,null                        as lob_rls_id
          ,e.slug                      as evaluation_slug
          ,case when sc.archived then 'scorm:\ archived' else 'scorm' end as participation_status
        from
          content_service_data.scorm_contexts sc
          inner join progress_temp ptmp on sc.progress_id = ptmp.progress_id
          left join adminifi_data.users u on sc.user_id = u.uuid
          left join ods.dim_contents c on ptmp.content_id = c.content_id
          left join evalufi_data.evaluations e on e.slug = ptmp.evaluation_slug
            and e.deleted_at is null
          left join evalufi_data.evaluation_translations et on e.id = et.evaluation_id
            and et.locale  in ('en', 'en-US')
          left join ods.dim_training_periods tp on ptmp.training_period_id = tp.training_period_id
          left join evalufi_data.response_sets rs on ptmp.response_set_id = rs.id
        where
            e.type = 'Evaluations::Assessment';

       drop table if exists progress_temp;

       alter table reporting_data.assessments_report_data rename to assessments_report_data_old;
       alter table reporting_data.assessments_report_data_staging rename to assessments_report_data;
       alter table reporting_data.assessments_report_data owner to datapipeline_app;

       grant all on reporting_data.assessments_report_data to group admin_group;
       grant select, insert, update, delete on reporting_data.assessments_report_data to group internalapps_rw;
       grant select, insert, update, delete on reporting_data.assessments_report_data to group querywriters_selective_rw;
       grant select on reporting_data.assessments_report_data to group internalapps_ro;
       grant select on reporting_data.assessments_report_data to group internalapps_rw_rt;
       grant select on reporting_data.assessments_report_data to group querywriters_ro;
       grant select on reporting_data.assessments_report_data to group tableau_progress_report;

       drop table if exists reporting_data.assessments_report_data_old;


- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-2]
  input_node: []
  name: evaluations-activity-user-detail-data
  command:

      /* Last date with data extracted from old fact fact_evaluations_activity_user_detail 2020-05-31 */
      drop table if exists eval_last_max;
      create temp table eval_last_max
      as
      select nvl(b.date_key, replace('2020-06-01', '-', '')::int) as last_max from (
        select max("date") + 1 as last_max_date
        from
          reporting_data.evaluations_activity_user_detail_data
      ) a
      left join
        ods_static_data.dim_dates b on a.last_max_date = b."date"
      ;

      insert into reporting_data.evaluations_activity_user_detail_data
         select
               dd.date
             , org.organization_name as org_name
             , org.organization_id as org_id
             , f.masked_user_uuid as id
             , de.evaluation_name
             , de.evaluation_id
             , des.section_title
             , des.section_id
             , dc.content_id
             , dc.content_title
             , deqt.question_text
             , deqt.question_id
             , deqt.question_slug
             , deqt.answer_text
             , deqt.answer_id
             , deqt.row_text
             , deqt.row_position
            , (deqt.question_id || ' - ' || deqt.question_text ||
              case
                when deqt.question_type in('Questions::Likert')
                  then ' - ' || row_text
                when deqt.question_type in('Questions::MultipleResponse')
                  then ' - ' || nvl(deqt.answer_position::varchar(4),deqt.answer_id)
                else ''
              end) as question_header
             , (case when f.lob_rls_id is null then dc.lob_rls_id else f.lob_rls_id end) as lob_rls_id
             , SUM(f.answer_count) as answer_count
         from ods.fact_evaluations_activity_progress_user_detail f
              left join ods_static_data.dim_dates as dd
                    on f.date_key = dd.date_key
              left join ods.dim_evalufi_sections as des
                    on f.evaluation_section_key = des.section_key
              left join ods.dim_evaluation_qna_texts deqt
                    on f.evaluation_qna_key = deqt.evaluation_qna_key
              left join ods.dim_organizations as org
                    on f.organization_key = org.organization_key
              inner join ods.dim_evaluations as de
                    on f.evaluation_key = de.evaluation_key
                    and not de.sqs
              left join ods.dim_contents dc
                    on f.content_key = dc.content_key
              join evalufi_data.answers a
                on a.id::varchar = deqt.answer_id
              join reference_data.evaluations_labels eval_lbls
                on de.evaluation_id::varchar = eval_lbls.evaluation_id
                  and des.section_id::varchar = eval_lbls.section_id
                  and deqt.question_id::varchar = eval_lbls.question_id
                  and eval_lbls.sourcesystem_id = 9
         where f.answer_count > 0
            and f.date_key >= (select last_max from eval_last_max)
            and f.date_key < replace(current_date::varchar, '-', '')::int
            and f.date_key >= replace('2020-06-01'::varchar, '-', '')::int
            and de.evaluation_type <> 'Evaluations::Assessment'
            and eval_lbls.report
         group by
               dd.date
             , org.organization_name
             , org.organization_id
             , f.masked_user_uuid
             , de.evaluation_name
             , de.evaluation_id
             , des.section_title
             , des.section_id
             , dc.content_id
             , dc.content_title
             , deqt.question_text
             , deqt.question_id
             , deqt.question_slug
             , deqt.answer_text
             , deqt.answer_id
             , deqt.row_text
             , deqt.row_position
             , question_header
             , (case when f.lob_rls_id is null then dc.lob_rls_id else f.lob_rls_id end)
      ;


- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines]
  input_node: []
  name: users-rls-data
  command:
      drop table if exists reporting_data.users_rls_data_staging;
      create table reporting_data.users_rls_data_staging
      as
        (select u.organization_uuid,
            u.uuid as user_id,
            split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) as separated_business_line
        from adminifi_data.users u
        cross join ods_static_data.static_numbers
        where 1 = 1
          and split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) is not null
          and split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) <> ''
          and s_number <= 100
      );

     alter table reporting_data.users_rls_data rename to users_rls_data_old;
     alter table reporting_data.users_rls_data_staging rename to users_rls_data;
     alter table reporting_data.users_rls_data owner to datapipeline_app;

     grant all on reporting_data.users_rls_data to group admin_group;
     grant select, insert, update, delete on reporting_data.users_rls_data to group internalapps_rw;
     grant select, insert, update, delete on reporting_data.users_rls_data to group querywriters_selective_rw;
     grant select on reporting_data.users_rls_data to group internalapps_ro;
     grant select on reporting_data.users_rls_data to group internalapps_rw_rt;
     grant select on reporting_data.users_rls_data to group querywriters_ro;
     grant select on reporting_data.users_rls_data to group tableau_progress_report;
     drop table if exists reporting_data.users_rls_data_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines]
  input_node: []
  name: content-users-rls-data
  command:
      drop table if exists reporting_data.content_users_rls_data_staging;
      create table reporting_data.content_users_rls_data_staging
      as
        (select contents.id as content_id,
            contents.business_lines as business_lines,
            split_part(replace(replace(replace(contents.business_lines,'[',''),']',''),'"',''),',',s_number) as separated_business_line
        from content_service_data.contents as contents
        cross join ods_static_data.static_numbers
        where 1 = 1
          and split_part(replace(replace(replace(contents.business_lines,'[',''),']',''),'"',''),',',s_number) is not null
          and split_part(replace(replace(replace(contents.business_lines,'[',''),']',''),'"',''),',',s_number) <> ''
          and s_number <=100
      );

     alter table reporting_data.content_users_rls_data rename to content_users_rls_data_old;
     alter table reporting_data.content_users_rls_data_staging rename to content_users_rls_data;
     alter table reporting_data.content_users_rls_data owner to datapipeline_app;

     grant all on reporting_data.content_users_rls_data to group admin_group;
     grant select, insert, update, delete on reporting_data.content_users_rls_data to group internalapps_rw;
     grant select, insert, update, delete on reporting_data.content_users_rls_data to group querywriters_selective_rw;
     grant select on reporting_data.content_users_rls_data to group internalapps_ro;
     grant select on reporting_data.content_users_rls_data to group internalapps_rw_rt;
     grant select on reporting_data.content_users_rls_data to group querywriters_ro;
     grant select on reporting_data.content_users_rls_data to group tableau_progress_report;
     drop table if exists reporting_data.content_users_rls_data_old;


- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines]
  input_node: []
  name: admin-users-rls-data
  command:
     drop table if exists reporting_data.admin_users_rls_data_staging;
     create table reporting_data.admin_users_rls_data_staging
     as
        (select u.organization_uuid,
            u.uuid as user_id,
            split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) as separated_business_line
         from adminifi_data.users u
         cross join ods_static_data.static_numbers
        where 1 = 1
          and split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) is not null
          and split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) <> ''
          and s_number <= 100
     );

     alter table reporting_data.admin_users_rls_data rename to admin_users_rls_data_old;
     alter table reporting_data.admin_users_rls_data_staging rename to admin_users_rls_data;
     alter table reporting_data.admin_users_rls_data owner to datapipeline_app;

     grant all on reporting_data.admin_users_rls_data to group admin_group;
     grant select, insert, update, delete on reporting_data.admin_users_rls_data to group internalapps_rw;
     grant select, insert, update, delete on reporting_data.admin_users_rls_data to group querywriters_selective_rw;
     grant select on reporting_data.admin_users_rls_data to group internalapps_ro;
     grant select on reporting_data.admin_users_rls_data to group internalapps_rw_rt;
     grant select on reporting_data.admin_users_rls_data to group querywriters_ro;
     grant select on reporting_data.admin_users_rls_data to group tableau_progress_report;
     drop table if exists reporting_data.admin_users_rls_data_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, wait-for-others-pipelines, wait-for-others-content-service-pipelines, progress-report-data]
  input_node: []
  name: ses-report-data
  command:

    drop table if exists reference_data.ses_report_data_progress_tmp_1 ;
    create table reference_data.ses_report_data_progress_tmp_1
    diststyle key
    distkey (response_set_id)
    as
    select
      progress_id,
      response_set_id,
      user_assignment_id
    from
      ods.progress_json_extract as progress
      inner join content_service_data.progress_user_assignments as prog_usr_asgn on progress.id = prog_usr_asgn.progress_id
    ;

    drop table if exists reference_data.ses_report_data_progress_tmp_2 ;
    create table reference_data.ses_report_data_progress_tmp_2
    diststyle key
    distkey(user_assignment_id)
    as
      select
        group_id,
        progress_id,
        user_assignment_id
      from
        reference_data.ses_report_data_progress_tmp_1 progress
      join
        evalufi_data.response_sets as response_sets on progress.response_set_id=response_sets.id
    ;
    drop table reference_data.ses_report_data_progress_tmp_1;

    drop table if exists reference_data.ses_report_data_user_assignments ;
    create table reference_data.ses_report_data_user_assignments
    diststyle all as
    select
      id,
      assignment_id,
      user_id
    from
      content_service_data.user_assignments
    ;

    drop table if exists reference_data.ses_report_data_progress_tmp_3 ;
    create table reference_data.ses_report_data_progress_tmp_3
    diststyle key
    distkey(assignment_id)
    as
    select
      group_id,
      progress_id,
      user_assignment_id,
      assignment_id,
      user_id
    from
      reference_data.ses_report_data_progress_tmp_2
    join
      reference_data.ses_report_data_user_assignments as usr_asng on usr_asng.id = ses_report_data_progress_tmp_2.user_assignment_id
    ;
    drop table reference_data.ses_report_data_progress_tmp_2;
    drop table reference_data.ses_report_data_user_assignments;

    drop table if exists reference_data.ses_report_data_progress_tmp_4 ;
    create table reference_data.ses_report_data_progress_tmp_4
    diststyle key
    distkey(user_id)
    as
    select
      p.group_id,
      p.progress_id,
      p.user_assignment_id,
      p.assignment_id,
      p.user_id,
      asgn.business_line
    from
      reference_data.ses_report_data_progress_tmp_3 p
    join
      content_service_data.assignments as asgn on asgn.id = p.assignment_id
    ;
    drop table reference_data.ses_report_data_progress_tmp_3;

    drop table if exists reference_data.ses_report_data_progress_tmp_5 ;
    create table reference_data.ses_report_data_progress_tmp_5
    diststyle key
    distkey (group_id)
    as
    select
      distinct
      p.group_id,
      p.progress_id,
      p.user_assignment_id,
      p.assignment_id,
      p.user_id,
      p.business_line,
      users.uuid,
      users.email as email,
      users.first_name,
      users.last_name,
      users.sso_id
    from
      reference_data.ses_report_data_progress_tmp_4 p
    join
      adminifi_data.users users on users.uuid=p.user_id
    ;
    drop table reference_data.ses_report_data_progress_tmp_4;

    drop table if exists reference_data.ses_report_data_eval_user_detail_tmp ;
    create table reference_data.ses_report_data_eval_user_detail_tmp (
      "date" datetime encode zstd,
      training_period_title varchar(256) encode zstd,
      content_id varchar(87) encode zstd,
      content_title varchar(255) encode zstd,
      lob_rls_id integer encode az64,
      question_slug varchar(255) encode zstd,
      question_text varchar(65535) encode zstd,
      question_labels varchar(255) encode zstd,
      answer_slug varchar(65535) encode zstd,
      answer_text varchar(4000) encode zstd,
      evaluation_slug varchar(255) encode zstd,
      evaluation_name varchar(65535) encode zstd,
      survey_label varchar(255) encode zstd,
      organization_id varchar(87) encode zstd,
      organization_name varchar(255) encode zstd,
      masked_user_uuid varchar(36) encode zstd,
      answer_count bigint encode az64
    ) diststyle key
    distkey (masked_user_uuid);

    insert into reference_data.ses_report_data_eval_user_detail_tmp
    select
      dt.date
      ,training_periods.training_period_title
      ,cont.content_id
      ,cont.content_title as course
      ,cont.lob_rls_id
      ,eval_qna_texts.question_slug
      ,eval_qna_texts.question_text
      ,eval_qna_texts.question_labels as question_label
      ,eval_qna_texts.answer_slug
      ,eval_qna_texts.answer_text
      ,evals.evaluation_slug
      ,evals.evaluation_name
      ,evals.evaluation_labels as survey_label
      ,orgs.organization_id
      ,orgs.organization_name
      ,masked_user_uuid
      ,min(feaud.answer_count) as answer_count
    from
      ods.fact_evaluations_activity_user_detail feaud
      inner join ods.dim_contents as cont on cont.content_key = feaud.content_key
      inner join ods.dim_training_periods as training_periods on training_periods.training_period_key = feaud.training_period_key
      inner join ods.dim_evaluation_qna_texts as eval_qna_texts on eval_qna_texts.evaluation_qna_key = feaud.evaluation_qna_key
      inner join ods.dim_evaluations as evals on evals.evaluation_key = feaud.evaluation_key
      inner join ods.dim_organizations as orgs on feaud.organization_key = orgs.organization_key
      inner join ods_static_data.dim_dates dt on dt.date_key = feaud.date_key
    where
      feaud.sourcesystem_id = 9
      and feaud.date_key < replace('2020-06-01'::varchar, '-', '')::int
    group by
      dt.date
      ,training_periods.training_period_title
      ,cont.content_id
      ,cont.content_title
      ,cont.lob_rls_id
      ,eval_qna_texts.question_slug
      ,eval_qna_texts.question_text
      ,eval_qna_texts.question_labels
      ,eval_qna_texts.answer_slug
      ,eval_qna_texts.answer_text
      ,evals.evaluation_slug
      ,evals.evaluation_name
      ,evals.evaluation_labels
      ,orgs.organization_id
      ,orgs.organization_name
      ,masked_user_uuid
    ;

    insert into reference_data.ses_report_data_eval_user_detail_tmp
    select
      dt.date
      ,training_periods.training_period_title
      ,cont.content_id
      ,cont.content_title as course
      ,cont.lob_rls_id
      ,eval_qna_texts.question_slug
      ,eval_qna_texts.question_text
      ,eval_qna_texts.question_labels as question_label
      ,eval_qna_texts.answer_slug
      ,eval_qna_texts.answer_text
      ,evals.evaluation_slug
      ,evals.evaluation_name
      ,evals.evaluation_labels as survey_label
      ,orgs.organization_id
      ,orgs.organization_name
      ,masked_user_uuid
      ,min(feaud.answer_count) as answer_count
    from
      ods.fact_evaluations_activity_progress_user_detail feaud
      inner join ods.dim_contents as cont on cont.content_key = feaud.content_key
      inner join ods.dim_training_periods as training_periods on training_periods.training_period_key = feaud.training_period_key
      inner join ods.dim_evaluation_qna_texts as eval_qna_texts on eval_qna_texts.evaluation_qna_key = feaud.evaluation_qna_key
      inner join ods.dim_evaluations as evals on evals.evaluation_key = feaud.evaluation_key
      inner join ods.dim_organizations as orgs on feaud.organization_key = orgs.organization_key
      inner join ods_static_data.dim_dates dt on dt.date_key = feaud.date_key
    where
      feaud.sourcesystem_id = 9
      and feaud.date_key >= replace('2020-06-01'::varchar, '-', '')::int
    group by
      dt.date
      ,training_periods.training_period_title
      ,cont.content_id
      ,cont.content_title
      ,cont.lob_rls_id
      ,eval_qna_texts.question_slug
      ,eval_qna_texts.question_text
      ,eval_qna_texts.question_labels
      ,eval_qna_texts.answer_slug
      ,eval_qna_texts.answer_text
      ,evals.evaluation_slug
      ,evals.evaluation_name
      ,evals.evaluation_labels
      ,orgs.organization_id
      ,orgs.organization_name
      ,masked_user_uuid
    ;

    drop table if exists reporting_data.ses_report_data_staging;
    create table reporting_data.ses_report_data_staging
      as
        select
          eval_user_detail_tmp.date
          ,eval_user_detail_tmp.organization_id as org_uuid
          ,eval_user_detail_tmp.organization_name as org_name
          ,eval_user_detail_tmp.training_period_title
          ,p.uuid
          ,p.email as email
          ,p.first_name
          ,p.last_name
          ,p.sso_id
          ,eval_user_detail_tmp.evaluation_slug
          ,eval_user_detail_tmp.evaluation_name
          ,eval_user_detail_tmp.content_id
          ,eval_user_detail_tmp.content_title as course
          ,eval_user_detail_tmp.question_slug
          ,eval_user_detail_tmp.question_text
          ,eval_user_detail_tmp.question_labels as question_label
          ,eval_user_detail_tmp.answer_slug
          ,eval_user_detail_tmp.answer_text
          ,eval_user_detail_tmp.survey_label
          ,min(eval_user_detail_tmp.answer_count) as answer_count
          ,(case when p.assignment_id is not null then ods.f_lob_rls_finder(p.business_line)
          else eval_user_detail_tmp.lob_rls_id end) as lob_rls_id
        from
          reference_data.ses_report_data_eval_user_detail_tmp as eval_user_detail_tmp
        join
          reference_data.ses_report_data_progress_tmp_5 p on p.group_id=eval_user_detail_tmp.masked_user_uuid
        where
          eval_user_detail_tmp.answer_count != 0

        group by
          eval_user_detail_tmp.date
          ,eval_user_detail_tmp.organization_id
          ,eval_user_detail_tmp.organization_name
          ,eval_user_detail_tmp.training_period_title
          ,p.uuid
          ,p.email
          ,p.first_name
          ,p.last_name
          ,p.sso_id
          ,eval_user_detail_tmp.evaluation_slug
          ,eval_user_detail_tmp.evaluation_name
          ,eval_user_detail_tmp.content_id
          ,eval_user_detail_tmp.content_title
          ,eval_user_detail_tmp.question_slug
          ,eval_user_detail_tmp.question_text
          ,eval_user_detail_tmp.question_labels
          ,eval_user_detail_tmp.answer_slug
          ,eval_user_detail_tmp.answer_text
          ,eval_user_detail_tmp.survey_label
          ,(case when p.assignment_id is not null then ods.f_lob_rls_finder(p.business_line)
          else eval_user_detail_tmp.lob_rls_id end);

          drop table reference_data.ses_report_data_progress_tmp_5;

        insert into reporting_data.ses_report_data_staging
        select
          eval_user_detail_tmp.date
          ,eval_user_detail_tmp.organization_id as org_uuid
          ,eval_user_detail_tmp.organization_name as org_name
          ,eval_user_detail_tmp.training_period_title
          ,users.uuid
          ,users.email as email
          ,users.first_name
          ,users.last_name
          ,users.sso_id
          ,eval_user_detail_tmp.evaluation_slug
          ,eval_user_detail_tmp.evaluation_name
          ,eval_user_detail_tmp.content_id
          ,eval_user_detail_tmp.content_title as course
          ,eval_user_detail_tmp.question_slug
          ,eval_user_detail_tmp.question_text
          ,eval_user_detail_tmp.question_labels as question_label
          ,eval_user_detail_tmp.answer_slug
          ,eval_user_detail_tmp.answer_text
          ,eval_user_detail_tmp.survey_label
          ,min(eval_user_detail_tmp.answer_count) as answer_count
          ,eval_user_detail_tmp.lob_rls_id
       from
          reference_data.ses_report_data_eval_user_detail_tmp as eval_user_detail_tmp
          inner join evalufi_data.response_sets as response_sets on response_sets.group_id = eval_user_detail_tmp.masked_user_uuid
          inner join ods.progress_json_extract as progress on response_sets.id = progress.response_set_id
          inner join content_service_data.scorm_contexts sc ON progress.id = sc.progress_id
          inner join adminifi_data.users users ON sc.user_id = users.uuid
       where
          eval_user_detail_tmp.answer_count != 0
       group by
          eval_user_detail_tmp.date
          ,eval_user_detail_tmp.organization_id
          ,eval_user_detail_tmp.organization_name
          ,eval_user_detail_tmp.training_period_title
          ,users.uuid
          ,users.email
          ,users.first_name
          ,users.last_name
          ,users.sso_id
          ,eval_user_detail_tmp.evaluation_slug
          ,eval_user_detail_tmp.evaluation_name
          ,eval_user_detail_tmp.content_id
          ,eval_user_detail_tmp.content_title
          ,eval_user_detail_tmp.question_slug
          ,eval_user_detail_tmp.question_text
          ,eval_user_detail_tmp.question_labels
          ,eval_user_detail_tmp.answer_slug
          ,eval_user_detail_tmp.answer_text
          ,eval_user_detail_tmp.survey_label
          ,eval_user_detail_tmp.lob_rls_id
      ;

      drop table reference_data.ses_report_data_eval_user_detail_tmp;

      alter table reporting_data.ses_report_data rename to ses_report_data_old;
      alter table reporting_data.ses_report_data_staging rename to ses_report_data;
      alter table reporting_data.ses_report_data owner to datapipeline_app;

      grant all on reporting_data.ses_report_data to group admin_group;
      grant select, insert, update, delete on reporting_data.ses_report_data to group internalapps_rw;
      grant select, insert, update, delete on reporting_data.ses_report_data to group querywriters_selective_rw;
      grant select on reporting_data.ses_report_data to group internalapps_ro;
      grant select on reporting_data.ses_report_data to group internalapps_rw_rt;
      grant select on reporting_data.ses_report_data to group querywriters_ro;
      grant select on reporting_data.ses_report_data to group tableau_progress_report;

      drop table if exists reporting_data.ses_report_data_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines, wait-for-ods-pipeline-1, wait-for-ods-pipeline-2]
  input_node: []
  name: policy-acknowledgement-report-data
  command:

    drop table if exists max_signed_date;
    create temp table max_signed_date
    diststyle all
    as(
        SELECT
          MAX(signed_at) AS signed_at,
          policy_id,
          progress_id
        FROM
          ods.progress_json_extract_policies
        WHERE
          signed_at is not null
        GROUP BY
          policy_id, progress_id
      );

    drop table if exists policy_signed_info;
    create temp table policy_signed_info
    distkey(policy_id)
    sortkey(policy_name, signed_at)
    as(
        SELECT
          po.business_policy_id as policy_id,
          po.policy_name AS policy_name,
          poinfo.signed_at,
          COUNT(distinct poinfo.policy_id) AS policies_acknowledged,
          progress.id as progress_id,
          progress.content_id as policy_content_id,
          po.business_policy_id
        FROM
          max_signed_date as poinfo
          left join ods.dim_policies po
            on poinfo.policy_id = po.business_policy_id
          left join content_service_data.progress progress
            on poinfo.progress_id = progress.id

        GROUP BY
          po.business_policy_id,
          po.policy_name,
          poinfo.signed_at,
          progress.id,
          progress.content_id,
          po.business_policy_id
      );

    drop table if exists reporting_data.policy_acknowledgement_data_staging;
    create table reporting_data.policy_acknowledgement_data_staging (
      user_id               varchar(36) encode zstd,
      first_name            varchar(2000) encode zstd,
      last_name             varchar(2000) encode zstd,
      student_id            varchar(500) encode zstd,
      employee_id           varchar(1000) encode zstd,
      location_id           integer encode az64,
      location              varchar(64) encode zstd,
      organization_uuid     varchar(36) encode zstd,
      org_name              varchar(255) encode zstd,
      signed_at_date_all    timestamp encode az64,
      policy_id             integer encode az64,
      content_id            varchar(36) encode zstd,
      content_name          varchar(128) encode zstd,
      assignment_id         integer encode az64,
      assignment_date       date encode az64,
      supervisor            boolean encode zstd,
      training_period_title varchar(256) encode zstd,
      policy_name           varchar(255) encode zstd,
      business_lines        varchar(256) encode zstd,
      policies_acknowledged bigint encode az64,
      lob_rls_id            integer encode az64,
      progress_id           varchar(36) encode zstd
    ) distkey(user_id)
      sortkey(organization_uuid, student_id, location_id)
    ;

    insert into reporting_data.policy_acknowledgement_data_staging
      SELECT
        ua.user_id,
        u.first_name,
        u.last_name,
        u.student_id,
        u.employee_id,
        u.location_id,
        l.name AS location,
        o.uuid as organization_uuid,
        o.name AS org_name,
        poinfo.signed_at as signed_at_date_all,
        poinfo.business_policy_id as policy_id,
        c.id AS content_id,
        ct.name AS content_name,
        ua.assignment_id,
        ua.created_at::date AS assignment_date,
          then False
          else
               then True
               else False
             end
        end as supervisor,
        nvl(tp.name, 'No Training Period') AS training_period_title,
        poinfo.policy_name AS policy_name,
        REPLACE(REPLACE(REPLACE(u.business_lines, '[', ''), '"', ''), ']', '') AS business_lines,
        poinfo.policies_acknowledged,
        (case
          when a.id is not null then ods.f_lob_rls_finder(a.business_line)
          when c.id is not null then ods.f_lob_rls_finder(nvl(c.business_lines,''))
          else null
         end) as lob_rls_id,
        poinfo.progress_id
      FROM
        policy_signed_info poinfo
        inner JOIN content_service_data.contents as c ON c.id = poinfo.policy_content_id
        inner JOIN content_service_data.progress p ON p.id = poinfo.progress_id and p.content_id = c.id
        inner JOIN content_service_data.progress_user_assignments pua ON p.id = pua.progress_id
        inner JOIN content_service_data.user_assignments ua ON ua.id = pua.user_assignment_id
        inner JOIN content_service_data.assignments a ON a.id = ua.assignment_id
        LEFT JOIN adminifi_data.training_periods tp  ON tp.id = a.training_period_id
        LEFT JOIN adminifi_data.users u ON u.uuid = ua.user_id
        LEFT JOIN adminifi_data.organizations o ON o.uuid = u.organization_uuid
        LEFT JOIN adminifi_data.locations l ON l.id = u.location_id
        LEFT JOIN content_service_data.content_translations ct ON ct.content_id = c.id and locale IN ('en', 'en-US');

    insert into reporting_data.policy_acknowledgement_data_staging
      SELECT
        sc.user_id,
        u.first_name,
        u.last_name,
        u.student_id,
        u.employee_id,
        u.location_id,
        l.name AS location,
        o.uuid as organization_uuid,
        o.name AS org_name,
        poinfo.signed_at as signed_at_date_all,
        poinfo.business_policy_id as policy_id,
        c.id AS content_id,
        ct.name AS content_name,
        null as assignment_id,
        null AS assignment_date,
          then False
          else
               then True
               else False
             end
        end as supervisor,
        nvl(tp.name, 'No Training Period') AS training_period_title,
        poinfo.policy_name AS policy_name,
        REPLACE(REPLACE(REPLACE(u.business_lines, '[', ''), '"', ''), ']', '') AS business_lines,
        poinfo.policies_acknowledged,
        null as lob_rls_id,
        poinfo.progress_id
      FROM
        policy_signed_info poinfo
        inner JOIN content_service_data.contents as c ON c.id = poinfo.policy_content_id
        inner JOIN content_service_data.progress p ON p.id = poinfo.progress_id and p.content_id = c.id
        inner JOIN content_service_data.scorm_contexts sc ON p.id = sc.progress_id
        LEFT JOIN adminifi_data.training_periods tp  ON tp.id = p.training_period_id
        LEFT JOIN adminifi_data.users u ON u.uuid = sc.user_id
        LEFT JOIN adminifi_data.organizations o ON o.uuid = u.organization_uuid
        LEFT JOIN adminifi_data.locations l ON l.id = u.location_id
        LEFT JOIN content_service_data.content_translations ct ON ct.content_id = c.id and locale IN ('en', 'en-US');

    drop table if exists policy_signed_info;
    drop table if exists max_signed_date;

    alter table reporting_data.policy_acknowledgement_data rename to policy_acknowledgement_data_old;
    alter table reporting_data.policy_acknowledgement_data_staging rename to policy_acknowledgement_data;
    alter table reporting_data.policy_acknowledgement_data owner to datapipeline_app;

    grant all on reporting_data.policy_acknowledgement_data to group admin_group;
    grant select, insert, update, delete on reporting_data.policy_acknowledgement_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.policy_acknowledgement_data to group querywriters_selective_rw;
    grant select on reporting_data.policy_acknowledgement_data to group internalapps_ro;
    grant select on reporting_data.policy_acknowledgement_data to group internalapps_rw_rt;
    grant select on reporting_data.policy_acknowledgement_data to group querywriters_ro;
    grant select on reporting_data.policy_acknowledgement_data to group tableau_progress_report;

    drop table if exists reporting_data.policy_acknowledgement_data_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, teams-admin-lookup]
  input_node: []
  name: tableau-lob-rls-data
  command:

     drop table if exists reporting_data.tableau_lob_rls_data_staging;
     create table reporting_data.tableau_lob_rls_data_staging
     distkey(user_uuid)
     sortkey(organization_uuid, lob_rls_id)
     as
        (
          select
            user_uuid
            ,organization_uuid
            ,lob_desc
            ,lob_rls_id
            ,is_primary_admin
          from (
            select u.uuid as user_uuid,
                u.organization_uuid,
                split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) as lob_desc,
                ods.f_lob_rls_finder(split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number)) as lob_rls_id,
                nvl(admins.is_primary_admin, false) as is_primary_admin
            from adminifi_data.users u
              cross join ods_static_data.static_numbers
            left join reporting_data.teams_admin_lookup admins
              on u.uuid = admins.user_uuid
            where 1 = 1
              and split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) is not null
              and split_part(replace(replace(replace(u.business_lines,'[',''),']',''),'"',''),',',s_number) <> ''
              and s_number <= 20

            union all

            select
                u.uuid as user_uuid,
                u.organization_uuid,
                replace(replace(replace(u.business_lines,'[',''),']',''),'"','') as lob_desc,
                ods.f_lob_rls_finder(u.business_lines) as lob_rls_id,
                nvl(admins.is_primary_admin, false) as is_primary_admin
            from adminifi_data.users u
            left join reporting_data.teams_admin_lookup admins
              on u.uuid = admins.user_uuid
          )
         group by
            user_uuid
            ,organization_uuid
            ,lob_desc
            ,lob_rls_id
            ,is_primary_admin
       );

     alter table reporting_data.tableau_lob_rls_data rename to tableau_lob_rls_data_old;
     alter table reporting_data.tableau_lob_rls_data_staging rename to tableau_lob_rls_data;
     alter table reporting_data.tableau_lob_rls_data owner to datapipeline_app;

     grant all on reporting_data.tableau_lob_rls_data to group admin_group;
     grant select, insert, update, delete on reporting_data.tableau_lob_rls_data to group internalapps_rw;
     grant select, insert, update, delete on reporting_data.tableau_lob_rls_data to group querywriters_selective_rw;
     grant select on reporting_data.tableau_lob_rls_data to group internalapps_ro;
     grant select on reporting_data.tableau_lob_rls_data to group internalapps_rw_rt;
     grant select on reporting_data.tableau_lob_rls_data to group querywriters_ro;
     grant select on reporting_data.tableau_lob_rls_data to group tableau_progress_report;
     drop table if exists reporting_data.tableau_lob_rls_data_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, tableau-lob-rls-data]
  input_node: []
  name: rls-elective-learning-team
  command:
    drop table if exists reference_data.rls_a_table_team_staging;
    create table reference_data.rls_a_table_team_staging
    (
      current_admin_uuid varchar(50) encode zstd,
      organization_uuid varchar(50) encode zstd,
      admin_uuid varchar(50) encode zstd,
      is_primary_admin boolean encode zstd
    )distkey(admin_uuid)
    sortkey(organization_uuid, current_admin_uuid);

    insert into reference_data.rls_a_table_team_staging
    select
      distinct
      users.uuid as current_admin_uuid
      ,users.organization_uuid
      ,users.uuid as admin_uuid
      ,tableau_rls.is_primary_admin
    from
      adminifi_data.users
      inner join reporting_data.tableau_lob_rls_data as tableau_rls on users.uuid = tableau_rls.user_uuid
    where
      tableau_rls.lob_rls_id & 16;

    insert into reference_data.rls_a_table_team_staging
    select
      distinct
      users.uuid as current_admin_uuid
      , users.organization_uuid
      , team_managers.user_id as admin_uuid
      , tableau_rls.is_primary_admin
    from
    adminifi_data.users
      inner join reporting_data.tableau_lob_rls_data as tableau_rls on users.uuid = tableau_rls.user_uuid
      inner join adminifi_data.teams on users.organization_uuid = teams.organization_id
      inner join adminifi_data.team_managers on teams.id = team_managers.team_id
    where
      tableau_rls.lob_rls_id & 16
      and tableau_rls.is_primary_admin;

    alter table reference_data.rls_a_table_team rename to rls_a_table_team_old;
    alter table reference_data.rls_a_table_team_staging rename to rls_a_table_team;
    alter table reference_data.rls_a_table_team owner to datapipeline_app;

    grant all on reference_data.rls_a_table_team to group admin_group;
    grant select, insert, update, delete on reference_data.rls_a_table_team to group internalapps_rw;
    grant select, insert, update, delete on reference_data.rls_a_table_team to group querywriters_selective_rw;
    grant select on reference_data.rls_a_table_team to group internalapps_ro;
    grant select on reference_data.rls_a_table_team to group internalapps_rw_rt;
    grant select on reference_data.rls_a_table_team to group querywriters_ro;
    grant select on reference_data.rls_a_table_team to group tableau_progress_report;

    drop table if exists reference_data.rls_a_table_team_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: engagement-activities-at-program-level
  command:
     drop table if exists reporting_data.engagement_activities_program_level_staging;
     create table reporting_data.engagement_activities_program_level_staging
     distkey(program_key)
     sortkey(program_key, organization_key)
     as
        (
          select
            dates.date as activity_date,
            o.organization_key,
            o.organization_uuid,
            fact_activities.program_key,
            fact_activities.guest_user,
            fact_activities.team_uuid,
            tal.user_uuid as team_manager_uuid,
            (tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name,
            o.organization_isdemo,
            o.organization_name,
            case
              when fact_activities.program_key = '-99999' then 'N/A'
              else nvl(programs.program_name, 'N/A')
            end as program_name,
            up_resp.user_partner_key,
            case
              when fact_activities.user_partner_key = '-99999' then 'N/A'
              else nvl(up_resp.partner, 'N/A')
            end as partner_name,
            program_users_created,
            module_starts,
            incentive_qualifications,
            custom_page_user_conversions,
            custom_page_user_views,
            visits_count,
            visits_under_4hr_count,
            total_visit_duration,
            total_visit_under_4hr_duration,
            visit_duration_mean
          from ods.fact_program_engagement_activity as fact_activities
            inner join ods_static_data.dim_dates as dates on fact_activities.date_key = dates.date_key
            inner join ods.dim_organizations as o on o.organization_key = fact_activities.organization_key
            inner join ods.dim_programs as programs on programs.program_key = fact_activities.program_key
            inner join ods.dim_user_partner_responses as up_resp on up_resp.user_partner_key = fact_activities.user_partner_key
            left join reporting_data.teams_admin_lookup tal on tal.team_uuid = fact_activities.team_uuid
          group by
            dates.date,
            o.organization_key,
            o.organization_uuid,
            fact_activities.program_key,
            fact_activities.guest_user,
            fact_activities.team_uuid,
            tal.user_uuid,
            team_manager_name,
            o.organization_isdemo,
            o.organization_name,
            program_name,
            up_resp.user_partner_key,
            partner_name,
            program_users_created,
            module_starts,
            incentive_qualifications,
            custom_page_user_conversions,
            custom_page_user_views,
            visits_count,
            visits_under_4hr_count,
            total_visit_duration,
            total_visit_under_4hr_duration,
            visit_duration_mean
      );

     alter table reporting_data.engagement_activities_program_level rename to engagement_activities_program_level_old;
     alter table reporting_data.engagement_activities_program_level_staging rename to engagement_activities_program_level;
     alter table reporting_data.engagement_activities_program_level owner to datapipeline_app;

     grant all on reporting_data.engagement_activities_program_level to group admin_group;
     grant select, insert, update, delete on reporting_data.engagement_activities_program_level to group internalapps_rw;
     grant select, insert, update, delete on reporting_data.engagement_activities_program_level to group querywriters_selective_rw;
     grant select on reporting_data.engagement_activities_program_level to group internalapps_ro;
     grant select on reporting_data.engagement_activities_program_level to group internalapps_rw_rt;
     grant select on reporting_data.engagement_activities_program_level to group querywriters_ro;
     grant select on reporting_data.engagement_activities_program_level to group tableau_progress_report;
     drop table if exists reporting_data.engagement_activities_program_level_old;


- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: engagement-activities-at-playlist-level
  command:
     drop table if exists reporting_data.engagement_activities_playlist_level_staging;
     create table reporting_data.engagement_activities_playlist_level_staging
     distkey(organization_uuid)
     sortkey(organization_uuid, activity_date)
     as
        (
          select
            fact_activities.activity_date,
            fact_activities.guest,
            fact_activities.playlist_name,
            o.organization_uuid,
            o.organization_isdemo,
            o.organization_name,
            case
              when fact_activities.program_key = '-99999' then 'N/A'
              else nvl(programs.program_name, 'N/A')
            end as program_name,
            case
              when fact_activities.user_partner_key = '-99999' then 'N/A'
              else nvl(up_resp.partner, 'N/A')
            end as partner_name,
            fact_activities.team_uuid as team_uuid,
            tal.user_uuid as team_manager_uuid,
            (tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name,
            sum(case when (fact_activities.metric_name = 'incentive_qualifications') then fact_activities.value else null end) as incentive_qualifications,
            sum(case when (fact_activities.metric_name = 'module_starts') then fact_activities.value else null end) as activity_starts,
            sum(case when (fact_activities.metric_name = 'page_views') then fact_activities.value else null end) as page_views,
            sum(case when (fact_activities.metric_name = 'visits_count') then fact_activities.value else null end) as visits_count,
            sum(case when (fact_activities.metric_name = 'visit_duration') then fact_activities.value else null end) as total_visit_duration,
            sum(case when (fact_activities.metric_name = 'visit_duration_median') then fact_activities.value else null end) as visit_duration_mean,
            sum(case when (fact_activities.metric_name = 'visits_under_4hrs_duration') then fact_activities.value else null end) as visits_under_4hrs_duration,
            sum(case when (fact_activities.metric_name = 'visits_under_4hrs_count') then fact_activities.value else null end) as visits_under_4hrs_count
          from ods.fact_playlist_engagement_activities as fact_activities
            inner join ods.dim_organizations as o on (o.organization_key = fact_activities.organization_key)
            inner join ods.dim_user_partner_responses as up_resp on (up_resp.user_partner_key = fact_activities.user_partner_key)
            inner join ods.dim_programs as programs on (programs.program_key = fact_activities.program_key)
            left join reporting_data.teams_admin_lookup tal on tal.team_uuid = fact_activities.team_uuid
          group by
            fact_activities.activity_date,
            fact_activities.guest,
            fact_activities.playlist_name,
            o.organization_uuid,
            o.organization_isdemo,
            o.organization_name,
            fact_activities.program_key,
            fact_activities.user_partner_key,
            program_name,
            partner_name,
            fact_activities.team_uuid,
            tal.user_uuid,
            team_manager_name
     );

     alter table reporting_data.engagement_activities_playlist_level rename to engagement_activities_playlist_level_old;
     alter table reporting_data.engagement_activities_playlist_level_staging rename to engagement_activities_playlist_level;
     alter table reporting_data.engagement_activities_playlist_level owner to datapipeline_app;

     grant all on reporting_data.engagement_activities_playlist_level to group admin_group;
     grant select, insert, update, delete on reporting_data.engagement_activities_playlist_level to group internalapps_rw;
     grant select, insert, update, delete on reporting_data.engagement_activities_playlist_level to group querywriters_selective_rw;
     grant select on reporting_data.engagement_activities_playlist_level to group internalapps_ro;
     grant select on reporting_data.engagement_activities_playlist_level to group internalapps_rw_rt;
     grant select on reporting_data.engagement_activities_playlist_level to group querywriters_ro;
     grant select on reporting_data.engagement_activities_playlist_level to group tableau_progress_report;
     drop table if exists reporting_data.engagement_activities_playlist_level_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: program-traffic-visits-report-data
  command:
    create temp table next_visits as (
      select
        programs.program_id
        ,programs.program_key
        ,programs.program_name
        ,team_id
        ,team_manager_last_name
        ,team_manager_first_name
        ,tal.user_uuid as team_manager_uuid
      from
        ods.dim_programs programs
          left join next_data.visits visits
            on visits.program_id = programs.program_id
          left join reference_data.atwork_user_team_mappings utm
            on utm.user_id = visits.user_id
          left join reporting_data.teams_admin_lookup tal
            on tal.team_uuid = utm.team_id
      group by
        programs.program_id
        ,programs.program_key
        ,programs.program_name
        ,team_id
        ,team_manager_last_name
        ,team_manager_first_name
        ,tal.user_uuid
    );

    drop table if exists reporting_data.program_traffic_visits_report_data_staging;
    create table reporting_data.program_traffic_visits_report_data_staging (
          visit_started_at_date date encode az64,
          visit_campaign         varchar(512) encode zstd,
          content_title          varchar(512) encode zstd,
          visit_device_type      varchar(255) encode zstd,
          visit_medium           varchar(512) encode zstd,
          visit_source           varchar(512) encode zstd,
          visit_browser          varchar(255) encode zstd,
          visit_utm_term         varchar(512) encode zstd,
          visit_landing_page     varchar(8000) encode zstd,
          visit_os               varchar(36)  encode zstd,
          visit_referral_source  varchar(8000) encode zstd,
          visit_referring_domain varchar(255) encode zstd,
          program_name           varchar(255) encode zstd,
          organization_name      varchar(255) encode zstd,
          organization_isdemo    boolean encode zstd,
          organization_uuid      varchar(255) encode zstd,
          unique_visits_count    integer encode az64,
          team_uuid              varchar(36) encode zstd,
          team_manager_uuid      varchar(36) encode zstd,
          team_manager_name      varchar(200) encode zstd
          ) distkey (organization_name)
      sortkey (organization_name, program_name, content_title);

    insert into reporting_data.program_traffic_visits_report_data_staging
      select
        dates.date as visit_started_at_date
        ,fact.utm_campaign as visit_campaign
        ,fact.visit_utm_content as content_title
        ,fact.device_type as visit_device_type
        ,fact.utm_medium as visit_medium
        ,fact.utm_source as visit_source
        ,fact.visit_browser as visit_browser
        ,fact.visit_utm_term as visit_utm_term
        ,fact.landing_page as visit_landing_page
        ,fact.visit_os as visit_os
        ,fact.referrer as visit_referral_source
        ,fact.referring_domain as visit_referring_domain
        ,case
          when fact.program_key = '-99999' then 'N/A'
          else nvl(visits.program_name, 'N/A')
        end as program_name
        ,orgs.organization_name as organization_name
        ,orgs.organization_isdemo as organization_isdemo
        ,orgs.organization_uuid
        ,fact.visits_count as unique_visits_count
        ,visits.team_id as team_uuid
        ,visits.team_manager_uuid
        ,(visits.team_manager_last_name || ', ' || visits.team_manager_first_name) as team_manager_name
      from ods.fact_program_traffic_activity fact
      join ods_static_data.dim_dates as dates
        on fact.date_key = dates.date_key
      join ods.dim_organizations orgs
        on fact.organization_key = orgs.organization_key
      join next_visits visits
        on fact.program_key = visits.program_key
    ;

    drop table next_visits;

    alter table reporting_data.program_traffic_visits_report_data rename to program_traffic_visits_report_data_old;
    alter table reporting_data.program_traffic_visits_report_data_staging rename to program_traffic_visits_report_data;
    alter table reporting_data.program_traffic_visits_report_data owner to datapipeline_app;

    grant all on reporting_data.program_traffic_visits_report_data to group admin_group;
    grant select, insert, update, delete on reporting_data.program_traffic_visits_report_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.program_traffic_visits_report_data to group querywriters_selective_rw;
    grant select on reporting_data.program_traffic_visits_report_data to group internalapps_ro;
    grant select on reporting_data.program_traffic_visits_report_data to group internalapps_rw_rt;
    grant select on reporting_data.program_traffic_visits_report_data to group querywriters_ro;
    grant select on reporting_data.program_traffic_visits_report_data to group tableau_progress_report;

    drop table if exists reporting_data.program_traffic_visits_report_data_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-others-content-service-pipelines, wait-for-others-next-pipelines, wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: elective-learning-user-report
  command:
    drop table if exists reporting_data.a_table_user_report_staging;
    create table reporting_data.a_table_user_report_staging (
      learner_user_id               integer encode az64,
      course_name                   varchar(512) encode zstd,
      learner_user_sso_id           varchar(128) encode zstd,
      learner_first_name            varchar(256) encode zstd,
      learner_last_name             varchar(256) encode zstd,
      registration_datetime         timestamp encode az64,
      learner_last_accessed_date    varchar(32) encode zstd,
      learner_guest                 boolean encode zstd,
      learner_email                 varchar(256) encode zstd,
      content_id                    varchar(128) encode zstd,
      content_name                  varchar(256) encode zstd,
      content_type                  varchar(256) encode zstd,
      content_service_content_type  varchar(64) encode zstd,
      content_configuration         varchar(256) encode zstd,
      organization_uuid             varchar(256) encode zstd,
      organization_name             varchar(256) encode zstd,
      program_name                  varchar(256) encode zstd,
      program_id                    integer encode az64,
      program_user_id               integer encode az64,
      content_state                 varchar(1024) encode zstd,
      team_uuid                     varchar(36) encode zstd,
      team_manager_uuid             varchar(36) encode zstd,
      team_manager_name             varchar(200) encode zstd
    ) distkey(organization_uuid)
      sortkey(organization_uuid);

    drop table if exists team_manager;
    create temp table team_manager
      distkey(user_uuid) as (
        select
          next_users.uuid as user_uuid,
          nvl(invitations.team_id, tmem.team_id, tman.team_id) as team_uuid,
          nvl(tal_next.user_uuid, tal_admin_tmem.user_uuid, tal_admin_tman.user_uuid) as team_manager_uuid,
          nvl((tal_next.team_manager_last_name || ', ' || tal_next.team_manager_first_name),
              (tal_admin_tmem.team_manager_last_name || ', ' || tal_admin_tmem.team_manager_first_name),
              (tal_admin_tman.team_manager_last_name || ', ' || tal_admin_tman.team_manager_first_name)) as team_manager_name
        from next_data.users as next_users
        inner join adminifi_data.users as admin_users
           on next_users.foundry_id = admin_users.id
        left join next_data.invitation_by_teams as invitations
          on next_users.id = invitations.user_id
        left join adminifi_data.team_members as tmem
          on admin_users.uuid = tmem.user_id
        left join adminifi_data.team_managers as tman
          on admin_users.uuid = tman.user_id
        left join reporting_data.teams_admin_lookup as tal_next
          on invitations.team_id = tal_next.team_uuid
        left join reporting_data.teams_admin_lookup as tal_admin_tmem
          on tmem.team_id = tal_admin_tmem.team_uuid
        left join reporting_data.teams_admin_lookup as tal_admin_tman
          on tman.team_id = tal_admin_tman.team_uuid
        group by
          next_users.uuid,
          nvl(invitations.team_id, tmem.team_id, tman.team_id),
          team_manager_uuid,
          team_manager_name
    );

    insert into reporting_data.a_table_user_report_staging
      select
        fact.next_user_id as learner_user_id
        ,case
          when fact.content_type = 'QnA' then qt.question_text
          else contents.content_id || '-' || contents.content_title
        end as course_name
        ,adminifi_users.sso_id AS learner_user_sso_id
        ,case
          when next_users.guest then 'Guest'
          else nvl(next_users.first_name, adminifi_users.first_name, '')
        end as learner_first_name
        ,case
          when next_users.guest then 'User'
          else nvl(next_users.last_name, adminifi_users.last_name, '')
        end as learner_last_name
        ,nvl(adminifi_users.created_at, next_users.created_at) as registration_datetime
        ,nvl(next_users.last_sign_in_at::varchar, adminifi_users.current_sign_in_at::varchar, 'N/A') as learner_last_accessed_date
        ,nvl(next_users.guest, false) as learner_guest
        ,nvl(adminifi_users.email, next_users.email, '') as learner_email
        ,contents.content_id as content_id
        ,case
          when fact.question_id is not null then questions.slug
          else contents.content_title end as content_name
        ,fact.content_type as content_type
        ,content_service_content.type as content_service_content_type
        ,case
          when fact.content_type = 'QnA' then fact.content_type
          else contents.content_configuration end as content_configuration
        ,orgs.organization_uuid as organization_uuid
        ,orgs.organization_name as organization_name
        ,case
          when fact.program_key = '-99999' then 'N/A'
          else nvl(programs.program_name, 'N/A')
        end as program_name
        ,programs.program_id as program_id
        ,fact.program_user_id as program_user_id
        ,case
           when content_service_content.type = 'Content::ThirdPartyJsCss' then
            case
              when fact.content_state = '0' then 'Unopened'
              when fact.content_state = '1' then 'Completed'
              when fact.content_state = '2' then 'Completed'
              when fact.content_state = '3' then 'Completed'
              else fact.content_state
            end
           else
            case
              when fact.content_state = '0' then 'Unopened'
              when fact.content_state = '1' then 'In Progress'
              when fact.content_state = '2' then 'In Progress'
              when fact.content_state = '3' then 'Completed'
              else fact.content_state
            end
        end as content_state
        ,tm.team_uuid
        ,tm.team_manager_uuid
        ,tm.team_manager_name
      from ods.fact_users_content_states_qna_activity fact
      join next_data.users next_users
        on fact.next_user_id = next_users.id
      join ods.dim_organizations orgs
        on fact.organization_key = orgs.organization_key
      join ods.dim_programs programs
        on fact.program_key = programs.program_key
      left join adminifi_data.users adminifi_users
        on fact.adminifi_user_uuid = adminifi_users.uuid
      left join ods.dim_contents contents
        on fact.content_key = contents.content_key
      left join content_service_data.contents content_service_content
        on contents.content_uuid = content_service_content.id
      left join next_data.questions questions
        on fact.question_id is not null
       and questions.id = fact.question_id
      left join next_data.question_translations as qt
        on qt.question_id = questions.id
       and qt.locale in ('en', 'en-US')
      left join team_manager as tm
        on next_users.uuid = tm.user_uuid
    ;

    alter table reporting_data.a_table_user_report rename to a_table_user_report_old;
    alter table reporting_data.a_table_user_report_staging rename to a_table_user_report;
    alter table reporting_data.a_table_user_report owner to datapipeline_app;

    grant all on reporting_data.a_table_user_report to group admin_group;
    grant select, insert, update, delete on reporting_data.a_table_user_report to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.a_table_user_report to group querywriters_selective_rw;
    grant select on reporting_data.a_table_user_report to group internalapps_ro;
    grant select on reporting_data.a_table_user_report to group internalapps_rw_rt;
    grant select on reporting_data.a_table_user_report to group querywriters_ro;
    grant select on reporting_data.a_table_user_report to group tableau_progress_report;

    drop table if exists reporting_data.a_table_user_report_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: content-engagement-activity-report-data
  command:
    drop table if exists reporting_data.content_engagement_activity_report_data_staging;
    create table reporting_data.content_engagement_activity_report_data_staging (
      activity_date         date encode az64,
      guest                 boolean encode zstd,
      playlist_name         varchar(256) encode zstd,
      organization_isdemo   boolean encode zstd,
      organization_name     varchar(256) encode zstd,
      organization_uuid     varchar(256) encode zstd,
      program_name          varchar(256) encode zstd,
      partner_name          varchar(1024) encode zstd,
      content_name          varchar(256) encode zstd,
      content_type          varchar(256) encode zstd,
      content_configuration varchar(256) encode zstd,
      team_uuid             varchar(36) encode zstd,
      team_manager_uuid     varchar(50) encode zstd,
      team_manager_name     varchar(210) encode zstd,
      visits_count          bigint encode az64,
      module_starts         integer encode az64,
      total_visit_duration  bigint encode az64,
      visit_duration_mean   bigint encode az64,
      page_views            integer encode az64,
      visits_under_4hrs_duration bigint encode az64,
      visits_under_4hrs_count bigint encode az64
    ) distkey(organization_name)
      sortkey(program_name);

    insert into reporting_data.content_engagement_activity_report_data_staging
      select
        dates.date as activity_date,
        nvl(fact.guest, false) as guest,
        fact.playlist_name,
        orgs.organization_isdemo,
        orgs.organization_name,
        orgs.organization_uuid,
        case
          when fact.program_key = '-99999' then 'N/A'
          else nvl(programs.program_name, 'N/A')
        end as program_name,
        case
          when fact.user_partner_key = '-99999' then 'N/A'
          else nvl(partners.partner, 'N/A')
        end as partner_name,
        nvl(contents.content_title, 'No Activity Name') AS content_name,
        contents.content_type as content_type,
        nvl(contents.content_configuration, 'N/A') as content_configuration,
        fact.team_uuid as team_uuid,
        tal.user_uuid as team_manager_uuid,
        (tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name,
        fact.visits_count,
        fact.module_starts as module_starts,
        fact.total_visit_duration as total_visit_duration,
        fact.visit_duration_mean as visit_duration_mean,
        fact.page_views as page_views,
        fact.visits_under_4hrs_duration as visits_under_4hrs_duration,
        fact.visits_under_4hrs_count as visits_under_4hrs_count
      from ods.fact_content_engagement_activities fact
      join ods.dim_organizations orgs
        on fact.organization_key = orgs.organization_key
      join ods.dim_programs programs
        on fact.program_key = programs.program_key
      join ods.dim_user_partner_responses partners
        on fact.user_partner_key = partners.user_partner_key
      join ods_static_data.dim_dates as dates
        on fact.date_key = dates.date_key
      join ods.dim_contents contents
        on fact.content_key = contents.content_key
      left join reporting_data.teams_admin_lookup tal on tal.team_uuid = fact.team_uuid;

    alter table reporting_data.content_engagement_activity_report_data rename to content_engagement_activity_report_data_old;
    alter table reporting_data.content_engagement_activity_report_data_staging rename to content_engagement_activity_report_data;
    alter table reporting_data.content_engagement_activity_report_data owner to datapipeline_app;

    grant all on reporting_data.content_engagement_activity_report_data to group admin_group;
    grant select, insert, update, delete on reporting_data.content_engagement_activity_report_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.content_engagement_activity_report_data to group querywriters_selective_rw;
    grant select on reporting_data.content_engagement_activity_report_data to group internalapps_ro;
    grant select on reporting_data.content_engagement_activity_report_data to group internalapps_rw_rt;
    grant select on reporting_data.content_engagement_activity_report_data to group querywriters_ro;
    grant select on reporting_data.content_engagement_activity_report_data to group tableau_progress_report;

    drop table if exists reporting_data.content_engagement_activity_report_data_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: atwork-personalized-learning-activity-denorm
  command:
    drop table if exists reporting_data.atwork_personalized_learning_activity_staging;
    create table reporting_data.atwork_personalized_learning_activity_staging  (
      source_table varchar(100) encode zstd,
      date_key integer encode az64,
      organization_key varchar(256) encode zstd,
      org_uuid varchar(100) encode zstd,
      program_key varchar(100) encode zstd,
      program_name varchar(255) encode zstd,
      diagnostic_key varchar(100) encode zstd,
      diagnostic_name varchar(255) encode zstd,
      diagnostic_evaluation_slug varchar(255) encode zstd,
      content_key varchar(150) encode zstd,
      user_partner_key varchar(100) encode zstd,
      partner varchar(255) encode zstd,
      question_name varchar(65535) encode zstd,
      question_translation_id integer encode az64,
      question_text varchar(65535) encode zstd,
      answer_text varchar(256) encode zstd,
      question_type varchar(255) encode zstd,
      response_count integer encode az64,
      recommended_content_starts integer encode az64,
      personalized_playlists_created_count integer encode az64,
      recommended_content_completions integer encode az64,
      content_recommended_in_pp_count integer encode az64,
      content_title varchar(255) encode zstd,
      lob_rls_id integer encode az64,
      team_id varchar(36) encode zstd,
      "date" date encode az64,
      team_manager_name varchar(200) encode zstd,
      team_manager_uuid varchar(50) encode zstd
    ) distkey(organization_key);

    insert into reporting_data.atwork_personalized_learning_activity_staging
    SELECT 'fact_atwork_program_response_activity' AS source_table,
           pra.date_key::integer,
           pra.organization_key,
           orgs.organization_id as org_uuid,
           pra.program_key,
           programs.program_name,
           pra.diagnostic_key,
           diag.diagnostic_name,
           diag.diagnostic_evaluation_slug,
           'N/A' AS content_key,
           coalesce(pra.user_partner_key, '-99999') as user_partner_key,
           coalesce(nvl(upr.partner, ap.partner), 'N/A') as partner,
           qna_texts.question_name,
           qna_texts.question_translation_id,
           qna_texts.question_text,
           answer_text as answer_text,
           qna_texts.question_type,
           sum(pra.response_count) as response_count,
           0 AS recommended_content_starts,
           0 AS personalized_playlists_created_count,
           0 AS recommended_content_completions,
           0 as content_recommended_in_pp_count,
           'N/A' as content_title,
           '-99999' as lob_rls_id,
           ut.team_id as team_id,
           dates.date as "date",
           (tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name,
           tal.user_uuid as team_manager_uuid
    FROM ods.fact_atwork_program_response_activity pra
    join ods_static_data.dim_dates as dates
        on dates.date_key = pra.date_key
    join ods.dim_organizations as orgs
        on orgs.organization_key = pra.organization_key
    join ods.dim_evaluation_qna_texts_multiresponse_by_answer qna_texts
        on qna_texts.evaluation_qna_key = pra.evaluation_qna_key
    join ods.dim_programs as programs
      on programs.program_key = pra.program_key
      and programs.sourcesystem_id = 3
    join ods.dim_diagnostics as diag
      on diag.diagnostic_key = pra.diagnostic_key
      and diag.sourcesystem_id = 3
    left join ods.dim_user_partner_responses as upr
      on upr.user_partner_key = pra.user_partner_key
    left join ods.dim_account_partners as ap
      on ap.account_partner_key = pra.account_partner_key
    left join reference_data.atwork_user_team_mappings ut
      on ut.user_id = upr.partner_user_id
    left join reporting_data.teams_admin_lookup tal on tal.team_uuid = ut.team_id
    group by
      pra.date_key,
      pra.organization_key,
      orgs.organization_id,
      pra.program_key,
      programs.program_name,
      pra.diagnostic_key,
      diag.diagnostic_name,
      diag.diagnostic_evaluation_slug,
      pra.user_partner_key,
      upr.partner,
      qna_texts.question_name,
      qna_texts.question_translation_id,
      qna_texts.question_text,
      qna_texts.answer_text,
      qna_texts.question_type,
      ut.team_id,
      dates.date,
      ap.partner,
      tal.team_manager_last_name,
      tal.team_manager_first_name,
      tal.user_uuid
    ;

    drop table if exists numbers;

    insert into reporting_data.atwork_personalized_learning_activity_staging
    SELECT 'fact_atwork_program_response_activity' AS source_table,
           pra.date_key::integer,
           pra.organization_key,
           orgs.organization_id as org_uuid,
           pra.program_key,
           programs.program_name,
           pra.diagnostic_key,
           diag.diagnostic_name,
           diag.diagnostic_evaluation_slug,
           'N/A' AS content_key,
           coalesce(pra.user_partner_key, '-99999') as user_partner_key,
           coalesce(nvl(upr.partner, ap.partner), 'N/A') as partner,
           qna_texts.question_name,
           qna_texts.question_translation_id,
           qna_texts.question_text,
           qna_texts.answer_text,
           qna_texts.question_type,
           sum(pra.response_count) as response_count,
           0 AS recommended_content_starts,
           0 AS personalized_playlists_created_count,
           0 AS recommended_content_completions,
           0 as content_recommended_in_pp_count,
           'N/A' as content_title,
           '-99999' as lob_rls_id,
           ut.team_id as team_id,
           dates.date as "date",
           (tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name,
           tal.user_uuid as team_manager_uuid
    FROM ods.fact_atwork_program_response_activity pra
    join ods_static_data.dim_dates as dates
        on dates.date_key = pra.date_key
    join ods.dim_organizations as orgs
        on orgs.organization_key = pra.organization_key
    join ods.dim_evaluation_qna_texts qna_texts
        on qna_texts.evaluation_qna_key = pra.evaluation_qna_key
    join ods.dim_programs as programs
      on programs.program_key = pra.program_key
      and programs.sourcesystem_id = 3
    join ods.dim_diagnostics as diag
      on diag.diagnostic_key = pra.diagnostic_key
      and diag.sourcesystem_id = 3
    left join ods.dim_user_partner_responses as upr
      on upr.user_partner_key = pra.user_partner_key
    left join ods.dim_account_partners as ap
      on ap.account_partner_key = pra.account_partner_key
    left join reference_data.atwork_user_team_mappings ut
        on ut.user_id = upr.partner_user_id
    left join reporting_data.teams_admin_lookup tal on tal.team_uuid = ut.team_id
    WHERE  qna_texts.question_type <> 'Questions::MultipleResponse'
    AND  POSITION(',' IN qna_texts.evaluation_qna_key) < 1
    group by
      pra.date_key,
      pra.organization_key,
      orgs.organization_id,
      pra.program_key,
      programs.program_name,
      pra.diagnostic_key,
      diag.diagnostic_name,
      diag.diagnostic_evaluation_slug,
      pra.user_partner_key,
      upr.partner,
      qna_texts.question_name,
      qna_texts.question_translation_id,
      qna_texts.question_text,
      qna_texts.answer_text,
      qna_texts.question_type,
      ut.team_id,
      dates.date,
      ap.partner,
      tal.team_manager_last_name,
      tal.team_manager_first_name,
      tal.user_uuid
    ;

    insert into reporting_data.atwork_personalized_learning_activity_staging
    SELECT 'fact_atwork_personalized_playlists_activity' AS source_table,
           ppa.date_key::integer,
           ppa.organization_key,
           orgs.organization_id as org_uuid,
           ppa.program_key,
           programs.program_name,
           ppa.diagnostic_key AS diagnostic_key,
           diag.diagnostic_name,
           diag.diagnostic_evaluation_slug,
           ppa.content_key AS content_key,
           coalesce(ppa.user_partner_key, '-99999') as user_partner_key,
           coalesce(upr.partner, 'N/A') as partner,
           'N/A' AS question_name,
           '-99999' AS question_translation_id,
           'N/A' AS question_text,
           'N/A' AS answer_text,
           'N/A' AS question_type,
           sum(ppa.response_count) as response_count,
           sum(ppa.recommended_content_starts) as recommended_content_starts,
           sum(ppa.personalized_playlists_created_count) as personalized_playlists_created_count,
           sum(ppa.recommended_content_completions) as recommended_content_completions,
           sum(ppa.content_recommended_in_pp_count) as content_recommended_in_pp_count,
           coalesce(contents.content_title, 'N/A') as content_title,
           coalesce(contents.lob_rls_id, '-99999') as lob_rls_id,
           ut.team_id as team_id,
           dates.date as "date",
           (tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name,
           tal.user_uuid as team_manager_uuid
    FROM ods.fact_atwork_personalized_playlists_activity ppa
    join ods_static_data.dim_dates as dates
        on dates.date_key = ppa.date_key
    join ods.dim_organizations as orgs
        on orgs.organization_key = ppa.organization_key
    join ods.dim_programs as programs
      on programs.program_key = ppa.program_key
      and programs.sourcesystem_id = 3
    join ods.dim_diagnostics as diag
      on diag.diagnostic_key = ppa.diagnostic_key
      and diag.sourcesystem_id = 3
    left join ods.dim_user_partner_responses as upr
      on upr.user_partner_key = ppa.user_partner_key
    left join reference_data.atwork_user_team_mappings ut
      on ut.user_id = upr.partner_user_id
    left join ods.dim_contents contents
      on contents.content_key = ppa.content_key
    left join reporting_data.teams_admin_lookup tal on tal.team_uuid = ut.team_id
    group by
      ppa.date_key,
      ppa.organization_key,
      orgs.organization_id,
      ppa.program_key,
      programs.program_name,
      ppa.diagnostic_key,
      diag.diagnostic_name,
      diag.diagnostic_evaluation_slug,
      ppa.content_key,
      ppa.user_partner_key,
      upr.partner,
      contents.content_title,
      contents.lob_rls_id,
      ut.team_id,
      dates.date,
      tal.team_manager_last_name,
      tal.team_manager_first_name,
      tal.user_uuid
    ;

    alter table reporting_data.atwork_personalized_learning_activity rename to atwork_personalized_learning_activity_old;
    alter table reporting_data.atwork_personalized_learning_activity_staging rename to atwork_personalized_learning_activity;
    alter table reporting_data.atwork_personalized_learning_activity owner to datapipeline_app;

    grant all on reporting_data.atwork_personalized_learning_activity to group admin_group;
    grant select, insert, update, delete on reporting_data.atwork_personalized_learning_activity to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.atwork_personalized_learning_activity to group querywriters_selective_rw;
    grant select on reporting_data.atwork_personalized_learning_activity to group internalapps_ro;
    grant select on reporting_data.atwork_personalized_learning_activity to group internalapps_rw_rt;
    grant select on reporting_data.atwork_personalized_learning_activity to group querywriters_ro;
    grant select on reporting_data.atwork_personalized_learning_activity to group tableau_progress_report;

    drop table if exists reporting_data.atwork_personalized_learning_activity_old;

- step_type: sql-command
  depends_on: [wait-for-others-next-pipelines, wait-for-others-admini-pipelines, wait-for-ods-pipeline-1, teams-admin-lookup]
  input_node: []
  name: incentive-activities-program-user-qna-report-data
  command:
    drop table if exists reporting_data.incentive_activities_program_user_qna_report_data_staging;
    create table reporting_data.incentive_activities_program_user_qna_report_data_staging (
        incentive_start_date   date encode az64,
        incentive_end_date     date encode az64,
        incentive_activity_id  integer encode az64,
        learner_user_id        integer encode az64,
        organization_name      varchar(256) encode zstd,
        organization_uuid      varchar(256) encode zstd,
        program_name           varchar(256) encode zstd,
        diagnostic_name        varchar(256) encode zstd,
        playlist_name          varchar(256) encode zstd,
        incentive_title        varchar(64) encode zstd,
        learner_first_name     varchar(256) encode zstd,
        learner_last_name      varchar(256) encode zstd,
        qualified_on_date_time date encode az64,
        question_text          varchar(512) encode zstd,
        answer_text            varchar(256) encode zstd,
        team_uuid              varchar(36) encode zstd,
        team_manager_uuid      varchar(50) encode zstd,
        team_manager_name      varchar(200) encode zstd
    ) distkey(organization_name);

    insert into reporting_data.incentive_activities_program_user_qna_report_data_staging
      SELECT
        incentives.incentive_start_date                         AS incentive_start_date
        ,incentives.incentive_end_date                          AS incentive_end_date
        ,next_incentive_activities.id                           AS incentive_activity_id
        ,next_incentive_activities.user_id                      AS learner_user_id
        ,organizations.organization_name                        AS organization_name
        ,organizations.organization_uuid                        AS organization_uuid
        ,nvl(programs.program_name, 'N/A')                      AS program_name
        ,case when
            incentives.incentive_diagnostic_id is not null
          then diagnostic_translations.name
          else 'N/A'
        end as diagnostic_name
        ,case when
            incentives.incentive_diagnostic_id is not null
          then diagnostic_translations.name
          else playlist_translations.name
        end as playlist_name
        ,incentives.incentive_title                             AS incentive_title
        ,NVL(next_users.first_name, adminifi_users.first_name)  AS learner_first_name
        ,NVL(next_users.last_name, adminifi_users.last_name)    AS learner_last_name
        ,next_incentive_activities.completion                   AS qualified_on_date_time
        ,next_question_translations.question_text               AS question_text
        ,NVL(next_answer_translations.answer_text, json_extract_path_text(next_responses.data, 'free_text'), '') AS answer_text
        ,user_teams.team_id                                     AS team_uuid
        ,tal.user_uuid as team_manager_uuid
        ,(tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name
      FROM ods.dim_incentives AS incentives
      JOIN next_data.incentive_activities AS next_incentive_activities
        ON incentives.incentive_id = next_incentive_activities.incentive_id
        AND next_incentive_activities.status = 2 /* COMPLETED */
      JOIN next_data.users AS next_users
        ON next_incentive_activities.user_id = next_users.id
      JOIN ods.dim_organizations AS organizations
        ON incentives.organization_key = organizations.organization_key
      JOIN ods.dim_programs AS programs
        ON incentives.program_key = programs.program_key
      LEFT JOIN adminifi_data.users AS adminifi_users
        ON next_users.foundry_id = adminifi_users.uuid
      LEFT JOIN reference_data.atwork_user_team_mappings user_teams
        ON next_users.id = user_teams.user_id
      left join reporting_data.teams_admin_lookup tal on tal.team_uuid = user_teams.team_id
      LEFT JOIN next_data.responses AS next_responses
       ON next_users.id = next_responses.user_id
      LEFT JOIN next_data.question_translations AS next_question_translations
        ON next_responses.question_id = next_question_translations.question_id
        AND next_question_translations.locale  in ('en', 'en-US')
      LEFT JOIN next_data.answer_translations AS next_answer_translations
        ON next_responses.answer_id = next_answer_translations.answer_id
        AND next_answer_translations.locale  in ('en', 'en-US')
      LEFT JOIN next_data.diagnostic_translations as diagnostic_translations
        ON diagnostic_translations.diagnostic_id = incentives.incentive_diagnostic_id
        AND diagnostic_translations.locale in ('en', 'en-US')
      LEFT JOIN next_data.playlist_translations
          on playlist_translations.playlist_id = incentives.playlist_id
          and playlist_translations.locale='en'
      WHERE next_incentive_activities.completion IS NOT NULL
        AND next_incentive_activities.status = 2 /* COMPLETED */
    ;

    alter table reporting_data.incentive_activities_program_user_qna_report_data rename to incentive_activities_program_user_qna_report_data_old;
    alter table reporting_data.incentive_activities_program_user_qna_report_data_staging rename to incentive_activities_program_user_qna_report_data;
    alter table reporting_data.incentive_activities_program_user_qna_report_data owner to datapipeline_app;

    grant all on reporting_data.incentive_activities_program_user_qna_report_data to group admin_group;
    grant select, insert, update, delete on reporting_data.incentive_activities_program_user_qna_report_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.incentive_activities_program_user_qna_report_data to group querywriters_selective_rw;
    grant select on reporting_data.incentive_activities_program_user_qna_report_data to group internalapps_ro;
    grant select on reporting_data.incentive_activities_program_user_qna_report_data to group internalapps_rw_rt;
    grant select on reporting_data.incentive_activities_program_user_qna_report_data to group querywriters_ro;
    grant select on reporting_data.incentive_activities_program_user_qna_report_data to group tableau_progress_report;

    drop table if exists reporting_data.incentive_activities_program_user_qna_report_data_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, wait-for-others-pipelines, wait-for-others-content-service-pipelines]
  input_node: []
  name: denorm-drinker-category-data
  command:
    drop table if exists reporting_data.drinker_category_data_staging;
    create table if not exists reporting_data.drinker_category_data_staging (
      response_id                 integer encode az64,
      date_key                    integer encode az64,
      response_set_created_at     date encode az64,
      organization_name           varchar(255) encode zstd,
      organization_id             varchar(36) encode zstd,
      masked_user_id              varchar(36) encode zstd,
      evaluation_name             varchar(65535) encode zstd,
      evaluation_id               integer encode az64,
      evaluation_type             varchar(32)encode zstd,
      evaluation_labels           varchar(255) encode zstd,
      section_title               varchar(96) encode zstd,
      section_id                  integer encode az64,
      section_labels              varchar(255) encode zstd,
      content_name                varchar(255) encode zstd,
      content_id                  varchar(100) encode zstd,
      question_text               varchar(65535) encode zstd,
      question_id                 integer encode az64,
      question_type               varchar(255) encode zstd,
      question_slug               varchar(255) encode zstd,
      question_labels             varchar(255) encode zstd,
      student_engagement_question boolean encode zstd,
      response_type               varchar(42) encode zstd,
      answer_id                   integer encode az64,
      answer_text                 varchar(4000) encode zstd,
      response_set_count          bigint encode az64,
      is_scorm                    boolean encode zstd,
      lob_rls_id                  integer encode az64
    )
    distkey (response_id);

    drop table if exists temporal_responses;
    create temp table temporal_responses (
     id integer encode az64
     ,question_id integer encode az64
     ,answer_id bigint encode az64
     ,created_at timestamp encode az64
     ,response_set_id character varying(36) encode zstd
     ,calendar character varying(65535) encode zstd
    )
    distkey (response_set_id)
    sortkey (response_set_id,question_id, answer_id);

    drop table if exists questions;
    create temp table questions diststyle all as
      select
        id,slug
      from
        evalufi_data.questions
      where slug in ('AEC1_1', 'AEC1_3',
                     'AEC1_6', 'AEC1_7',
                     'AEC3_1', 'AEC3_3',
                     'AEC3_6', 'AEC3_7',
                     'GLE1_40', 'GLE1_1',
                     'GLE1_4', 'GLE1_5',
                     'GLE3_40', 'GLE3_1',
                     'GLE3_4', 'GLE3_5');

    drop table if exists responses;
    create temp table responses distkey(question_id) as (
     select
        res.id
       ,res.question_id
       ,case when answer_id is null and is_integer(value::variant) then value::integer else res.answer_id end as answer_id
       ,case when answer_id is null and public.isnumeric("value") then "value"::bigint else res.answer_id end as answer_id
       ,res.created_at
       ,res.response_set_id
       ,res.calendar
      from evalufi_data.responses as res
    );

    insert into temporal_responses
      select
        res.id
       ,res.question_id
       ,res.answer_id
       ,res.created_at
       ,res.response_set_id
       ,res.calendar
      from responses as res
      inner join questions as qes on res.question_id = qes.id;

    drop table if exists responses;

    drop table if exists evaluations;
    create temp table evaluations diststyle all as (
      select
        evaluation_id
      from ods.dim_evaluations
      where evaluation_slug in('san-he-2019-s1',
                              'alco-he-s1',
                              'aedu-he-2019-s1',
                              'san-he-s1-delete',
                              'aedu-he-s1',
                              'alco-he-2019-s1',
                              'aedu-he-2019-s1-refresh',
                              'aedu-he-2019-s3-refresh',
                              'alco-he-s3',
                              'aedu-he-s3',
                              'alco-he-2019-s3',
                              'san-he-s3-delete',
                              'san-he-2019-s3',
                              'aedu-he-2019-s3',
                              'gle-he-s1',
                              'gle-he-s3',
                              'gle-he-s1-v2',
                              'aedu-he-2019-s3-cloned-prod')
    );

    drop table if exists response_sets_temp;
    create temp table response_sets_temp distkey(evaluation_id) as (
      select
        id
        ,organization_id
        ,evaluation_id
        ,group_id
        ,created_at
        ,ods.f_lob_rls_finder(nvl(business_lines, '[]')) as lob_rls_id
      from evalufi_data.response_sets
    );

    drop table if exists response_sets;
    create temp table response_sets
    distkey (id)
    sortkey (id, organization_id, evaluation_id)
    as
      select
        response_sets_temp.id
        ,response_sets_temp.organization_id
        ,response_sets_temp.evaluation_id
        ,response_sets_temp.group_id
        ,response_sets_temp.created_at
        ,response_sets_temp.lob_rls_id
      from response_sets_temp
      inner join evaluations
        on evaluations.evaluation_id = response_sets_temp.evaluation_id;

    drop table if exists response_sets_temp;
    drop table if exists evaluations;

    drop table if exists progress_user_assignments;
    create temp table progress_user_assignments distkey(progress_id) as (
      select
        pua.progress_id
        ,a.business_line
        ,ua.user_id
      from content_service_data.progress_user_assignments pua
      left join content_service_data.user_assignments ua on pua.user_assignment_id = ua.id
      left join content_service_data.assignments a on ua.assignment_id = a.id
    );

    drop table if exists dc_response_data;
    create temp table dc_response_data
      distkey (organization_id)
      sortkey (organization_id ,organization_name ,business_line ,content_id ,content_name ,evaluation_id ,evaluation_name ,evaluation_type ,response_set_id ,response_set_created_at ,group_id ,user_id ,answer_text ,is_scorm)
       as (
          select
            rs.organization_id
            , o.name as organization_name
            , pua.business_line
            , rs.id as response_set_id
            , r.id as response_id
            , rs.group_id
            , pua.user_id
            , NVL(ct_p.name, ct_ce.name) as content_name
            , NVL(p.content_id,ce.content_id) as content_id
            , rs.evaluation_id
            , et.name as evaluation_name
            , e.type as evaluation_type
            , rs.created_at as response_set_created_at
            , r.question_id
            , q.slug
            , qt.text as question_text
            , r.answer_id
            , at.text as answer_text
            , false as is_scorm
            , rs.lob_rls_id
            , MAX(rc.value) as max_drinks
          from temporal_responses r
          left join response_sets rs on r.response_set_id = rs.id
          join questions q on r.question_id = q.id
          left join evalufi_data.question_translations qt on r.question_id = qt.question_id
            and qt.locale  in ('en', 'en-US')
          left join evalufi_data.answer_translations at on r.answer_id = at.answer_id
            and at.locale  in ('en', 'en-US')
          inner join ods.progress_json_extract j on rs.id = j.response_set_id
          inner join progress_user_assignments pua on j.id = pua.progress_id
          left join evalufi_data.responses_calendar rc on rs.id = rc.response_set_id
          left join adminifi_data.organizations o on rs.organization_id = o.uuid
          left join evalufi_data.evaluation_translations et on rs.evaluation_id = et.evaluation_id
            and et.locale  in ('en', 'en-US')
            and et.deleted_at is null
          left join evalufi_data.evaluations e on rs.evaluation_id = e.id
          left join content_service_data.progress p on pua.progress_id = p.id
          left join content_service_data.contents_evaluations ce
            on e.slug = ce.evaluation_value
          left join content_service_data.content_translations ct_p
            on p.content_id = ct_p.content_id and ct_p.locale  in ('en', 'en-US')
          left join content_service_data.content_translations ct_ce
            on ce.content_id = ct_ce.content_id and ct_ce.locale  in ('en', 'en-US')
          left join content_service_data.scorm_contexts sc
            on sc.progress_id = p.id and sc.archived is true
          where length(rs.organization_id) = 36
            and sc.progress_id is null
          group by
            rs.organization_id
            , o.name
            , pua.business_line
            , rs.id
            , r.id
            , rs.group_id
            , pua.user_id
            , content_name
            , NVL(p.content_id,ce.content_id)
            , rs.evaluation_id
            , et.name
            , e.type
            , rs.created_at
            , r.question_id
            , q.slug
            , qt.text
            , r.answer_id
            , at.text
            , rs.lob_rls_id
        );

        drop table if exists progress_user_assignments;

        insert into dc_response_data
          select
            o.organization_uuid as organization_id
            , o.organization_name as organization_name
            , null as business_line
            , rs.id as response_set_id
            , r.id as response_id
            , rs.group_id
            , users.uuid as user_id
            , NVL(ct_p.name, ct_ce.name) as content_name
            , NVL(p.content_id,ce.content_id) as content_id
            , rs.evaluation_id
            , et.name as evaluation_name
            , e.type as evaluation_type
            , rs.created_at as response_set_created_at
            , r.question_id
            , q.slug
            , qt.text as question_text
            , r.answer_id
            , at.text as answer_text
            , true as is_scorm
            , rs.lob_rls_id
            , MAX(rc.value) as max_drinks
          from temporal_responses r
          left join response_sets rs on r.response_set_id = rs.id
          join questions q on r.question_id = q.id
          left join evalufi_data.question_translations qt on r.question_id = qt.question_id
            and qt.locale  in ('en', 'en-US')
          left join evalufi_data.answer_translations at on r.answer_id = at.answer_id
            and at.locale  in ('en', 'en-US')
          left join ods.progress_json_extract j on rs.id = j.response_set_id
          inner join content_service_data.scorm_contexts pua on j.id = pua.progress_id
          left join evalufi_data.responses_calendar rc on rs.id = rc.response_set_id
          left join adminifi_data.users as users on users.uuid = pua.user_id
          left join ods.dim_organizations as o
            on o.organization_uuid = users.organization_uuid
          left join evalufi_data.evaluation_translations et on rs.evaluation_id = et.evaluation_id
            and et.locale  in ('en', 'en-US')
            and et.deleted_at is null
          left join evalufi_data.evaluations e on rs.evaluation_id = e.id
          left join content_service_data.progress p on pua.progress_id = p.id
          left join content_service_data.contents_evaluations ce on e.slug = ce.evaluation_value
          left join content_service_data.content_translations ct_p on p.content_id = ct_p.content_id
            and ct_p.locale  in ('en', 'en-US')
          left join content_service_data.content_translations ct_ce on ce.content_id = ct_ce.content_id
            and ct_ce.locale  in ('en', 'en-US')
          where length(o.organization_uuid) = 36
          group by
            o.organization_uuid
            , o.organization_name
            , rs.id
            , r.id
            , rs.group_id
            , users.uuid
            , content_name
            , NVL(p.content_id,ce.content_id)
            , rs.evaluation_id
            , et.name
            , e.type
            , rs.created_at
            , r.question_id
            , q.slug
            , qt.text
            , r.answer_id
            , at.text
            , rs.lob_rls_id
        ;

        drop table if exists temporal_responses;
        drop table if exists questions;
        drop table if exists response_sets;

        drop table if exists table_group;
        create temp table table_group
        distkey (organization_id)
        sortkey (organization_id ,organization_name ,content_id ,content_name ,business_line ,evaluation_id ,evaluation_name ,evaluation_type ,response_set_id ,response_set_created_at , group_id , user_id )
        as (
          select
            organization_id
            ,organization_name
            ,business_line
            ,content_id
            ,content_name
            ,evaluation_id
            ,evaluation_name
            ,evaluation_type
            ,response_set_id
            ,response_set_created_at
            ,group_id
            ,user_id
            ,CASE WHEN slug IN ('AEC1_1','AEC3_1','GLE1_40','GLE3_40') THEN dc_response_data.answer_text ELSE NULL END as Q1
            ,CASE WHEN slug IN ('AEC1_3','AEC3_3','GLE1_1','GLE3_1') THEN dc_response_data.answer_text ELSE NULL END as Q3
            ,CASE WHEN slug IN ('AEC1_6','AEC3_6','GLE1_4','GLE3_4') THEN dc_response_data.answer_text ELSE NULL END as Q6
            ,CASE WHEN slug IN ('AEC1_7','AEC3_7','GLE1_5','GLE3_5') THEN dc_response_data.max_drinks ELSE NULL END AS Q7
            ,is_scorm
            ,lob_rls_id
          from
            dc_response_data
          group by
            organization_id
            ,organization_name
            ,business_line
            ,content_id
            ,content_name
            ,evaluation_id
            ,evaluation_name
            ,evaluation_type
            ,response_set_id
            ,response_set_created_at
            ,group_id
            ,user_id
            ,CASE WHEN slug IN ('AEC1_1','AEC3_1','GLE1_40','GLE3_40') THEN dc_response_data.answer_text ELSE NULL END
            ,CASE WHEN slug IN ('AEC1_3','AEC3_3','GLE1_1','GLE3_1') THEN dc_response_data.answer_text ELSE NULL END
            ,CASE WHEN slug IN ('AEC1_6','AEC3_6','GLE1_4','GLE3_4') THEN dc_response_data.answer_text ELSE NULL END
            ,CASE WHEN slug IN ('AEC1_7','AEC3_7','GLE1_5','GLE3_5') THEN dc_response_data.max_drinks ELSE NULL END
            ,is_scorm
            ,lob_rls_id
         );

        drop table if exists dc_response_data;

        drop table if exists table_cons_resp_single_row;
        create temp table table_cons_resp_single_row
        distkey(organization_id)
        as (
          select
            organization_id
            ,organization_name
            ,content_id
            ,content_name
            ,business_line
            ,evaluation_id
            ,evaluation_name
            ,evaluation_type
            ,response_set_id
            ,response_set_created_at
            ,group_id
            ,user_id
            ,MAX(Q1) as Q1
            ,MAX(Q3) as Q3
            ,MAX(Q6) as Q6
            ,MAX(Q7) AS Q7
            ,is_scorm
            ,lob_rls_id
          from
            table_group
          group by
            organization_id
            ,organization_name
            ,content_id
            ,content_name
            ,business_line
            ,evaluation_id
            ,evaluation_name
            ,evaluation_type
            ,response_set_id
            ,response_set_created_at
            ,group_id
            ,user_id
            ,is_scorm
            ,lob_rls_id
        );
        drop table if exists table_group;

        drop table if exists drinker_category_data_temp;
        create temp table drinker_category_data_temp as (
          select
            NULL::int as response_id
            ,response_set_created_at
            ,organization_name
            ,organization_id
            ,MD5(user_id) as masked_user_id
            ,evaluation_name
            ,evaluation_id
            ,evaluation_type
            ,NULL as evaluation_labels
            ,'Drinker Categories' as section_title
            ,0 as section_id
            ,NULL as section_labels
            ,content_name
            ,content_id
            ,'Drinker Category' as question_text
            ,0 as question_id
            ,NULL as question_type
            ,NULL as question_slug
            ,NULL as question_labels
            ,NULL::boolean as student_engagement_question
            ,NULL as response_type
            ,NULL::int as answer_id
            ,case when q3 = 'No' then 'Abstainer'
              when q3 = 'Yes' and q6 = 'No' then 'Nondrinker'
              when q3 = 'Yes' and q6 = 'Yes' and q1 = 'Male' and q7 < 5 and q7 <> 0 then 'Moderate Drinker'
              when q3 = 'Yes' and q6 = 'Yes' and q1 = 'Female' and q7 < 4 and q7 <> 0 then 'Moderate Drinker'
              when q3 = 'Yes' and q6 = 'Yes' and q1 = 'Male' and q7 > 4 and q7 < 10 then 'Heavy Episodic Drinker'
              when q3 = 'Yes' and q6 = 'Yes' and q1 = 'Female' and q7 > 3 and q7 < 8 then 'Heavy Episodic Drinker'
              when q3 = 'Yes' and q6 = 'Yes' and q1 = 'Male' and q7 > 9 then 'Problematic Drinker'
              when q3 = 'Yes' and q6 = 'Yes' and q1 = 'Female' and q7 > 7 then 'Problematic Drinker'
              when q6 = 'Yes' and q7 = 0 then 'Nondrinker'
              when q3 = 'Yes' and q6 = 'Yes' and (q7 is null or q7 > 40) then 'Unknown'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Female' AND q7 = 0 THEN 'Nondrinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Female' AND q7 > 0 AND q7 < 4 THEN 'Moderate Drinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Female' AND q7 > 3 AND q7 < 8 THEN 'Heavy Episodic Drinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Female' AND q7 > 7 AND q7 < 41 THEN 'Problematic Drinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Female' AND q7 IS NULL THEN 'Unknown'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Male' AND q7 = 0 THEN 'Nondrinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Male' AND q7 > 0 AND q7 < 5 THEN 'Moderate Drinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Male' AND q7 > 4 AND q7 < 10 THEN 'Heavy Episodic Drinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Male' AND q7 > 9 AND q7 < 41 THEN 'Problematic Drinker'
              when q3 = 'Yes' AND q6 IS NULL and q1 = 'Male' AND (q7 IS NULL OR q7 > 40) THEN 'Unknown'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Female' AND q7 = 0 THEN 'Nondrinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Female' AND q7 > 0 AND q7 < 4 THEN 'Moderate Drinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Female' AND q7 > 3 AND q7 < 8 THEN 'Heavy Episodic Drinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Female' AND q7 > 7 AND q7 < 41 THEN 'Problematic Drinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Female' AND q7 IS NULL THEN 'Unknown'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Male' AND q7 = 0 THEN 'Nondrinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Male' AND q7 > 0 AND q7 < 5 THEN 'Moderate Drinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Male' AND q7 > 4 AND q7 < 10 THEN 'Heavy Episodic Drinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Male' AND q7 > 9 AND q7 < 41 THEN 'Problematic Drinker'
              WHEN q3 IS NULL and q6 = 'Yes' and q1 = 'Male' AND (q7 IS NULL OR q7 > 40) THEN 'Unknown'
              when q3 is null and q6 = 'No' then 'Nondrinker'
              when q3 is null and q6 is null and q1 = 'Male' and q7 = 0 then 'Nondrinker'
              when q3 is null and q6 is null and q1 = 'Female' and q7 = 0 then 'Nondrinker'
              when q3 is null and q6 is null and q1 is null and q7 = 0 then 'Nondrinker'
              when q3 is null and q6 is null and q1 = 'Male' and q7 > 0 and q7 < 5 then 'Moderate Drinker'
              when q3 is null and q6 is null and q1 = 'Male' and q7 > 4 and q7 < 10 then 'Heavy Episodic Drinker'
              when q3 is null and q6 is null and q1 = 'Male' and q7 > 9 and q7 < 41 then 'Problematic Drinker'
              when q3 is null and q6 is null and q1 = 'Female' and q7 > 0 and q7 < 4 then 'Moderate Drinker'
              when q3 is null and q6 is null and q1 = 'Female' and q7 > 3 and q7 < 8 then 'Heavy Episodic Drinker'
              when q3 is null and q6 is null and q1 = 'Female' and q7 > 7 and q7 < 41 then 'Problematic Drinker'
              when q3 is null and q6 is null and (q1 is null or q1 not in ('Male','Female')) and q7 > 0 and q7 < 4 then 'Moderate Drinker'
              when q3 is null and q6 is null and (q1 is null or q1 not in ('Male','Female')) and q7 > 4 and q7 < 8 then 'Heavy Episodic Drinker'
              when q3 is null and q6 is null and (q1 is null or q1 not in ('Male','Female')) and q7 > 9 and q7 < 41 then 'Problematic Drinker'
              when (q3 is null or q3 = 'Yes') and (q6 is null or q6 = 'Yes') and (q1 is null or q1 not in ('Male','Female')) and q7 in (4,8,9) then 'Unknown'
              when (q3 is null or q3 = 'Yes') and (q6 is null or q6 = 'Yes') and (q1 is null or q1 not in ('Male','Female')) AND q7 = 0 THEN 'Nondrinker'
              when (q3 is null or q3 = 'Yes') and (q6 is null or q6 = 'Yes') and (q1 is null or q1 not in ('Male','Female')) AND q7 > 0 AND q7 < 4 THEN 'Moderate Drinker'
              when (q3 is null or q3 = 'Yes') and (q6 is null or q6 = 'Yes') and (q1 is null or q1 not in ('Male','Female')) AND q7 > 4 AND q7 < 8 THEN 'Heavy Episodic Drinker'
              when (q3 is null or q3 = 'Yes') and (q6 is null or q6 = 'Yes') and (q1 is null or q1 not in ('Male','Female')) AND q7 > 9 AND q7 < 41 THEN 'Problematic Drinker'
              when q3 is null and q6 is null and (q7 is null OR q7 > 40) then 'Unknown'
              else 'Unknown'
            end as answer_text
            ,0 as response_set_count
            ,is_scorm
            ,lob_rls_id
          from
            table_cons_resp_single_row
        );

      insert into reporting_data.drinker_category_data_staging
      select
        response_id
        ,d.date_key
        ,d.date
        ,organization_name
        ,organization_id
        ,masked_user_id
        ,evaluation_name
        ,evaluation_id
        ,evaluation_type
        ,evaluation_labels
        ,section_title
        ,section_id
        ,section_labels
        ,content_name
        ,content_id
        ,question_text
        ,question_id
        ,question_type
        ,question_slug
        ,question_labels
        ,student_engagement_question
        ,response_type
        ,answer_id
        ,answer_text
        ,1 as response_set_count /* As per Kevin's request in DP-3474 */
        ,is_scorm
        ,lob_rls_id
      from
        drinker_category_data_temp
        left join ods_static_data.dim_dates d
          on d.date = drinker_category_data_temp.response_set_created_at::Date;

      drop table if exists table_cons_resp_single_row;
      drop table if exists drinker_category_data_temp;

    alter table reporting_data.drinker_category_data rename to drinker_category_data_old;
    alter table reporting_data.drinker_category_data_staging rename to drinker_category_data;
    alter table reporting_data.drinker_category_data owner to datapipeline_app;

    grant all on table reporting_data.drinker_category_data to group admin_group;
    grant references,trigger on table reporting_data.drinker_category_data to datapipeline_app;
    grant select,insert,delete,update on table reporting_data.drinker_category_data to datapipeline_app with grant option;
    grant select,insert,delete,update on table reporting_data.drinker_category_data to group internalapps_rw;
    grant select on table reporting_data.drinker_category_data to group internalapps_ro;
    grant select on table reporting_data.drinker_category_data to group internalapps_rw_rt;
    grant select on table reporting_data.drinker_category_data to group querywriters_ro;
    grant select on table reporting_data.drinker_category_data to group tableau_progress_report;

    drop table if exists reporting_data.drinker_category_data_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: atwork-program-poll-response-activity-report-data
  command:
    drop table if exists reporting_data.atwork_program_poll_response_activity_report_data_staging;
    create table reporting_data.atwork_program_poll_response_activity_report_data_staging (
      activity_date       date encode az64,
      organization_uuid   varchar(256) encode zstd,
      organization_name   varchar(256) encode zstd,
      organization_isdemo boolean encode zstd,
      program_name        varchar(256) encode zstd,
      program_type        varchar(256) encode zstd,
      content_title       varchar(256) encode zstd,
      content_isactive    boolean encode zstd,
      content_type        varchar(256) encode zstd,
      poll_question_text  varchar(256) encode zstd,
      poll_answer_text    varchar(256) encode zstd,
      evaluation_type     varchar(16) encode zstd,
      section_title       varchar(128) encode zstd,
      section_description varchar(2000) encode zstd,
      team_id             varchar(256) encode zstd,
      team_manager_uuid   varchar(36) encode zstd,
      team_manager_name   varchar(210) encode zstd,
      answer_count        bigint encode az64
    ) distkey(organization_uuid);

    insert into reporting_data.atwork_program_poll_response_activity_report_data_staging
      select
        d.date as activity_date
        ,orgs.organization_uuid
        ,orgs.organization_name
        ,nvl(orgs.organization_isdemo, false) as organization_isdemo
        ,nvl(programs.program_name, 'N/A') as program_name
        ,programs.program_type
        ,nvl(contents.content_title, hr_activity_translations.title, 'N/A') as content_title
        ,contents.content_isactive
        ,contents.content_type
        ,polls.poll_question_text
        ,polls.poll_answer_text
        ,polls.evaluation_type
        ,polls.section_title
        ,polls.section_description
        ,fact.team_id
        ,tal.user_uuid as team_manager_uuid
        ,(tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name
        ,fact.answer_count
      from ods.fact_atwork_program_poll_response_activity fact
      join ods_static_data.dim_dates d
        on fact.date_key = d.date_key
      join ods.dim_organizations orgs
        on fact.organization_key = orgs.organization_key
      left join ods.dim_programs programs
        on fact.program_key = programs.program_key
      left join ods.dim_contents contents
        on fact.content_key = contents.content_key
      left join ods.dim_polls polls
        on fact.poll_key = polls.poll_key
        and fact.user_response = polls.poll_response_choice
        and isnull(polls.poll_content_key, '') = isnull(contents.content_key, '')
      left join awayplace_data.activity_translations as hr_activity_translations
        on polls.poll_activity_id = hr_activity_translations.activity_id::varchar
       and hr_activity_translations.locale  in ('en', 'en-US')
      left join reporting_data.teams_admin_lookup tal on tal.team_uuid = fact.team_id
    ;

    alter table reporting_data.atwork_program_poll_response_activity_report_data rename to atwork_program_poll_response_activity_report_data_old;
    alter table reporting_data.atwork_program_poll_response_activity_report_data_staging rename to atwork_program_poll_response_activity_report_data;
    alter table reporting_data.atwork_program_poll_response_activity_report_data owner to datapipeline_app;

    grant all on reporting_data.atwork_program_poll_response_activity_report_data to group admin_group;
    grant select, insert, update, delete on reporting_data.atwork_program_poll_response_activity_report_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.atwork_program_poll_response_activity_report_data to group querywriters_selective_rw;
    grant select on reporting_data.atwork_program_poll_response_activity_report_data to group internalapps_ro;
    grant select on reporting_data.atwork_program_poll_response_activity_report_data to group internalapps_rw_rt;
    grant select on reporting_data.atwork_program_poll_response_activity_report_data to group querywriters_ro;
    grant select on reporting_data.atwork_program_poll_response_activity_report_data to group tableau_progress_report;

    drop table if exists reporting_data.atwork_program_poll_response_activity_report_data_old;


- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: atwork-activity-elective-learning-report-data
  command:
     drop table if exists reporting_data.atwork_activity_a_table_report_data_staging;
     create table reporting_data.atwork_activity_a_table_report_data_staging (
       org_uuid                    varchar(100) encode zstd,
       organization_name           varchar(256) encode zstd,
       program_name                varchar(255) encode zstd,
       partner                     varchar(2048) encode zstd,
       activity_date               date encode az64,
       content_title               varchar(256) encode zstd,
       team_uuid                   varchar(36) encode zstd,
       team_manager_name           varchar(256) encode zstd,
       guest_users                 boolean encode zstd,
       activity_starts             bigint encode az64,
       activity_completions        bigint encode az64,
       program_users_created       bigint encode az64,
       incentive_qualifications    bigint encode az64
       )distkey(org_uuid)
        sortkey(org_uuid);


     insert into reporting_data.atwork_activity_a_table_report_data_staging
     select
       org.organization_id as org_uuid,
       org.organization_name as organization_name,
       prog.program_name as program_name,
       upr.partner as partner,
       date.date as activity_date,
       contents.content_title,
       faca.team_uuid,
       admins.team_manager_last_name || ', ' || admins.team_manager_first_name as team_manager_name,
       faca.guest_users,
       faca.starts as activity_starts,
       faca.completed as activitiy_completion,
       null as program_users_created,
       null as incentive_qualifications
     from
       ods.fact_atwork_content_activities as faca
       inner join ods.dim_organizations as org
         on org.organization_key = faca.organization_key
       inner join ods.dim_programs as prog
         on prog.program_key = faca.program_key
         and prog.organization_key = faca.organization_key
       left join ods.dim_user_partner_responses as upr
         on upr.user_partner_key = faca.user_partner_key
       inner join ods_static_data.dim_dates as date
         on date.date_key = faca.date_key
       inner join ods.dim_contents as contents
         on contents.content_key = faca.content_key
       left join reporting_data.teams_admin_lookup admins
         on admins.team_uuid = faca.team_uuid
         and admins.organization_uuid = org.organization_id;

     insert into reporting_data.atwork_activity_a_table_report_data_staging
     select
       org.organization_id as org_uuid,
       org.organization_name as organization_name,
       prog.program_name as program_name,
       upr.partner as partner,
       date.date as activity_date,
       'N/A' as content_title,
       fapua.team_uuid,
       admins.team_manager_last_name || ', ' || admins.team_manager_first_name as team_manager_name,
       fapua.guest_users,
       null as activity_starts,
       null as activitiy_completion,
       fapua.program_registrations as program_users_created,
       null as incentive_qualifications
     from
       ods.fact_atwork_program_and_users_activity as fapua
       inner join ods.dim_organizations as org
         on org.organization_key = fapua.organization_key
       left join ods.dim_programs as prog
         on prog.program_key = fapua.program_key
         and prog.organization_key = fapua.organization_key
       left join ods.dim_user_partner_responses as upr
         on upr.user_partner_key = fapua.user_partner_key
       inner join ods_static_data.dim_dates as date
         on date.date_key = fapua.date_key
       left join reporting_data.teams_admin_lookup admins
         on admins.team_uuid = fapua.team_uuid
         and admins.organization_uuid = org.organization_id;

     insert into reporting_data.atwork_activity_a_table_report_data_staging
     select
       org.organization_id as org_uuid,
       org.organization_name as organization_name,
       prog.program_name as program_name,
       upr.partner as partner,
       date.date as activity_date,
       'N/A' as content_title,
       fapia.team_uuid,
       admins.team_manager_last_name || ', ' || admins.team_manager_first_name as team_manager_name,
       fapia.guest_users,
       null as activity_starts,
       null as activitiy_completion,
       null as program_users_created,
       fapia.incentive_qualifications as incentive_qualifications
     from
       ods.fact_atwork_program_incentive_activities as fapia
       inner join ods.dim_organizations as org
         on org.organization_key = fapia.organization_key
       inner join ods.dim_programs as prog
         on prog.program_key = fapia.program_key
         and prog.organization_key = fapia.organization_key
       left join ods.dim_user_partner_responses as upr
         on upr.user_partner_key = fapia.user_partner_key
       inner join ods_static_data.dim_dates as date
         on date.date_key = fapia.date_key
       left join reporting_data.teams_admin_lookup admins
         on admins.team_uuid = fapia.team_uuid
         and admins.organization_uuid = org.organization_id;


     alter table reporting_data.atwork_activity_a_table_report_data rename to atwork_activity_a_table_report_data_old;
     alter table reporting_data.atwork_activity_a_table_report_data_staging rename to atwork_activity_a_table_report_data;
     alter table reporting_data.atwork_activity_a_table_report_data owner to datapipeline_app;

     grant all on table reporting_data.atwork_activity_a_table_report_data to group admin_group;
     grant references,trigger on table reporting_data.atwork_activity_a_table_report_data to datapipeline_app;
     grant select,insert,delete,update on table reporting_data.atwork_activity_a_table_report_data to datapipeline_app with grant option;
     grant select,insert,delete,update on table reporting_data.atwork_activity_a_table_report_data to group internalapps_rw;
     grant select on table reporting_data.atwork_activity_a_table_report_data to group internalapps_ro;
     grant select on table reporting_data.atwork_activity_a_table_report_data to group internalapps_rw_rt;
     grant select on table reporting_data.atwork_activity_a_table_report_data to group querywriters_ro;
     grant select on table reporting_data.atwork_activity_a_table_report_data to group tableau_progress_report;

     drop table if exists reporting_data.atwork_activity_a_table_report_data_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1]
  input_node: []
  name: notification-activity
  command:
    drop table if exists notification_logs;
    create temp table notification_logs as (
      SELECT
        application_id
        ,notification_log.message_id                                          AS message_id
        ,notification_log.user_id                                             AS user_id
        ,notification_log.email_address                                       AS email_address
        ,message_template.name                                                AS message_template_name
        ,message_template2.name                                               AS parent_template_name
        ,CASE
          ELSE 'N/A'
         END                                                                  AS message_purpose
        ,notification_log.message_event_type                                  AS message_event_type
        ,dateadd(second, notification_log.created_at, '1970-01-01 00:00:00')  AS notification_event_created_at
      FROM ods.foundry_events_messages_ SOURCE_DB_ENV _quick_access AS notification_log
      LEFT JOIN notifi_data.content_records AS message_template
        ON notification_log.message_template_id = message_template.id
      LEFT JOIN notifi_data.content_records AS message_template2
        ON message_template.parent_id = message_template2.id
      WHERE notification_log.application_id IN (2,6)
        AND notification_log.message_medium = 'email'
    );

    drop table if exists reporting_data.notification_activity_staging;
    create table reporting_data.notification_activity_staging (
      user_id                       varchar(36)  encode zstd,
      organization_uuid             varchar(256) encode zstd,
      organization_name             varchar(256) encode zstd,
      application_id                varchar(1)   encode zstd,
      message_id                    varchar(100) encode zstd,
      notification_email_address    varchar(256) encode zstd,
      message_template_name         varchar(100) encode zstd,
      parent_template_name          varchar(100) encode zstd,
      message_purpose               varchar(16)  encode zstd,
      message_event_type            varchar(100) encode zstd,
      notification_event_created_at timestamp    encode az64,
      bounced_user                  boolean      encode zstd,
      unsubscribe_lists_email       varchar(256) encode zstd,
      unsubscribe_lists_created_at  timestamp    encode az64,
      suppression_lists_email       varchar(256) encode zstd,
      suppression_lists_name        varchar(100) encode zstd,
      suppression_lists_description varchar(256) encode zstd,
      email_address                 varchar(512) encode zstd,
      lob_rls_id                    int encode az64
    ) distkey(user_id);

    insert into reporting_data.notification_activity_staging
      select
        users.id                          as user_id
        ,organizations.organization_uuid
        ,organizations.organization_name
        ,logs.application_id
        ,logs.message_id
        ,logs.email_address               as notification_email_address
        ,logs.message_template_name
        ,logs.parent_template_name
        ,logs.message_purpose
        ,logs.message_event_type
        ,logs.notification_event_created_at
        ,users.bounced_email              as bounced_user
        ,lists.email                      as unsubscribe_lists_email
        ,lists.created_at                 as unsubscribe_lists_created_at
        ,emails.email                     as suppression_lists_email
        ,translations.name                as suppression_lists_name
        ,translations.description         as suppression_lists_description
        ,nvl(emails.email, lists.email, logs.email_address, users.email) as email_address
        ,ods.f_lob_rls_finder(users.business_lines) as lob_rls_id
      from adminifi_data.users as users
      inner join ods.dim_organizations as organizations
        on users.organization_uuid = organizations.organization_uuid
      left join notification_logs as logs
        on users.uuid = logs.user_id
      left join notifi_data.global_unsubscribe_lists as lists
        on users.email = lists.email
      left join notifi_data.suppression_list_emails as emails
        on users.email = emails.email
      left join notifi_data.suppression_list_translations as translations
        on emails.suppression_list_id = translations.suppression_list_id
    ;

    drop table if exists notification_logs;

    alter table reporting_data.notification_activity rename to notification_activity_old;
    alter table reporting_data.notification_activity_staging rename to notification_activity;
    alter table reporting_data.notification_activity owner to datapipeline_app;

    grant all on reporting_data.notification_activity to group admin_group;
    grant select, insert, update, delete on reporting_data.notification_activity to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.notification_activity to group querywriters_selective_rw;
    grant select on reporting_data.notification_activity to group internalapps_ro;
    grant select on reporting_data.notification_activity to group internalapps_rw_rt;
    grant select on reporting_data.notification_activity to group querywriters_ro;
    grant select on reporting_data.notification_activity to group tableau_progress_report;

    drop table if exists reporting_data.notification_activity_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2]
  input_node: []
  name: fact-benchmark-activity-denorm-awayplace
  command:

    drop table if exists need_to_refresh;
    create temp table need_to_refresh as (
      select case when count(1) > 0 then 1 else 0 end new_records
      from ods.fact_evaluations_activity_awayplace fact_eval
      where
        fact_eval.date_key > (select max(date_key) from reference_data.fact_benchmark_activity_denorm_awayplace_max_date)
        and fact_eval.date_key < to_char(current_date, 'YYYYMMDD')::int  /* filter current_date */
    );

    insert into reference_data.fact_benchmark_activity_denorm_awayplace_historical
    select
      fact_eval.organization_key
      , fact_eval.training_period_key
      , fact_eval.evaluation_key
      , fact_eval.section_key
      , fact_eval.evaluation_qna_key
      , fact_eval.question_id
      , fact_eval.content_key
      , fact_eval.cohort_id
      , fact_eval.school_id
      , fact_eval.answer_text
      , sum(answer_count) as answer_count
    from
      ods.fact_evaluations_activity_awayplace fact_eval
    where 1 = (select new_records from need_to_refresh)
      and fact_eval.date_key > (select max(date_key) from reference_data.fact_benchmark_activity_denorm_awayplace_max_date)
      and fact_eval.date_key < to_char(current_date, 'YYYYMMDD')::int  /* filter current_date */
    group by
      fact_eval.organization_key
      , fact_eval.training_period_key
      , fact_eval.evaluation_key
      , fact_eval.section_key
      , fact_eval.evaluation_qna_key
      , fact_eval.question_id
      , fact_eval.content_key
      , fact_eval.cohort_id
      , fact_eval.school_id
      , fact_eval.answer_text;

    drop table if exists fact_benchmark_activity_denorm_awayplace_historical_group;
    create temp table fact_benchmark_activity_denorm_awayplace_historical_group
    (
      denorm_awayplace_key                      varchar(600) encode zstd
      ,organization_key                         varchar(120) encode zstd
      ,training_period_key                      varchar(50) encode zstd
      ,evaluation_key                           varchar(50) encode zstd
      ,section_key                              varchar(50) encode zstd
      ,evaluation_qna_key                       varchar(600) encode zstd
      ,question_id                              bigint encode az64
      ,content_key                              varchar(100) encode zstd
      ,cohort_id                                varchar(255) encode zstd
      ,cohort_name                              varchar(255) encode zstd
      ,school_id                                int encode az64
      ,answer_text                              varchar(3000) encode zstd
      ,answer_count                             bigint encode az64
    )distkey(evaluation_qna_key)
    sortkey(training_period_key, evaluation_key, section_key, evaluation_qna_key);

    insert into fact_benchmark_activity_denorm_awayplace_historical_group
    select
      (fact_eval.training_period_key || '-' ||  fact_eval.evaluation_key || '-' || nvl(fact_eval.question_id, '0') || '-' ||  fact_eval.section_key || '-' ||  fact_eval.content_key) as denorm_awayplace_key
      , fact_eval.organization_key
      , fact_eval.training_period_key
      , fact_eval.evaluation_key
      , fact_eval.section_key
      , fact_eval.evaluation_qna_key
      , fact_eval.question_id
      , fact_eval.content_key
      , fact_eval.cohort_id
      , c.name as cohort_name
      , fact_eval.school_id
      , fact_eval.answer_text
      , sum(answer_count) as answer_count
    from
      reference_data.fact_benchmark_activity_denorm_awayplace_historical fact_eval
      inner join awayplace_data.cohorts c on c.id = fact_eval.cohort_id
    where 1 = (select new_records from need_to_refresh)
    group by
      fact_eval.organization_key
      , fact_eval.training_period_key
      , fact_eval.evaluation_key
      , fact_eval.section_key
      , fact_eval.evaluation_qna_key
      , fact_eval.question_id
      , fact_eval.content_key
      , fact_eval.cohort_id
      , c.name
      , fact_eval.school_id
      , fact_eval.answer_text;

    drop table if exists question_org_count;
    create temp table question_org_count
    as (
      select
        sb.title as benchmark_key,
        sb.title as benchmark_value,
        org.evaluation_key,
        org.section_key,
        org.content_key,
        org.question_id,
        org.training_period_key,
        count(distinct org.organization_key) as org_count,
        sum(answer_count) as total_answer_count
      from
        fact_benchmark_activity_denorm_awayplace_historical_group org
        join awayplace_data.benchmark_schools bs on org.school_id = bs.school_id
        join awayplace_data.school_benchmarks sb on bs.school_benchmark_id = sb.id
      where 1 = (select new_records from need_to_refresh)
        and org.answer_count > 0
      group by
        sb.title,
        org.evaluation_key,
        org.section_key,
        org.content_key,
        org.question_id,
        org.training_period_key
     );

    drop table if exists question_org_percent;
    create temp table question_org_percent
    as (
      select
        sb.title as benchmark_key,
        sb.title as benchmark_value,
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        t.training_period_key,
        q.org_count,
        round((CAST(sum(t.answer_count) AS NUMERIC(10,4)) / CAST(max(total_answer_count) AS NUMERIC(20,4))) * 100) as answer_count_percent_by_org
      from
        fact_benchmark_activity_denorm_awayplace_historical_group t
        join awayplace_data.benchmark_schools bs on t.school_id = bs.school_id
        join awayplace_data.school_benchmarks sb on bs.school_benchmark_id = sb.id
        join question_org_count q
          on t.evaluation_key = q.evaluation_key
          and t.section_key = q.section_key
          and t.question_id = q.question_id
          and t.content_key = q.content_key
          and sb.title = q.benchmark_key
          and sb.title = q.benchmark_value
          and t.training_period_key = q.training_period_key
      where 1 = (select new_records from need_to_refresh)
      group by
        sb.title,
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        t.training_period_key,
        q.org_count
    );
    drop table if exists question_org_count;

    drop table if exists max_percentage_by_question;
    create temp table max_percentage_by_question distkey(row_unique_key)
    as (
    select
      (training_period_key || '-' || benchmark_key || '-' ||  evaluation_key || '-' ||  section_key || '-' ||   content_key) as row_unique_key,
      benchmark_key,
      benchmark_value,
      evaluation_key,
      section_key,
      content_key,
      training_period_key,
      question_id,
      org_count,
      max(answer_count_percent_by_org) as answer_count_percent_by_question
    from question_org_percent
    where 1 = (select new_records from need_to_refresh)
    group by
      benchmark_key,
      benchmark_value,
      evaluation_key,
      section_key,
      content_key,
      training_period_key,
      question_id,
      org_count
    );
    drop table if exists question_org_percent;

    /* For National Average Metrics */
    drop table if exists question_org_count_for_national_average;
    create temp table question_org_count_for_national_average
    as (
      select
        evaluation_key,
        section_key,
        content_key,
        training_period_key,
        question_id,
        count(distinct organization_key) as org_count,
        sum(answer_count) as total_answer_count
      from
        fact_benchmark_activity_denorm_awayplace_historical_group
      where 1 = (select new_records from need_to_refresh)
        and answer_count > 0
      group by
        evaluation_key,
        section_key,
        content_key,
        training_period_key,
        question_id
     );

    drop table if exists question_org_percent_for_national_average;
    create temp table question_org_percent_for_national_average
    as (
      select
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        t.training_period_key,
        q.org_count,
        round((CAST(sum(t.answer_count) AS NUMERIC(10,4)) / CAST(max(total_answer_count) AS NUMERIC(20,4))) * 100) as answer_count_percent_by_org
      from
        fact_benchmark_activity_denorm_awayplace_historical_group t
        join question_org_count_for_national_average q
          on t.evaluation_key = q.evaluation_key
          and t.section_key = q.section_key
          and t.question_id = q.question_id
          and t.content_key = q.content_key
          and t.training_period_key = q.training_period_key
      where 1 = (select new_records from need_to_refresh)
      group by
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        t.training_period_key,
        q.org_count
     );
    drop table if exists question_org_count_for_national_average;

    drop table if exists max_percentage_by_question_for_national_average;
    create temp table max_percentage_by_question_for_national_average distkey(row_unique_key)
     as (
      select
        (training_period_key || '-' ||  evaluation_key || '-' || nvl(question_id, '0') || '-' ||  section_key || '-' ||   content_key) as row_unique_key,
        evaluation_key,
        section_key,
        content_key,
        training_period_key,
        question_id,
        org_count,
        max(answer_count_percent_by_org) as answer_count_percent_by_question
      from question_org_percent_for_national_average
      where 1 = (select new_records from need_to_refresh)
      group by
        evaluation_key,
        section_key,
        content_key,
        training_period_key,
        question_id,
        org_count
     );

    drop table if exists question_org_percent_for_national_average;

    /* All activities with benchmark_key = null at the beginning */
    drop table if exists evaluation_benchmark_activity_1;
    create temp table evaluation_benchmark_activity_1 distkey(evaluation_qna_key)
    as (
      select
        organization_key
        ,content_key
        ,evaluation_key
        ,section_key
        ,evaluation_qna_key
        ,training_period_key
        ,null as benchmark_key
        ,null as benchmark_value
        ,sum(answer_count) as benchmark_value_count
      from fact_benchmark_activity_denorm_awayplace_historical_group
      where 1 = (select new_records from need_to_refresh)
      group by
        organization_key
        ,content_key
        ,evaluation_key
        ,section_key
        ,evaluation_qna_key
        ,training_period_key
    );

    /* 'National Average' category applied to all activities */
    drop table if exists evaluation_benchmark_activity_2;
    create temp table evaluation_benchmark_activity_2 distkey(evaluation_qna_key)
    as (
      select
        content_key
        ,evaluation_key
        ,section_key
        ,evaluation_qna_key
        ,training_period_key
        ,'National Average' as benchmark_key
        , null as benchmark_value
        ,sum(answer_count) as benchmark_value_count
      from fact_benchmark_activity_denorm_awayplace_historical_group
      where 1 = (select new_records from need_to_refresh)
      group by
        content_key
        ,evaluation_key
        ,section_key
        ,evaluation_qna_key
        ,training_period_key
    );

    /* Activities with categories from adminifi tables. */
    drop table if exists evaluation_benchmark_activity_3;
    create temp table evaluation_benchmark_activity_3 distkey(evaluation_qna_key)
    as (
      select
        (training_period_key || '-' || sb.title || '-'  || evaluation_key || '-' ||  section_key || '-' ||   content_key) as row_key
        ,sb.title as benchmark_key
        ,sb.title as benchmark_value
        ,content_key
        ,evaluation_key
        ,section_key
        ,evaluation_qna_key
        ,training_period_key
        ,sum(answer_count) as benchmark_value_count
      from fact_benchmark_activity_denorm_awayplace_historical_group as f
      join awayplace_data.benchmark_schools bs on f.school_id = bs.school_id /* TODO can I convert this into inner join?*/
      join awayplace_data.school_benchmarks sb on bs.school_benchmark_id = sb.id
      where 1 = (select new_records from need_to_refresh)
      group by
        sb.title
        ,content_key
        ,evaluation_key
        ,section_key
        ,evaluation_qna_key
        ,training_period_key
    );


    drop table if exists keys_to_refresh;
    create temp table keys_to_refresh as(
    select
      fact_eval.training_period_key
      , fact_eval.evaluation_key
      , fact_eval.section_key
      , fact_eval.evaluation_qna_key
      , fact_eval.content_key
      , nvl(fact_eval.question_id,'0') as question_id
      , fact_eval.cohort_id
      , fact_eval.school_id
    from
      ods.fact_evaluations_activity_awayplace fact_eval
    where 1 = (select new_records from need_to_refresh)
      and fact_eval.date_key > (select max(date_key) from reference_data.fact_benchmark_activity_denorm_awayplace_max_date)
      and fact_eval.date_key < to_char(current_date, 'YYYYMMDD')::int  /* filter current_date */
    group by
      fact_eval.training_period_key
      , fact_eval.evaluation_key
      , fact_eval.section_key
      , fact_eval.evaluation_qna_key
      , fact_eval.content_key
      , nvl(fact_eval.question_id,'0')
      , fact_eval.cohort_id
      , fact_eval.school_id
    );

    delete from reporting_data.fact_benchmark_activity_denorm_awayplace
    where 1 = (select new_records from need_to_refresh)
      and exists (select 1 from keys_to_refresh b
          where fact_benchmark_activity_denorm_awayplace.training_period_key = b.training_period_key
            and fact_benchmark_activity_denorm_awayplace.evaluation_key = b.evaluation_key
            and fact_benchmark_activity_denorm_awayplace.section_key = b.section_key
            and fact_benchmark_activity_denorm_awayplace.evaluation_qna_key = b.evaluation_qna_key
            and fact_benchmark_activity_denorm_awayplace.content_key = b.content_key
            and nvl(fact_benchmark_activity_denorm_awayplace.question_id,'0') = b.question_id
            and fact_benchmark_activity_denorm_awayplace.cohort_id = b.cohort_id
            and fact_benchmark_activity_denorm_awayplace.school_id = b.school_id
    );

    delete from fact_benchmark_activity_denorm_awayplace_historical_group
    where 1 = (select new_records from need_to_refresh)
      and not exists (select 1 from keys_to_refresh b
        where fact_benchmark_activity_denorm_awayplace_historical_group.training_period_key = b.training_period_key
          and fact_benchmark_activity_denorm_awayplace_historical_group.evaluation_key = b.evaluation_key
          and fact_benchmark_activity_denorm_awayplace_historical_group.section_key = b.section_key
          and fact_benchmark_activity_denorm_awayplace_historical_group.evaluation_qna_key = b.evaluation_qna_key
          and fact_benchmark_activity_denorm_awayplace_historical_group.content_key = b.content_key
          and nvl(fact_benchmark_activity_denorm_awayplace_historical_group.question_id,'0') = b.question_id
          and fact_benchmark_activity_denorm_awayplace_historical_group.cohort_id = b.cohort_id
          and fact_benchmark_activity_denorm_awayplace_historical_group.school_id = b.school_id
    );

    drop table if exists keys_to_refresh;

    insert into reporting_data.fact_benchmark_activity_denorm_awayplace
    select
      tmp_fact.answer_count,
      org.organization_name,
      org.organization_key,
      org.organization_id,
      tp.training_period_id,
      tp.training_period_key,
      tp.training_period_title,
      eval.evaluation_key,
      eval.evaluation_title,
      eval.evaluation_title as YOY_evaluation_title,
      eval.evaluation_name,
      eval.evaluation_slug,
      eval.evaluation_labels,
      eval_sec.section_description,
      eval_sec.section_key,
      eval_sec.section_title,
      eval_sec.section_labels,
      case when eval_sec.organization_id is not null then True else False end as custom_survey_section,
      qna.evaluation_qna_key,
      qna.answer_id,
      qna.answer_id as answer_key,
      qna.answer_position,
      tmp_fact.answer_text::varchar(3000),
      qna.answer_translation_id,
      qna.answer_value,
      qna.column_score,
      qna.matrix_question_id,
      qna.question_active_flag,
      qna.question_allow_prefer_not_to_answer_flag,
      qna.question_category,
      qna.question_correct_answer_ids,
      qna.question_evaluation_id,
      qna.question_fields,
      tmp_fact.question_id,
      qna.question_incorrect_feedback_text,
      qna.question_media,
      qna.question_name,
      qna.question_position,
      qna.question_required_flag,
      qna.question_section_id,
      qna.question_shuffle_flag,
      qna.question_text,
      qna.question_translation_id,
      qna.question_type,
      qna.question_weighted_response,
      qna.question_labels,
      qna.row_position,
      qna.row_text,
      CONSTANTS.SOURCE_SYSTEM.awayplace_ID as sourcesystem_id,
      cont.content_id,
      cont.content_key,
      cont.content_title,
      tmp_fact.school_id,
      null as calendar_value,
      tmp_fact.cohort_id,
      tmp_fact.cohort_name,
      benchmark_key,
      benchmark_value,
      benchmark_value_count,
      qoc.org_count,
      qoc.answer_count_percent_by_question as benchmark_percent,
      null as eval_user_count,
      null as lob_rls_id
    FROM
      fact_benchmark_activity_denorm_awayplace_historical_group as tmp_fact
      inner join ods.dim_organizations as org on org.organization_key = tmp_fact.organization_key
      inner join ods.dim_training_periods as tp on tp.training_period_key = tmp_fact.training_period_key
      inner join ods.dim_evaluations as eval on eval.evaluation_key = tmp_fact.evaluation_key
      inner join ods.dim_evalufi_sections as eval_sec on eval_sec.section_key = tmp_fact.section_key
      inner join ods.dim_evaluation_qna_texts as qna on qna.evaluation_qna_key = tmp_fact.evaluation_qna_key
      inner join ods.dim_contents as cont on cont.content_key = tmp_fact.content_key
      inner join evaluation_benchmark_activity_1 as bench_1
        ON tmp_fact.organization_key = bench_1.organization_key
        AND tmp_fact.content_key = bench_1.content_key
        AND tmp_fact.evaluation_key = bench_1.evaluation_key
        AND tmp_fact.section_key = bench_1.section_key
        AND tmp_fact.evaluation_qna_key = bench_1.evaluation_qna_key
        AND tmp_fact.training_period_key = bench_1.training_period_key
      left join max_percentage_by_question_for_national_average qoc
        on qoc.row_unique_key = tmp_fact.denorm_awayplace_key
    where 1 = (select new_records from need_to_refresh);


    drop table if exists evaluation_benchmark_activity_1;
    insert into reporting_data.fact_benchmark_activity_denorm_awayplace
    select
      tmp_fact.answer_count,
      org.organization_name,
      org.organization_key,
      org.organization_id,
      tp.training_period_id,
      tp.training_period_key,
      tp.training_period_title,
      eval.evaluation_key,
      eval.evaluation_title,
      eval.evaluation_title as YOY_evaluation_title,
      eval.evaluation_name,
      eval.evaluation_slug,
      eval.evaluation_labels,
      eval_sec.section_description,
      eval_sec.section_key,
      eval_sec.section_title,
      eval_sec.section_labels,
      case when eval_sec.organization_id is not null then True else False end as custom_survey_section,
      qna.evaluation_qna_key,
      qna.answer_id,
      qna.answer_id as answer_key,
      qna.answer_position,
      tmp_fact.answer_text::varchar(3000),
      qna.answer_translation_id,
      qna.answer_value,
      qna.column_score,
      qna.matrix_question_id,
      qna.question_active_flag,
      qna.question_allow_prefer_not_to_answer_flag,
      qna.question_category,
      qna.question_correct_answer_ids,
      qna.question_evaluation_id,
      qna.question_fields,
      tmp_fact.question_id,
      qna.question_incorrect_feedback_text,
      qna.question_media,
      qna.question_name,
      qna.question_position,
      qna.question_required_flag,
      qna.question_section_id,
      qna.question_shuffle_flag,
      qna.question_text,
      qna.question_translation_id,
      qna.question_type,
      qna.question_weighted_response,
      qna.question_labels,
      qna.row_position,
      qna.row_text,
      CONSTANTS.SOURCE_SYSTEM.awayplace_ID as sourcesystem_id,
      cont.content_id,
      cont.content_key,
      cont.content_title,
      tmp_fact.school_id,
      null as calendar_value,
      tmp_fact.cohort_id,
      tmp_fact.cohort_name,
      benchmark_key,
      benchmark_value,
      benchmark_value_count,
      qoc.org_count,
      qoc.answer_count_percent_by_question as benchmark_percent,
      null as eval_user_count,
      null as lob_rls_id
    FROM
      fact_benchmark_activity_denorm_awayplace_historical_group as tmp_fact
      inner join ods.dim_organizations as org on org.organization_key = tmp_fact.organization_key
      inner join ods.dim_training_periods as tp on tp.training_period_key = tmp_fact.training_period_key
      inner join ods.dim_evaluations as eval on eval.evaluation_key = tmp_fact.evaluation_key
      inner join ods.dim_evalufi_sections as eval_sec on eval_sec.section_key = tmp_fact.section_key
      inner join ods.dim_evaluation_qna_texts as qna on qna.evaluation_qna_key = tmp_fact.evaluation_qna_key
      inner join ods.dim_contents as cont on cont.content_key = tmp_fact.content_key
      inner join evaluation_benchmark_activity_2 as bench_2
        ON  tmp_fact.content_key = bench_2.content_key
        AND tmp_fact.evaluation_key = bench_2.evaluation_key
        AND tmp_fact.section_key = bench_2.section_key
        AND tmp_fact.evaluation_qna_key = bench_2.evaluation_qna_key
        and tmp_fact.training_period_key = bench_2.training_period_key
      left join max_percentage_by_question_for_national_average qoc
        on qoc.question_id = tmp_fact.question_id
        and qoc.row_unique_key = tmp_fact.denorm_awayplace_key
    where 1 = (select new_records from need_to_refresh);

    drop table if exists org_ids_with_partitioning;
    create temp table org_ids_with_partitioning
    diststyle all
    as
    select
      organization_key,
    from
      ods.dim_organizations
    where
      1 = (select new_records from need_to_refresh)
      and sourcesystem_id = CONSTANTS.SOURCE_SYSTEM.awayplace_ID
      and subsourcesystem_name = 'HE';

    drop table if exists evaluation_benchmark_activity_2;

      insert into reporting_data.fact_benchmark_activity_denorm_awayplace
      select
        tmp_fact.answer_count,
        org.organization_name,
        org.organization_key,
        org.organization_id,
        tp.training_period_id,
        tp.training_period_key,
        tp.training_period_title,
        eval.evaluation_key,
        eval.evaluation_title,
        eval.evaluation_title as YOY_evaluation_title,
        eval.evaluation_name,
        eval.evaluation_slug,
        eval.evaluation_labels,
        eval_sec.section_description,
        eval_sec.section_key,
        eval_sec.section_title,
        eval_sec.section_labels,
        case when eval_sec.organization_id is not null then True else False end as custom_survey_section,
        qna.evaluation_qna_key,
        qna.answer_id,
        qna.answer_id as answer_key,
        qna.answer_position,
        tmp_fact.answer_text::varchar(3000),
        qna.answer_translation_id,
        qna.answer_value,
        qna.column_score,
        qna.matrix_question_id,
        qna.question_active_flag,
        qna.question_allow_prefer_not_to_answer_flag,
        qna.question_category,
        qna.question_correct_answer_ids,
        qna.question_evaluation_id,
        qna.question_fields,
        tmp_fact.question_id,
        qna.question_incorrect_feedback_text,
        qna.question_media,
        qna.question_name,
        qna.question_position,
        qna.question_required_flag,
        qna.question_section_id,
        qna.question_shuffle_flag,
        qna.question_text,
        qna.question_translation_id,
        qna.question_type,
        qna.question_weighted_response,
        qna.question_labels,
        qna.row_position,
        qna.row_text,
        CONSTANTS.SOURCE_SYSTEM.awayplace_ID as sourcesystem_id,
        cont.content_id,
        cont.content_key,
        cont.content_title,
        tmp_fact.school_id,
        null as calendar_value,
        tmp_fact.cohort_id,
        tmp_fact.cohort_name,
        bench_3.benchmark_key,
        bench_3.benchmark_value,
        bench_3.benchmark_value_count,
        qoc.org_count,
        qoc.answer_count_percent_by_question as benchmark_percent,
        null as eval_user_count,
        null as lob_rls_id
      FROM
        fact_benchmark_activity_denorm_awayplace_historical_group as tmp_fact
        inner join org_ids_with_partitioning part on tmp_fact.organization_key = part.organization_key
        inner join ods.dim_organizations as org on org.organization_key = tmp_fact.organization_key
        inner join ods.dim_training_periods as tp on tp.training_period_key = tmp_fact.training_period_key
        inner join ods.dim_evaluations as eval on eval.evaluation_key = tmp_fact.evaluation_key
        inner join ods.dim_evalufi_sections as eval_sec on eval_sec.section_key = tmp_fact.section_key
        inner join ods.dim_evaluation_qna_texts as qna on qna.evaluation_qna_key = tmp_fact.evaluation_qna_key
        inner join ods.dim_contents as cont on cont.content_key = tmp_fact.content_key
        inner join evaluation_benchmark_activity_3 as bench_3
              ON tmp_fact.content_key = bench_3.content_key
              AND tmp_fact.evaluation_key = bench_3.evaluation_key
              AND tmp_fact.section_key = bench_3.section_key
              AND tmp_fact.evaluation_qna_key = bench_3.evaluation_qna_key
              and tmp_fact.training_period_key = bench_3.training_period_key
        left join max_percentage_by_question qoc
          on qoc.question_id = tmp_fact.question_id
          and qoc.row_unique_key = bench_3.row_key
        join awayplace_data.benchmark_schools bs on tmp_fact.school_id = bs.school_id
        join awayplace_data.school_benchmarks sb on bs.school_benchmark_id = sb.id
          and sb.title = bench_3.benchmark_key
      WHERE 1 = (select new_records from need_to_refresh)
        and part.partition_id =  item ;

      delete from fact_benchmark_activity_denorm_awayplace_historical_group
        where exists(select part.organization_key
            from org_ids_with_partitioning part
            where fact_benchmark_activity_denorm_awayplace_historical_group.organization_key = part.organization_key
            and part.partition_id =  item )
            and 1 = (select new_records from need_to_refresh);


    drop table if exists org_ids_with_partitioning;
    drop table if exists evaluation_benchmark_activity_3;
    drop table if exists fact_benchmark_activity_denorm_awayplace_historical_group;

    drop table if exists reference_data.fact_benchmark_activity_denorm_awayplace_historical_staging;
    create table reference_data.fact_benchmark_activity_denorm_awayplace_historical_staging
    (
      organization_key                         varchar(120) encode zstd
      ,training_period_key                      varchar(50) encode zstd
      ,evaluation_key                           varchar(50) encode zstd
      ,section_key                              varchar(50) encode zstd
      ,evaluation_qna_key                       varchar(600) encode zstd
      ,question_id                              bigint encode az64
      ,content_key                              varchar(100) encode zstd
      ,cohort_id                                varchar(255) encode zstd
      ,school_id                                int encode az64
      ,answer_text                              varchar(3000) encode zstd
      ,answer_count                             bigint encode az64
    )distkey(organization_key)
    sortkey(training_period_key, evaluation_key, section_key, evaluation_qna_key);

    insert into reference_data.fact_benchmark_activity_denorm_awayplace_historical_staging
    (
      organization_key,
      training_period_key,
      evaluation_key,
      section_key,
      evaluation_qna_key,
      question_id,
      content_key,
      cohort_id,
      school_id,
      answer_text,
      answer_count
    )
    select
      organization_key,
      training_period_key,
      evaluation_key,
      section_key,
      evaluation_qna_key,
      question_id,
      content_key,
      cohort_id,
      school_id,
      answer_text,
      answer_count
    from
      reporting_data.fact_benchmark_activity_denorm_awayplace
    where
      benchmark_key is null;

    update
      reference_data.fact_benchmark_activity_denorm_awayplace_max_date
      set date_key = (select max(f.date_key) from ods.fact_evaluations_activity_awayplace f
        where f.date_key < to_char(current_date, 'YYYYMMDD')::int)
    where id = 1
      and 1 = (select new_records from need_to_refresh);

    alter table reference_data.fact_benchmark_activity_denorm_awayplace_historical rename to fact_benchmark_activity_denorm_awayplace_historical_old;
    alter table reference_data.fact_benchmark_activity_denorm_awayplace_historical_staging rename to fact_benchmark_activity_denorm_awayplace_historical;
    alter table reference_data.fact_benchmark_activity_denorm_awayplace_historical owner to datapipeline_app;


    grant all on reference_data.fact_benchmark_activity_denorm_awayplace_historical to group admin_group;
    grant select, insert, update, delete on reference_data.fact_benchmark_activity_denorm_awayplace_historical to group internalapps_rw;
    grant select, insert, update, delete on reference_data.fact_benchmark_activity_denorm_awayplace_historical to group querywriters_selective_rw;
    grant select on reference_data.fact_benchmark_activity_denorm_awayplace_historical to group internalapps_ro;
    grant select on reference_data.fact_benchmark_activity_denorm_awayplace_historical to group internalapps_rw_rt;
    grant select on reference_data.fact_benchmark_activity_denorm_awayplace_historical to group querywriters_ro;
    grant select on reference_data.fact_benchmark_activity_denorm_awayplace_historical to group tableau_progress_report;

    alter table reporting_data.fact_benchmark_activity_denorm_awayplace owner to datapipeline_app;

    grant all on reporting_data.fact_benchmark_activity_denorm_awayplace to group admin_group;
    grant select, insert, update, delete on reporting_data.fact_benchmark_activity_denorm_awayplace to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.fact_benchmark_activity_denorm_awayplace to group querywriters_selective_rw;
    grant select on reporting_data.fact_benchmark_activity_denorm_awayplace to group internalapps_ro;
    grant select on reporting_data.fact_benchmark_activity_denorm_awayplace to group internalapps_rw_rt;
    grant select on reporting_data.fact_benchmark_activity_denorm_awayplace to group querywriters_ro;
    grant select on reporting_data.fact_benchmark_activity_denorm_awayplace to group tableau_progress_report;

    drop table reference_data.fact_benchmark_activity_denorm_awayplace_historical_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, wait-for-others-pipelines]
  input_node: []
  name: denorm-drinker-category-data-awayplace
  command:
      drop table if exists reporting_data.drinker_category_data_awayplace_staging;
      create table reporting_data.drinker_category_data_awayplace_staging
      (
        organization_name                         varchar(255) encode zstd,
        organization_key                          varchar(163) encode zstd,
        organization_id                           varchar(87) encode zstd,
        training_period_id                        varchar(20) encode zstd,
        training_period_key                       varchar(100) encode zstd,
        training_period                           varchar(256) encode zstd,
        cohort_id                                 varchar(100) encode zstd,
        cohort_name                               varchar(255) encode zstd,
        enrollments_key                           varchar(50) encode zstd,
        drinker_category                          int encode az64,
        benchmark_key                             varchar(255) encode zstd,
        benchmark_value                           varchar(255) encode zstd,
        answer_count                              int encode az64,
        sourcesystem_id                           int encode az64
      )distkey(organization_key)
      sortkey(training_period_key, enrollments_key);

      drop table if exists enrollment_temp;
      create temp table enrollment_temp
      distkey(user_id) as(
        select
          cohorts.name as cohort_name,
          enrollments.cohort_id as cohort_id,
          enrollments.user_id,
          cohorts.school_id,
          cohorts.implementation_period_id,
          enrollments.id as enrollment_id,
          cohorts.curriculum_id
        from
          awayplace_data.cohorts
          inner join awayplace_data.enrollments on cohorts.id = enrollments.cohort_id
        where
          cohorts.deleted_at is null
      );

      drop table if exists enrollment_data_temp;
      create temp table enrollment_data_temp
      distkey(user_id) as(
        select
          enrollment_data.enrollment_id,
          enrollment_data.key as enrollments_key,
          substring(enrollment_data.data, 5, position(chr(10) in data) - 5)::integer drinker_category,
          substring(enrollment_data.data from 5 for position(chr(10) in data) - 5)::integer drinker_category,
          enrollment_temp.cohort_name,
          enrollment_temp.cohort_id,
          enrollment_temp.user_id,
          enrollment_temp.school_id,
          enrollment_temp.implementation_period_id
        from
          enrollment_temp
          inner join spectrum_schema.awayplace_data_enrollment_data as enrollment_data on enrollment_data.enrollment_id = enrollment_temp.enrollment_id
        where
          enrollment_data.key ~ '^AEC[13]_DC$' and enrollment_temp.curriculum_id = 10
      );

      insert into enrollment_data_temp
      select
        enrollment_data.enrollment_id,
        enrollment_data.key as enrollments_key,
        substring(enrollment_data.data from 5 for position(chr(10) in data) - 5)::integer drinker_category,
        enrollment_temp.cohort_name,
        enrollment_temp.cohort_id,
        enrollment_temp.user_id,
        enrollment_temp.school_id,
        enrollment_temp.implementation_period_id
      from
        enrollment_temp
        inner join spectrum_schema.awayplace_data_enrollment_data as enrollment_data on enrollment_data.enrollment_id = enrollment_temp.enrollment_id
      where
        enrollment_data.key ~ '^GLE[13]_DC$' and enrollment_temp.curriculum_id = 23;

      drop table if exists enrollment_temp;

      insert into reporting_data.drinker_category_data_awayplace_staging
      select
        nvl(org2.organization_name, org1.organization_name) as organization_name,
        nvl(org2.organization_key, org1.organization_key) as organization_key,
        nvl(org2.organization_id, org1.organization_id) as organization_id,
        tp.training_period_id,
        tp.training_period_key,
        tp.training_period_title as training_period,
        enrollments.cohort_id as cohort_id,
        enrollments.cohort_name,
        enrollments.enrollments_key,
        enrollments.drinker_category,
        null as benchmark_key,
        null as benchmark_value,
        count(enrollments.enrollment_id) as answer_count,
        CONSTANTS.SOURCE_SYSTEM.awayplace_ID as sourcesystem_id
      from enrollment_data_temp as enrollments
        inner join awayplace_data.users on enrollments.user_id = users.id  and users.terms
        inner join awayplace_data.schools as schools on enrollments.school_id = schools.id
        left join ods.dim_organizations as org1 on org1.organization_id = (cast(schools.id as varchar) || '-' || 'HE') and org1.sourcesystem_id = CONSTANTS.SOURCE_SYSTEM.awayplace_ID and schools.uuid is null
        left join ods.dim_organizations as org2 on org2.organization_UUId = schools.uuid and org2.sourcesystem_id = 1 and schools.uuid is not null
        inner join ods.dim_training_periods tp on tp.training_period_id = enrollments.implementation_period_id and tp.sourcesystem_id = CONSTANTS.SOURCE_SYSTEM.awayplace_ID
        inner join awayplace_data.implementation_periods on implementation_periods.id = enrollments.implementation_period_id
      where
        not schools.internal_sample
        and not schools.demo
        and schools.deleted_at is null
        and schools.advisor_group_type is null
        and implementation_periods.market = 'HE'
        and implementation_periods.period_type = 'Full Year'
        and implementation_periods.end_date >= '2016-01-01'
      group by
        nvl(org2.organization_name, org1.organization_name),
        nvl(org2.organization_key, org1.organization_key),
        nvl(org2.organization_id, org1.organization_id),
        tp.training_period_id,
        tp.training_period_key,
        tp.training_period_title,
        enrollments.cohort_id,
        enrollments.cohort_name,
        enrollments.enrollments_key,
        enrollments.drinker_category;

      insert into reporting_data.drinker_category_data_awayplace_staging
      select
        nvl(org2.organization_name, org1.organization_name) as organization_name,
        nvl(org2.organization_key, org1.organization_key) as organization_key,
        nvl(org2.organization_id, org1.organization_id) as organization_id,
        tp.training_period_id,
        tp.training_period_key,
        tp.training_period_title as training_period,
        enrollments.cohort_id as cohort_id,
        enrollments.cohort_name,
        enrollments.enrollments_key,
        enrollments.drinker_category,
        sb.title as benchmark_key,
        sb.title as benchmark_value,
        count(enrollments.enrollment_id) as answer_count,
        CONSTANTS.SOURCE_SYSTEM.awayplace_ID as sourcesystem_id
      from enrollment_data_temp as enrollments
        inner join awayplace_data.users on enrollments.user_id = users.id  and users.terms
        inner join awayplace_data.schools as schools on enrollments.school_id = schools.id
        left join ods.dim_organizations as org1 on org1.organization_id = (cast(schools.id as varchar) || '-' || 'HE') and org1.sourcesystem_id = CONSTANTS.SOURCE_SYSTEM.awayplace_ID and schools.uuid is null
        left join ods.dim_organizations as org2 on org2.organization_UUId = schools.uuid and org2.sourcesystem_id = 1 and schools.uuid is not null
        inner join ods.dim_training_periods tp on tp.training_period_id = enrollments.implementation_period_id and tp.sourcesystem_id = CONSTANTS.SOURCE_SYSTEM.awayplace_ID
        inner join awayplace_data.implementation_periods on implementation_periods.id = enrollments.implementation_period_id
        inner join awayplace_data.benchmark_schools bs on schools.id = bs.school_id
        inner join awayplace_data.school_benchmarks sb on bs.school_benchmark_id = sb.id
      where
        not schools.internal_sample
        and not schools.demo
        and schools.deleted_at is null
        and schools.advisor_group_type is null
        and implementation_periods.market = 'HE'
        and implementation_periods.period_type = 'Full Year'
        and implementation_periods.end_date >= '2016-01-01'
      group by
        nvl(org2.organization_name, org1.organization_name),
        nvl(org2.organization_key, org1.organization_key),
        nvl(org2.organization_id, org1.organization_id),
        tp.training_period_id,
        tp.training_period_key,
        tp.training_period_title,
        enrollments.cohort_id,
        enrollments.cohort_name,
        enrollments.enrollments_key,
        enrollments.drinker_category,
        sb.title;

      drop table if exists enrollment_data_temp;

      alter table reporting_data.drinker_category_data_awayplace rename to drinker_category_data_awayplace_old;
      alter table reporting_data.drinker_category_data_awayplace_staging rename to drinker_category_data_awayplace;
      alter table reporting_data.drinker_category_data_awayplace owner to datapipeline_app;

      grant all on table reporting_data.drinker_category_data_awayplace to group admin_group;
      grant references,trigger on table reporting_data.drinker_category_data_awayplace to datapipeline_app;
      grant select,insert,delete,update on table reporting_data.drinker_category_data_awayplace to datapipeline_app with grant option;
      grant select,insert,delete,update on table reporting_data.drinker_category_data_awayplace to group internalapps_rw;
      grant select on table reporting_data.drinker_category_data_awayplace to group internalapps_ro;
      grant select on table reporting_data.drinker_category_data_awayplace to group internalapps_rw_rt;
      grant select on table reporting_data.drinker_category_data_awayplace to group querywriters_ro;
      grant select on table reporting_data.drinker_category_data_awayplace to group tableau_progress_report;

      drop table if exists reporting_data.drinker_category_data_awayplace_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-2, teams-admin-lookup]
  input_node: []
  name: elective-learning-knowledge-gain-report-data
  command:
    drop table if exists reporting_data.a_table_knowledge_gain_report_data_staging;
    create table reporting_data.a_table_knowledge_gain_report_data_staging as (
      select
        dates.date
        ,orgs.organization_name
        ,orgs.organization_uuid
        ,progs.program_name
        ,fact.content_group_name
        ,partners.partner
        ,fact.team_uuid
        ,admins.user_uuid as team_manager_uuid
        ,admins.team_manager_last_name || ', ' || admins.team_manager_first_name as team_manager_name
        ,fact.content_group_avg_post_assessment_score
        ,fact.content_group_avg_pre_assessment_score
        ,fact.knowledge_gain
        ,fact.post_evaluations_completed
        ,fact.pre_evaluations_completed
        ,fact.total_pre_assessment_grade
        ,fact.total_post_assessment_grade
      from ods.fact_a_table_knowledge_gain as fact
      join ods_static_data.dim_dates as dates
        on dates.date_key = fact.date_key
      join ods.dim_organizations as orgs
        on orgs.organization_key = fact.organization_key
      join ods.dim_programs as progs
        on progs.program_key = fact.program_key
      join ods.dim_user_partner_responses partners
        on partners.user_partner_key = fact.user_partner_key
      left join reporting_data.teams_admin_lookup admins
        on admins.team_uuid = fact.team_uuid
        and admins.organization_uuid = orgs.organization_id
    );

    alter table reporting_data.a_table_knowledge_gain_report_data rename to a_table_knowledge_gain_report_data_old;
    alter table reporting_data.a_table_knowledge_gain_report_data_staging rename to a_table_knowledge_gain_report_data;
    alter table reporting_data.a_table_knowledge_gain_report_data owner to datapipeline_app;

    grant all on reporting_data.a_table_knowledge_gain_report_data to group admin_group;
    grant select, insert, update, delete on reporting_data.a_table_knowledge_gain_report_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.a_table_knowledge_gain_report_data to group querywriters_selective_rw;
    grant select on reporting_data.a_table_knowledge_gain_report_data to group internalapps_ro;
    grant select on reporting_data.a_table_knowledge_gain_report_data to group internalapps_rw_rt;
    grant select on reporting_data.a_table_knowledge_gain_report_data to group querywriters_ro;
    grant select on reporting_data.a_table_knowledge_gain_report_data to group tableau_progress_report;

    drop table if exists reporting_data.a_table_knowledge_gain_report_data_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, teams-admin-lookup]
  input_node: []
  name: teams-admin-members-lookup
  command:
    drop table if exists reporting_data.teams_admin_members_lookup_staging;
    create table reporting_data.teams_admin_members_lookup_staging as (
      select
        tal.team_uuid,
        tal.team_name,
        tal.organization_uuid,
        tal.user_uuid as team_manager_user_id,
        tal.tableau_user_name as tableau_team_manager_user_name,
        tal.team_manager_first_name || ', ' ||  tal.team_manager_last_name as team_manager_name,
        tal.lob_bitmap as team_manager_lob_bitmap,
        tal.is_primary_admin as team_manager_is_primary_admin,
        members.id as team_member_uuid,
        members.first_name || ', ' || members.last_name as team_member_name,
        members.email as team_member_email,
        ods.f_lob_rls_finder(members.business_lines) as team_member_lob_bitmap
      from reporting_data.teams_admin_lookup tal
      join adminifi_data.team_members tm
        on tm.team_id = tal.team_uuid
      join adminifi_data.users as members
        on tm.user_id = members.id);

    alter table reporting_data.teams_admin_members_lookup rename to teams_admin_members_lookup_old;
    alter table reporting_data.teams_admin_members_lookup_staging rename to teams_admin_members_lookup;
    alter table reporting_data.teams_admin_members_lookup owner to datapipeline_app;

    grant all on reporting_data.teams_admin_members_lookup to group admin_group;
    grant select, insert, update, delete on reporting_data.teams_admin_members_lookup to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.teams_admin_members_lookup to group querywriters_selective_rw;
    grant select on reporting_data.teams_admin_members_lookup to group internalapps_ro;
    grant select on reporting_data.teams_admin_members_lookup to group internalapps_rw_rt;
    grant select on reporting_data.teams_admin_members_lookup to group querywriters_ro;
    grant select on reporting_data.teams_admin_members_lookup to group tableau_progress_report;

    drop table if exists reporting_data.teams_admin_members_lookup_old;

- step_type: sql-command
  depends_on: [notification-activity]
  input_node: []
  name: email-suppression
  command:

    drop table if exists reporting_data.email_suppression_data_staging;
    create table reporting_data.email_suppression_data_staging (
      user_id                       varchar(36)  encode zstd,
      organization_uuid             varchar(256) encode zstd,
      organization_name             varchar(256) encode zstd,
      notification_email_address    varchar(256) encode zstd,
      message_template_name         varchar(100) encode zstd,
      message_event_type            varchar(100) encode zstd,
      bounced_user                  boolean      encode zstd,
      unsubscribe_lists_email       varchar(256) encode zstd,
      suppression_lists_email       varchar(256) encode zstd,
      suppression_lists_name        varchar(100) encode zstd,
      suppression_lists_description varchar(256) encode zstd,
      email_address                 varchar(512) encode zstd,
      lob_rls_id                    int          encode az64,
      bounced_list_email            varchar(512) encode zstd,
      unsub_suppressed_or_bounced   boolean      encode zstd,
      bounced_users_count           int          encode az64,
      unsubscribed_by_list_count    int          encode az64,
      unsubscribed_by_list          boolean      encode zstd,
      unsubscribed_global_count     int          encode az64,
      unsubscribed_global           boolean      encode zstd
    ) distkey(user_id);

    insert into reporting_data.email_suppression_data_staging
      select
        user_id
        ,organization_uuid
        ,organization_name
        ,notification_email_address
        ,message_template_name
        ,message_event_type
        ,bounced_user
        ,unsubscribe_lists_email
        ,suppression_lists_email
        ,suppression_lists_name
        ,suppression_lists_description
        ,email_address
        ,lob_rls_id
        ,(case
            when bounced_user then email_address
            else null
          end) as bounced_list_email
        ,(case
            when unsubscribe_lists_email is null
                  and suppression_lists_email is null
                  and bounced_list_email is null then false
            else
              true
          end) as unsub_suppressed_or_bounced
        ,count( distinct (
          case when bounced_user = true then email_address
          else null
          end)
        ) as bounced_users_count
        ,count( distinct (suppression_lists_email)) as unsubscribed_by_list_count
        ,(case
            when unsubscribed_by_list_count >= 1 then true
            else false
          end) as unsubscribed_by_list
        ,count( distinct (unsubscribe_lists_email)) as unsubscribed_global_count
        ,(case
            when unsubscribed_global_count >= 1 then true
            else false
          end) as unsubscribed_global
      from
        reporting_data.notification_activity
      group by
        user_id
        ,organization_uuid
        ,organization_name
        ,notification_email_address
        ,message_template_name
        ,message_event_type
        ,bounced_user
        ,unsubscribe_lists_email
        ,suppression_lists_email
        ,suppression_lists_name
        ,suppression_lists_description
        ,email_address
        ,lob_rls_id
    ;

    alter table reporting_data.email_suppression_data rename to email_suppression_data_old;
    alter table reporting_data.email_suppression_data_staging rename to email_suppression_data;
    alter table reporting_data.email_suppression_data owner to datapipeline_app;

    grant all on reporting_data.email_suppression_data to group admin_group;
    grant select, insert, update, delete on reporting_data.email_suppression_data to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.email_suppression_data to group querywriters_selective_rw;
    grant select on reporting_data.email_suppression_data to group internalapps_ro;
    grant select on reporting_data.email_suppression_data to group internalapps_rw_rt;
    grant select on reporting_data.email_suppression_data to group querywriters_ro;
    grant select on reporting_data.email_suppression_data to group tableau_progress_report;

    drop table if exists reporting_data.email_suppression_data_old;

- step_type: sql-command
  depends_on: [wait-for-events-import-pipeline, wait-for-others-admini-pipelines, wait-for-ods-pipeline-1, wait-for-ods-pipeline-2]
  input_node: []
  name: assigned-learning-notification-activity
  command:
     drop table if exists reporting_data.a_table_notifications_activity_staging;
     create table if not exists reporting_data.a_table_notifications_activity_staging (
       notification_event_create_at timestamp without time zone encode zstd,
       organization_key varchar(170) encode zstd,
       organization_uuid varchar(100) encode zstd,
       organization_name varchar(255) encode zstd,
       lob_rls_id integer encode az64,
       user_id varchar(50) encode zstd,
       first_name varchar(2000) encode zstd,
       last_name varchar(2000) encode zstd,
       email_address varchar(300) encode zstd,
       assignment_key varchar(100) encode zstd,
       assignment_id varchar(100) encode zstd,
       assignment_name varchar(255) encode zstd,
       message_purpose varchar(100) encode zstd,
       message_event_type varchar(100) encode zstd,
       message_id varchar(50) encode zstd,
       message_template_name varchar(100) encode zstd,
       parent_template_name varchar(100) encode zstd,
       message_sends integer encode az64,
       message_clicks integer encode az64,
       unique_users_emailed integer encode az64,
       sourcesystem_id integer encode az64
     )
     distkey(user_id)
     sortkey(organization_key, lob_rls_id);

     insert into reporting_data.a_table_notifications_activity_staging
      select
        dt.date as notification_event_create_at,
        org.organization_key,
        org.organization_uuid,
        org.organization_name,
        fact.lob_rls_id,
        fact.user_id,
        users.first_name,
        users.last_name,
        users.email as email_address,
        asgn.assignment_key,
        fact.assignment_id,
        asgn.assignment_name,
        fact.message_purpose,
        fact.message_event_type,
        fact.message_id,
        msgs.message_content_name as message_template_name,
        msgs_parent.message_content_name as parent_template_name,
        fact.message_sends,
        fact.message_clicks,
        1 as unique_users_emailed,
        fact.sourcesystem_id
      from
        ods.fact_a_table_notification_activity fact
        inner join ods_static_data.dim_dates dt on fact.date_key = dt.date_key
        inner join ods.dim_organizations org on fact.organization_key = org.organization_key
        inner join adminifi_data.users users on fact.user_id = users.id
        inner join ods.dim_messages msgs on msgs.message_template_key = fact.message_template_key
        left join ods.dim_assignments asgn on fact.assignment_id = asgn.assignment_id::varchar and asgn.sourcesystem_id = 10
        left join ods.dim_messages msgs_parent on msgs_parent.message_template_id = msgs.message_content_parent_id
      where dt.date >= dateadd(day, -365, current_date);

    alter table reporting_data.a_table_notifications_activity rename to a_table_notifications_activity_old;
    alter table reporting_data.a_table_notifications_activity_staging rename to a_table_notifications_activity;
    alter table reporting_data.a_table_notifications_activity owner to datapipeline_app;

    grant all on reporting_data.a_table_notifications_activity to group admin_group;
    grant select, insert, update, delete on reporting_data.a_table_notifications_activity to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.a_table_notifications_activity to group querywriters_selective_rw;
    grant select on reporting_data.a_table_notifications_activity to group internalapps_ro;
    grant select on reporting_data.a_table_notifications_activity to group internalapps_rw_rt;
    grant select on reporting_data.a_table_notifications_activity to group querywriters_ro;
    grant select on reporting_data.a_table_notifications_activity to group tableau_progress_report;

    drop table if exists reporting_data.a_table_notifications_activity_old;


- step_type: sql-command
  depends_on: [wait-for-events-import-pipeline, wait-for-others-admini-pipelines, wait-for-ods-pipeline-1]
  input_node: []
  name: elective-learning-notification-activity
  command:
    drop table if exists reporting_data.a_table_notification_activity_staging;
    create table if not exists reporting_data.a_table_notification_activity_staging (
      notification_event_create_at timestamp without time zone encode zstd,
      organization_key varchar(170) encode zstd,
      organization_uuid varchar(100) encode zstd,
      organization_name varchar(255) encode zstd,
      lob_rls_id integer encode az64,
      user_id varchar(50) encode zstd,
      recipient_name varchar(4000) encode zstd,
      email_address varchar(300) encode zstd,
      sender_id varchar(50) encode zstd,
      sender_name varchar(4000) encode zstd,
      invitation_id varchar(100) encode zstd,
      message_purpose varchar(100) encode zstd,
      message_event_type varchar(100) encode zstd,
      message_id varchar(50) encode zstd,
      message_template_name varchar(100) encode zstd,
      parent_template_name varchar(100) encode zstd,
      message_sends integer encode az64,
      message_clicks integer encode az64,
      unique_users_emailed integer encode az64,
      team_id varchar(100) encode zstd,
      team_manager_name varchar(202) encode zstd,
      sourcesystem_id integer encode az64
    )
    distkey(user_id)
    sortkey(organization_key, lob_rls_id);

    drop table if exists team_manager;
    create temp table team_manager
      distkey(invitation_id) as (
        select
          i.id as invitation_id,
          i.team_id,
          (tal.team_manager_last_name || ', ' || tal.team_manager_first_name) as team_manager_name
        from next_data.invitations as i
          inner join adminifi_data.team_managers as tm
            on i.team_id = tm.team_id
          left join reporting_data.teams_admin_lookup as tal
            on tm.team_id = tal.team_uuid
        group by
          invitation_id,
          i.team_id,
          team_manager_name
    );

    insert into reporting_data.a_table_notification_activity_staging
     select
       dt.date as notification_event_create_at,
       org.organization_key,
       org.organization_uuid,
       org.organization_name,
       fact.lob_rls_id,
       fact.user_id,
       fact.recipient_name,
       fact.recipient_email as email_address,
       fact.sender_id,
       (sender.first_name || ' ' || sender.last_name) as sender_name,
       fact.invitation_id,
       fact.message_purpose,
       fact.message_event_type,
       msgs.message_template_id as message_id,
       msgs.message_content_name as message_template_name,
       msgs_parent.message_content_name as parent_template_name,
       fact.message_sends,
       fact.message_clicks,
       1 as unique_users_emailed,
       tm.team_id,
       tm.team_manager_name,
       fact.sourcesystem_id
     from
       ods.fact_a_table_notification_activity fact
       inner join ods_static_data.dim_dates dt on fact.date_key = dt.date_key
       inner join ods.dim_organizations org on fact.organization_key = org.organization_key
       left join adminifi_data.users users on fact.user_id = users.id
       left join adminifi_data.users sender on fact.sender_id = sender.id
       inner join ods.dim_messages msgs on msgs.message_template_key = fact.message_template_key
       left join ods.dim_messages msgs_parent on msgs_parent.message_template_id = msgs.message_content_parent_id
       left join team_manager as tm
         on fact.invitation_id = tm.invitation_id
     where dt.date >= dateadd(day, -365, current_date);

    alter table reporting_data.a_table_notification_activity rename to a_table_notification_activity_old;
    alter table reporting_data.a_table_notification_activity_staging rename to a_table_notification_activity;
    alter table reporting_data.a_table_notification_activity owner to datapipeline_app;

    grant all on reporting_data.a_table_notification_activity to group admin_group;
    grant select, insert, update, delete on reporting_data.a_table_notification_activity to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.a_table_notification_activity to group querywriters_selective_rw;
    grant select on reporting_data.a_table_notification_activity to group internalapps_ro;
    grant select on reporting_data.a_table_notification_activity to group internalapps_rw_rt;
    grant select on reporting_data.a_table_notification_activity to group querywriters_ro;
    grant select on reporting_data.a_table_notification_activity to group tableau_progress_report;

    drop table if exists reporting_data.a_table_notification_activity_old;

- step_type: sql-command
  depends_on: [wait-for-others-awayplace-pipelines]
  input_node: []
  name: sponsored-learning-school-course-activities
  command:
    drop table if exists group_and_id;
    create temp table group_and_id as (
      select
        administrators.id as admin_id,
        min(group_admins.administrator_group_name) as admin_group
      from awayplace_data.administrators
      left join awayplace_data.administrator_groups_admins as group_admins
        on group_admins.administrator_id = administrators.id
      where group_admins.administrator_group_name is not null
        and administrator_group_parent_id is null
      group by administrators.id
    );

    drop table if exists secondary_sponsorships;
    create temp table secondary_sponsorships as (
      select
        school_id,
        curriculum_id,
        min(sponsor_id) as sponsor_id
      from awayplace_data.sponsorships
      where not "primary"
        and deleted_at is null
      group by school_id, curriculum_id
    );

    drop table if exists master_schools;
    create temp table master_schools as (
      select
        master_schools.id,
        master_schools.name,
        master_schools.county,
        master_schools.phone,
        master_schools.students,
        master_schools.freelunch,
        master_schools.reduced,
        case
          when master_schools.lat_centroid <> '' and
            master_schools.long_centroid <> '' then
            to_number(master_schools.lat_centroid, '9999999999D9999999999')
        end master_school_lat,
        case
          when master_schools.lat_centroid <> '' and
            master_schools.long_centroid <> '' then
            to_number(master_schools.long_centroid, '9999999999D9999999999')
        end as master_school_long,
        master_districts.id as master_district_id,
        master_districts.name as master_district_name,
        case
          when master_districts.lat_centroid <> '' and
            master_districts.long_centroid <> '' then
            to_number(master_districts.lat_centroid, '9999999999D9999999999')
        end as master_district_lat,
        case
          when master_districts.lat_centroid <> '' and
            master_districts.long_centroid <> '' then
            to_number(master_districts.long_centroid, '9999999999D9999999999')
        end as master_district_long,
        case
          when
            master_schools.freelunch is null or master_schools.reduced is null or
            master_schools.students is null or master_schools.students = 0 or
            master_schools.freelunch + master_schools.reduced > master_schools.students then -1
          when master_schools.freelunch + master_schools.reduced <= master_schools.students / 2 then 0
          else 1
        end as lmi_status,
        case
          when
            master_schools.freelunch is null or master_schools.reduced is null or
            master_schools.students is null or master_schools.students = 0 or
            master_schools.freelunch + master_schools.reduced > master_schools.students then 'UNKNOWN'
          when master_schools.freelunch + master_schools.reduced <= master_schools.students / 2 then 'NO LMI'
          else 'LMI'
        end as lmi_string
      from awayplace_data.master_schools
      left join awayplace_data.master_districts
        on master_districts.id = master_schools.master_district_id
        and master_districts.deleted_at is null
    );

    drop table if exists teachers;
    create temp table teachers as (
      select
        count(distinct coalesce(teacher_users.id,0)) as teacher_count,
        schools.id as school_id,
        teacher_implementation_periods.implementation_period_id as implementation_period_id,
        regexp_replace(curriculums.name,'[0-9\-]', '' ) as curriculum_name,
        (case
            when master_schools.freelunch is null or master_schools.reduced is null or
            master_schools.students is null or master_schools.students = 0 or
            master_schools.freelunch + master_schools.reduced > master_schools.students then -1
            when master_schools.freelunch + master_schools.reduced <= master_schools.students / 2 then 0
            else 1
        end) as lmi_status,
        master_districts.id as master_district_id,
        admin_group
      from awayplace_data.teachers
      inner join awayplace_data.users as teacher_users on teacher_users.id = teachers.user_id
        and teacher_users.deleted_at is null
      inner join awayplace_data.schools on teachers.school_id = schools.id
        and not schools.internal_sample
        and not schools.demo
        and schools.deleted_at is null
        and schools.advisor_group_type is null
      inner join awayplace_data.curriculums on teachers.curriculum_id = curriculums.id
        and market = 'K12'
      left join awayplace_data.curriculum_translations on curriculum_translations.curriculum_id = curriculums.id
        and curriculum_translations.locale = 'en-US'
      inner join awayplace_data.teacher_implementation_periods on teacher_implementation_periods.teacher_id = teachers.id
        and teacher_implementation_periods.implementation_period_id in
        ( select id
          from
            awayplace_data.implementation_periods
          where market = 'K12' and
             end_date <= (CURRENT_DATE + INTERVAL '365 DAYS') and
             end_date >= (CURRENT_DATE - INTERVAL '365 DAYS')
       )
      inner join awayplace_data.implementation_periods on teacher_implementation_periods.implementation_period_id = implementation_periods.id
      left join awayplace_data.cohorts on cohorts.teacher_id = teachers.id
        and cohorts.deleted_at is null and cohorts.implementation_period_id in
         (  select id
            from
              awayplace_data.implementation_periods
            where market = 'K12' and
              end_date <= (CURRENT_DATE + INTERVAL '365 DAYS') and
              end_date >= (CURRENT_DATE - INTERVAL '365 DAYS')
         )
      left join awayplace_data.administrators as account_managers on schools.account_manager_id = account_managers.id
      left join group_and_id on account_managers.id = group_and_id.Admin_id
      left join awayplace_data.master_schools on master_schools.id = schools.master_school_id
      left join awayplace_data.master_districts on master_districts.id = master_schools.master_district_id
        and master_districts.deleted_at is null
      left join awayplace_data.sponsorships as primary_sponsorships on primary_sponsorships.school_id = schools.id
        and primary_sponsorships.curriculum_id = curriculums.id
        and primary_sponsorships.primary
        and primary_sponsorships.deleted_at is null
      left join awayplace_data.sponsors as primary_sponsors on primary_sponsors.id = primary_sponsorships.sponsor_id
        and primary_sponsors.deleted_at is null
      left join secondary_sponsorships on secondary_sponsorships.school_id = schools.id
          and secondary_sponsorships.curriculum_id = curriculums.id
      left join awayplace_data.sponsors as secondary_sponsors on secondary_sponsors.id = secondary_sponsorships.sponsor_id
        and secondary_sponsors.deleted_at is null
      where teachers.deleted_at is null
      group by
        schools.id,
        teacher_implementation_periods.implementation_period_id,
        regexp_replace(curriculums.name,'[0-9\-]', '' ),
        (case
            when master_schools.freelunch is null or master_schools.reduced is null or
            master_schools.students is null or master_schools.students = 0 or
            master_schools.freelunch + master_schools.reduced > master_schools.students then -1
            when master_schools.freelunch + master_schools.reduced <= master_schools.students / 2 then 0
            else 1
        end),
        master_districts.id,
        admin_group
    );

    drop table if exists reporting_data.sponsored_learning_school_course_activities_staging;
    create table reporting_data.sponsored_learning_school_course_activities_staging (
      school_id                 integer encode az64,
      advisor_group_type        integer encode az64,
      salesforce_id             varchar(255) encode zstd,
      teacher_count             integer encode az64,
      committed_at              date encode az64,
      active_at                 date encode az64,
      registered_not_started    bigint encode az64,
      active_enrollments        bigint encode az64,
      tier_1_certified          bigint encode az64,
      tier_2_certified          bigint encode az64,
      using_enrollments         bigint encode az64,
      bbt_certified_enrollments bigint encode az64,
      modules_complete          bigint encode az64,
      implementation_period_id  integer encode az64,
      implementation_period     varchar(50) encode zstd,
      period_type               varchar(50) encode zstd,
      school_name               varchar(255) encode zstd,
      curriculum_name           varchar(256) encode zstd,
      account_manager_id        integer encode az64,
      account_manager_name      varchar(511) encode zstd,
      account_manager_email     varchar(255) encode zstd,
      state_id                  integer encode az64,
      state_name                varchar(255) encode zstd,
      county                    varchar(255) encode zstd,
      master_school_phone       varchar(255) encode zstd,
      master_school_students    integer encode az64,
      free_lunch                integer encode az64,
      reduced_lunch             integer encode az64,
      lmi_status                integer encode az64,
      lmi_string                varchar(16) encode zstd,
      master_school_id          integer encode az64,
      master_school_name        varchar(255) encode zstd,
      master_school_lat         numeric(20,10) encode az64,
      master_school_long        numeric(20,10) encode az64,
      master_district_id        integer encode az64,
      master_district_name      varchar(255) encode zstd,
      master_district_lat       numeric(20,10) encode az64,
      master_district_long      numeric(20,10) encode az64,
      primary_sponsor_id        integer encode az64,
      primary_sponsor_name      varchar(255) encode zstd,
      secondary_sponsor_id      integer encode az64,
      secondary_sponsor_name    varchar(255) encode zstd,
      admin_group               varchar(255) encode zstd
    ) distkey(implementation_period_id);

    insert into reporting_data.sponsored_learning_school_course_activities_staging
      select
        schools.id as school_id,
        advisor_group_type,
        schools.salesforce_id,
        min(nvl(teachers.teacher_count, 0)) as teacher_count,
        min(cohorts.created_at)::date as committed_at,
        min(cohorts.active_at)::date as active_at,
        sum(case when enrollments.state = 'registered_not_started' then 1 else 0 end) as  registered_not_started,
        sum(case when enrollments.state = 'active' then 1 else 0 end) as active_enrollments,
        sum(case when enrollments.state = 'tier_1_certified' then 1 else 0 end) as tier_1_certified,
        sum(case when enrollments.state = 'tier_2_certified' then 1 else 0 end) as tier_2_certified,
        sum(case when enrollments.state <> 'registered_not_started' then 1 else 0 end) as using_enrollments,
        sum(case when content_module_statuses.modules_complete >= 3 then 1 else 0 end) as bbt_certified_enrollments,
        coalesce(sum(content_module_statuses.modules_complete), 0) as modules_complete,
        implementation_periods.id as implementation_period_id,
        implementation_periods.title as Implementation_period,
        implementation_periods.period_type,
        schools.name as school_name,
        regexp_replace(curriculums.name,'[0-9\-]', '' ) as curriculum_name,
        account_managers.id as account_manager_id,
        (account_managers.first_name || ' ' || account_managers.last_name) as account_manager_name,
        account_managers.email as account_manager_email,
        states.id as state_id,
        states.name as state_name,
        master_schools.county as county,
        master_schools.phone as master_school_phone,
        master_schools.students as master_school_students,
        master_schools.freelunch as free_lunch,
        master_schools.reduced as reduced_lunch,
        master_schools.lmi_status,
        master_schools.lmi_string,
        master_schools.id as master_school_id,
        master_schools.name as master_school_name,
        master_schools.master_school_lat,
        master_schools.master_school_long,
        master_schools.master_district_id,
        master_schools.master_district_name,
        master_schools.master_district_lat,
        master_schools.master_district_long,
        primary_sponsors.id as primary_sponsor_id,
        primary_sponsors.name as primary_sponsor_name,
        secondary_sponsors.id as secondary_sponsor_id,
        secondary_sponsors.name as secondary_sponsor_name,
        group_and_id.admin_group
      from awayplace_data.cohorts
      join awayplace_data.schools as schools
        on cohorts.school_id = schools.id
        and not schools.internal_sample
        and not schools.demo
        and schools.deleted_at is null
      join awayplace_data.curriculums as curriculums
        on cohorts.curriculum_id = curriculums.id
        and curriculums.market = 'K12'
      left join  awayplace_data.implementation_periods
        on implementation_periods.id = cohorts.implementation_period_id
        and implementation_periods.market = 'K12'
      left join awayplace_data.administrators as account_managers
        on schools.account_manager_id = account_managers.id
      left join group_and_id
        on account_managers.id = group_and_id.Admin_id
      left join awayplace_data.states
        on states.id = schools.state_id
      left join master_schools
        on master_schools.id = schools.master_school_id
      left join awayplace_data.sponsorships as primary_sponsorships
        on primary_sponsorships.school_id = schools.id
        and primary_sponsorships.curriculum_id = curriculums.id
        and primary_sponsorships.primary
        and primary_sponsorships.deleted_at is null
      left join awayplace_data.sponsors as primary_sponsors
        on primary_sponsors.id = primary_sponsorships.sponsor_id
        and primary_sponsors.deleted_at is null
      left join secondary_sponsorships
        on secondary_sponsorships.school_id = schools.id
        and secondary_sponsorships.curriculum_id = curriculums.id
      left join awayplace_data.sponsors as secondary_sponsors
        on secondary_sponsors.id = secondary_sponsorships.sponsor_id
        and secondary_sponsors.deleted_at is null
      left join teachers on teachers.school_id = schools.id
        and teachers.implementation_period_id = cohorts.implementation_period_id
        and teachers.curriculum_name = regexp_replace(curriculums.name,'[0-9\-]', '' )
        and teachers.master_district_id = master_schools.master_district_id
        and teachers.lmi_status = master_schools.lmi_status
        and teachers.admin_group = group_and_id.admin_group
      left join awayplace_data.enrollments
        on enrollments.cohort_id = cohorts.id
      left join (
        select enrollment_id, count(distinct content_module_id) as modules_complete
        from awayplace_data.content_module_statuses s
        where completed
          or module_completed_at is not null
        group by enrollment_id
      ) content_module_statuses
        on content_module_statuses.enrollment_id = enrollments.id
      where cohorts.deleted_at is null
        and (cohorts.active_at is not null
             or cohorts.estimated_start_date is not null
             and (cohorts.default = false
                  or cohorts.default is null))
      group by
        schools.id,
        advisor_group_type,
        schools.salesforce_id,
        implementation_periods.id,
        implementation_periods.title,
        implementation_periods.period_type,
        schools.name,
        regexp_replace(curriculums.name,'[0-9\-]', '' ),
        account_managers.id,
        account_manager_name,
        account_managers.email,
        states.id,
        states.name,
        master_schools.county,
        master_schools.phone,
        master_schools.students,
        master_schools.freelunch,
        master_schools.reduced,
        master_schools.lmi_status,
        master_schools.lmi_string,
        master_schools.id,
        master_schools.name,
        master_schools.master_school_lat,
        master_schools.master_school_long,
        master_schools.master_district_id,
        master_schools.master_district_name,
        master_schools.master_district_lat,
        master_schools.master_district_long,
        primary_sponsors.id,
        primary_sponsors.name,
        secondary_sponsors.id,
        secondary_sponsors.name,
        group_and_id.admin_group
    ;

    drop table if exists group_and_id;
    drop table if exists secondary_sponsorships;
    drop table if exists master_schools;
    drop table if exists teachers;

    alter table reporting_data.sponsored_learning_school_course_activities rename to sponsored_learning_school_course_activities_old;
    alter table reporting_data.sponsored_learning_school_course_activities_staging rename to  sponsored_learning_school_course_activities;
    alter table reporting_data.sponsored_learning_school_course_activities owner to datapipeline_app;

    grant all on reporting_data.sponsored_learning_school_course_activities to group admin_group;
    grant select, insert, update, delete on reporting_data.sponsored_learning_school_course_activities to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.sponsored_learning_school_course_activities to group querywriters_selective_rw;
    grant select on reporting_data.sponsored_learning_school_course_activities to group internalapps_ro;
    grant select on reporting_data.sponsored_learning_school_course_activities to group internalapps_rw_rt;
    grant select on reporting_data.sponsored_learning_school_course_activities to group querywriters_ro;
    grant select on reporting_data.sponsored_learning_school_course_activities to group tableau_progress_report;

    drop table if exists reporting_data.sponsored_learning_school_course_activities_old;


- step_type: sql-command
  depends_on: [wait-for-others-awayplace-pipelines]
  input_node: []
  name: sponsored-learning-enrollment-activities
  command:
   drop table if exists temp_curriculum_weight;
   create temp table temp_curriculum_weight distkey(curriculum_id) as (
     select distinct
       hcur.id as curriculum_id,
       (CASE curriculum_name
       WHEN 'Vault' THEN 0.41
       WHEN 'Vault2' THEN 0.25
       WHEN 'Ignition' THEN 0.58
       WHEN 'Ignition2' THEN 0.58
       WHEN 'Radius' THEN 0.66
       WHEN 'Venture' THEN 0.58
       WHEN 'Commons' THEN 0.66
       WHEN 'AlcoholEduHS' THEN 0.2
       WHEN 'FinLit2' THEN 0.75
       WHEN 'FinLit3' THEN 0.5
       WHEN 'FutureGoalsHockeyScholar' THEN 0.5
       WHEN 'FutureGoalsHockeyScholarMath' THEN 0.5
       WHEN 'FutureGoalsHockeyScholarScience' THEN 0.5
       WHEN 'ThreeOhSix' THEN 0.25
       WHEN 'HealthyRelationships' THEN 0.45
       WHEN 'FutureSmart' THEN .58
       WHEN 'FutureSmartComparison' THEN 0.58
       WHEN 'Gametime' THEN .25
       WHEN 'HealthierMeJr' THEN 0.17
       WHEN 'HealthierMeMS' THEN 0.13
       WHEN 'HonorCode' THEN 0.17
       WHEN 'RxDrugsHS' THEN 0.13
       WHEN 'Marketplaces' THEN 0.25
       WHEN 'SummerSlugger' THEN 0.08
       WHEN 'Compassion' THEN 0.33
       END)::numeric(18,2) as weight
      from ods.dim_curriculums curriculums
      inner join awayplace_data.curriculums hcur on hcur.id = curriculums.curriculum_id and hcur.market ='K12'
    );

   drop table if exists implementation_periods;
    create temp table implementation_periods as (
      select
        id,
        title,
        dense_rank() over (order by id) rank
      from awayplace_data.implementation_periods
      where market = 'K12'
      group by id, title
    );

    drop table if exists completed_content_module_statuses;
    create temp table completed_content_module_statuses as (
      select
        enrollment_id,
        content_module_id
      from awayplace_data.content_module_statuses
      where completed
        or module_completed_at is not null
    );

    drop table if exists secondary_sponsorships1;
    create temp table secondary_sponsorships1 as (
      select
        sponsorships.school_id,
        sponsorships.curriculum_id,
        min(sponsorships.sponsor_id) as sponsor_id
      from awayplace_data.sponsorships
      where not sponsorships.primary
        and sponsorships.deleted_at is null
      group by
        sponsorships.school_id,
        sponsorships.curriculum_id
    );

    drop table if exists cohort_states;
    create temp table cohort_states distkey(cohort_id) as(
      select
        cohort_id,
        count(1) as active_enrollments_count,
        case when count(1) > 3 then 'Active' else 'Inactive' end as cohort_state
      from
        awayplace_data.enrollments
        inner join awayplace_data.cohorts on enrollments.cohort_id = cohorts.id
        inner join awayplace_data.implementation_periods as ip on ip.id = cohorts.implementation_period_id
        and ip.market = 'K12'
        and cohorts.active_at::Date >= dateadd(day, -364, ip.end_date)::Date
        and cohorts.active_at::Date <= ip.end_date::Date
      where
        enrollments.state <>'registered_not_started'
      group by 1
    );

    drop table if exists school_curriculum_stage;
    create temp table school_curriculum_stage distkey(school_id) as(
      select
        cohorts.implementation_period_id,
        cohorts.school_id,
        cohorts.curriculum_id,
        (case
           when sum(case when cohort_states.cohort_state='Active' then 1 else 0 end) > 0 then 'Active'
           else 'Committed'
        end) as school_curriculum_stage
      from
        awayplace_data.cohorts
        left join cohort_states on cohort_states.cohort_id=cohorts.id
      group by 1,2,3
    );

    drop table if exists complete_modules_enrollment_activities;
    create temp table complete_modules_enrollment_activities as (
      select
        enrollments.id                                    as enrollment_id,
        enrollments.user_id,
        enrollments.cohort_id,
        cohorts.school_id,
        cohorts.curriculum_id,
        enrollments.state                                 as enrollment_state,
        min(enrollments.active_at::date)                  as active_at,
        schools.name                                      as school_name,
        schools.advisor_group_type                        as advisor_group_type,
        schools.salesforce_id,
        schools.account_manager_id,
        schools.state_id,
        schools.master_school_id,
        count(distinct content_modules.content_module_id) as modules_complete,
        implementation_periods.id                         as implementation_period_id,
        implementation_periods.title                      as implementation_period,
        implementation_periods.rank                       as implementation_rank,
        cur.curriculum_name                               as curriculum_name,
        cur.curriculum_name_combined                      as parent_curriculum_name,
        primary_sponsorships.sponsor_id                   as primary_sponsor_id,
        secondary_sponsorships1.sponsor_id                 as secondary_sponsor_id,
        sch.school_billing_address_postal_code,
        sch.school_billing_address_state,
        sch.school_billing_address_city,
        sch.school_billing_address_street,
        sch.school_students_reduced_lunch,
        sch.school_students_free_lunch,
        sch.school_lmi,
        sch.school_district,
        sch.school_sf_county_name,
        sch.school_salesforce_id,
        sch.schoolmanager_first_name,
        sch.schoolmanager_last_name,
        sch.schoolmanager_email,
        sfa.title_1_school_wide__c                        as master_school_title_1,
        scs.school_curriculum_stage
      from awayplace_data.cohorts
      join awayplace_data.schools
        on cohorts.school_id = schools.id
      left join sfdc_stitch.sf_account as sfa
        on substring(schools.salesforce_id, 1, 15) = sfa.account_id__c
      join ods.dim_schools sch on sch.school_id = schools.id
        and sch.sourcesystem_id = CONSTANTS.SOURCE_SYSTEM.awayplace_ID
      join awayplace_data.curriculums
        on cohorts.curriculum_id = curriculums.id
        and market = 'K12'
      join ods.dim_curriculums cur on cur.curriculum_id = curriculums.id
        and cur.sourcesystem_id = CONSTANTS.SOURCE_SYSTEM.awayplace_ID
      join implementation_periods
        on implementation_periods.id = cohorts.implementation_period_id
      join awayplace_data.enrollments
        on enrollments.cohort_id = cohorts.id
        and enrollments.deleted_at is null
      join awayplace_data.users as users
        on users.id = enrollments.user_id
        and users.deleted_at is null
      left join completed_content_module_statuses as content_modules
        on content_modules.enrollment_id = enrollments.id
      left join awayplace_data.sponsorships as primary_sponsorships
        on schools.id = primary_sponsorships.school_id
        and curriculums.id = primary_sponsorships.curriculum_id
        and primary_sponsorships.primary
        and primary_sponsorships.deleted_at is null
      left join secondary_sponsorships1
        on schools.id = secondary_sponsorships1.school_id
        and curriculums.id = secondary_sponsorships1.curriculum_id
      left join school_curriculum_stage scs on
        scs.school_id = schools.id
        and scs.curriculum_id = curriculums.id
        and scs.implementation_period_id = cohorts.implementation_period_id
      where cohorts.deleted_at is null
        and not schools.internal_sample
        and not schools.demo
        and schools.deleted_at is null
        and schools.advisor_group_type is null
      group by
        enrollments.id,
        enrollments.user_id,
        enrollments.cohort_id,
        cohorts.school_id,
        cohorts.curriculum_id,
        enrollments.state,
        schools.name,
        schools.advisor_group_type,
        schools.salesforce_id,
        schools.account_manager_id,
        schools.state_id,
        schools.master_school_id,
        implementation_periods.id,
        implementation_periods.title,
        implementation_periods.rank,
        cur.curriculum_name,
        cur.curriculum_name_combined,
        primary_sponsorships.sponsor_id,
        secondary_sponsorships1.sponsor_id,
        sch.school_billing_address_postal_code,
        sch.school_billing_address_state,
        sch.school_billing_address_city,
        sch.school_billing_address_street,
        sch.school_students_reduced_lunch,
        sch.school_students_free_lunch,
        sch.school_lmi,
        sch.school_district,
        sch.school_sf_county_name,
        sch.school_salesforce_id,
        sch.schoolmanager_first_name,
        sch.schoolmanager_last_name,
        sch.schoolmanager_email,
        sfa.title_1_school_wide__c,
        scs.school_curriculum_stage
    );

    drop table if exists implementation_periods;
    drop table if exists completed_content_module_statuses;
    drop table if exists secondary_sponsorships1;

    drop table if exists group_and_id;
    create temp table group_and_id as (
      select
        administrators.id as admin_id,
        min(group_admins.administrator_group_name) as admin_group
      from awayplace_data.administrators
      left join awayplace_data.administrator_groups_admins as group_admins
        on group_admins.administrator_id = administrators.id
      where group_admins.administrator_group_name is not null
        and administrator_group_parent_id is null
      group by administrators.id
    );

    drop table if exists reporting_data.sponsored_learning_enrollment_activities_staging;
    create table reporting_data.sponsored_learning_enrollment_activities_staging (
      enrollment_id             integer encode az64,
      user_id                   integer encode az64,
      cohort_id                 integer encode az64,
      school_id                 integer encode az64,
      enrollment_state          varchar(255) encode zstd,
      active_at                 date encode az64,
      school_name               varchar(255) encode zstd,
      advisor_group_type        integer encode az64,
      salesforce_id             varchar(255) encode zstd,
      account_manager_id        integer encode az64,
      account_manager_name      varchar(511) encode zstd,
      state_id                  integer encode az64,
      state_name                varchar(255) encode zstd,
      county                    varchar(255) encode zstd,
      master_school_name        varchar(255) encode zstd,
      master_district_id        integer encode az64,
      master_district_name      varchar(255) encode zstd,
      primary_sponsor_id        integer encode az64,
      primary_sponsor_salesforce_id  varchar(256) encode zstd,
      primary_sponsor_name      varchar(255) encode zstd,
      secondary_sponsor_id      integer encode az64,
      secondary_sponsor_salesforce_id  varchar(256) encode zstd,
      secondary_sponsor_name    varchar(255) encode zstd,
      modules_complete          bigint encode az64,
      implementation_period_id  integer encode az64,
      implementation_period     varchar(50) encode zstd,
      implementation_rank       bigint encode az64,
      curriculum_name           varchar(256) encode zstd,
      parent_curriculum_name    varchar(256) encode zstd,
      admin_group               varchar(255) encode zstd,
      lmi_string                varchar(8) encode zstd,
      hours_of_learning                     numeric(18,4) encode zstd,
      school_billing_address_postal_code    varchar(128) encode zstd,
      school_billing_address_state          varchar(128) encode zstd,
      school_billing_address_city           varchar(128) encode zstd,
      school_billing_address_street         varchar(256) encode zstd,
      school_students_reduced_lunch         integer      encode az64,
      school_students_free_lunch            integer      encode az64,
      school_lmi                            boolean      encode zstd,
      school_district                       varchar(128) encode zstd,
      school_sf_county_name                 varchar(256) encode zstd,
      school_salesforce_id                  varchar(256) encode zstd,
      schoolmanager_first_name              varchar(256) encode zstd,
      schoolmanager_last_name               varchar(256) encode zstd,
      schoolmanager_email                   varchar(256) encode zstd,
      master_school_title_1                 boolean      encode zstd,
      school_curriculum_stage               varchar(25) encode zstd,
      cohort_state                          varchar(25) encode zstd
    ) distkey(implementation_period_id);

    insert into reporting_data.sponsored_learning_enrollment_activities_staging
      select
        cmea.enrollment_id,
        cmea.user_id,
        cmea.cohort_id,
        cmea.school_id,
        cmea.enrollment_state,
        min(cmea.active_at)                                               as active_at,
        cmea.school_name,
        cmea.advisor_group_type,
        cmea.salesforce_id,
        account_managers.id                                               as account_manager_id,
        account_managers.first_name || ' ' || account_managers.last_name  as account_manager_name,
        states.id                                                         as state_id,
        states.name                                                       as state_name,
        master_schools.county                                             as county,
        master_schools.name                                               as master_school_name,
        master_districts.id                                               as master_district_id,
        master_districts.name                                             as master_district_name,
        primary_sponsors.id                                               as primary_sponsor_id,
        primary_sponsors.salesforce_id                                    as primary_sponsor_salesforce_id,
        primary_sponsors.name                                             as primary_sponsor_name,
        secondary_sponsors.id                                             as secondary_sponsor_id,
        secondary_sponsors.salesforce_id                                  as secondary_sponsor_salesforce_id,
        secondary_sponsors.name                                           as secondary_sponsor_name,
        cmea.modules_complete,
        cmea.implementation_period_id,
        cmea.implementation_period,
        cmea.implementation_rank,
        cmea.curriculum_name,
        cmea.parent_curriculum_name,
        group_and_id.admin_group,
        case
          when master_schools.freelunch is null or master_schools.reduced is null
            or master_schools.students is null or master_schools.students = 0
            or master_schools.freelunch + master_schools.reduced > master_schools.students
            then 'UNKNOWN'
          when master_schools.freelunch + master_schools.reduced <= master_schools.students / 2 then 'NO LMI'
          else 'LMI'
        end                                                               as lmi_string,
        (cmea.modules_complete::numeric(18,2) * tcw.weight) as hours_of_learning,
        cmea.school_billing_address_postal_code,
        cmea.school_billing_address_state,
        cmea.school_billing_address_city,
        cmea.school_billing_address_street,
        cmea.school_students_reduced_lunch,
        cmea.school_students_free_lunch,
        cmea.school_lmi,
        cmea.school_district,
        cmea.school_sf_county_name,
        cmea.school_salesforce_id,
        cmea.schoolmanager_first_name,
        cmea.schoolmanager_last_name,
        cmea.schoolmanager_email,
        cmea.master_school_title_1,
        cmea.school_curriculum_stage,
        cs.cohort_state
      from complete_modules_enrollment_activities as cmea
      left join awayplace_data.administrators as account_managers
        on cmea.account_manager_id = account_managers.id
      left join group_and_id
        on cmea.account_manager_id = group_and_id.admin_id
      left join awayplace_data.states
        on cmea.state_id = states.id
      left join awayplace_data.master_schools
        on cmea.master_school_id = master_schools.id
      left join awayplace_data.master_districts
        on master_schools.master_district_id = master_districts.id
        and master_districts.deleted_at is null
      left join awayplace_data.sponsors as primary_sponsors
        on primary_sponsors.id = cmea.primary_sponsor_id
        and primary_sponsors.deleted_at is null
      left join awayplace_data.sponsors as secondary_sponsors
        on secondary_sponsors.id = cmea.secondary_sponsor_id
        and secondary_sponsors.deleted_at is null
      left join temp_curriculum_weight tcw on tcw.curriculum_id = cmea.curriculum_id
      left join cohort_states as cs on cs.cohort_id = cmea.cohort_id
      group by
        cmea.enrollment_id,
        cmea.user_id,
        cmea.cohort_id,
        cmea.school_id,
        cmea.enrollment_state,
        cmea.school_name,
        cmea.advisor_group_type,
        cmea.salesforce_id,
        account_managers.id,
        account_manager_name,
        states.id,
        states.name,
        master_schools.county,
        master_schools.name,
        master_districts.id,
        master_districts.name,
        primary_sponsors.id,
        primary_sponsors.salesforce_id,
        primary_sponsors.name,
        secondary_sponsors.id,
        secondary_sponsors.salesforce_id,
        secondary_sponsors.name,
        cmea.modules_complete,
        cmea.implementation_period_id,
        cmea.implementation_period,
        cmea.implementation_rank,
        cmea.curriculum_name,
        cmea.parent_curriculum_name,
        group_and_id.admin_group,
        lmi_string,
        tcw.weight,
        cmea.school_billing_address_postal_code,
        cmea.school_billing_address_state,
        cmea.school_billing_address_city,
        cmea.school_billing_address_street,
        cmea.school_students_reduced_lunch,
        cmea.school_students_free_lunch,
        cmea.school_lmi,
        cmea.school_district,
        cmea.school_sf_county_name,
        cmea.school_salesforce_id,
        cmea.schoolmanager_first_name,
        cmea.schoolmanager_last_name,
        cmea.schoolmanager_email,
        cmea.master_school_title_1,
        cmea.school_curriculum_stage,
        cs.cohort_state
    ;

    drop table if exists complete_modules_enrollment_activities;
    drop table if exists group_and_id;
    drop table if exists cohort_states;

    alter table reporting_data. sponsored_learning_enrollment_activities rename to sponsored_learning_enrollment_activities_old;
    alter table reporting_data. sponsored_learning_enrollment_activities_staging rename to  sponsored_learning_enrollment_activities;
    alter table reporting_data. sponsored_learning_enrollment_activities owner to datapipeline_app;

    grant all on reporting_data. sponsored_learning_enrollment_activities to group admin_group;
    grant select, insert, update, delete on reporting_data. sponsored_learning_enrollment_activities to group internalapps_rw;
    grant select, insert, update, delete on reporting_data. sponsored_learning_enrollment_activities to group querywriters_selective_rw;
    grant select on reporting_data. sponsored_learning_enrollment_activities to group internalapps_ro;
    grant select on reporting_data. sponsored_learning_enrollment_activities to group internalapps_rw_rt;
    grant select on reporting_data. sponsored_learning_enrollment_activities to group querywriters_ro;
    grant select on reporting_data. sponsored_learning_enrollment_activities to group tableau_progress_report;

    drop table if exists reporting_data. sponsored_learning_enrollment_activities_old;

- step_type: sql-command
  depends_on: [wait-for-others-admini-pipelines, wait-for-ods-pipeline-2]
  input_node: []
  name: assigned-learning-evaluation-benchmark
  command:

    drop table if exists evaluation_activity_a_table_tmp;
    create temp table evaluation_activity_a_table_tmp
    (
      organization_key character varying(163) encode zstd,
      training_period_key character varying(50) encode zstd,
      evaluation_key character varying(100) encode zstd,
      evaluation_section_key character varying(100) encode zstd,
      evaluation_qna_key character varying(1000)  encode zstd,
      content_key character varying(100) encode zstd,
      answer_count integer encode az64,
      question_user_count integer encode az64,
      lob_rls_id integer encode az64,
      business_lines character varying(500)  encode zstd,
      no_benchmark boolean encode zstd
    )distkey(evaluation_qna_key);

    insert into evaluation_activity_a_table_tmp
    select
      fact.organization_key
      ,fact.training_period_key
      ,fact.evaluation_key
      ,fact.evaluation_section_key
      ,fact.evaluation_qna_key
      ,fact.content_key
      ,sum(fact.answer_count) as answer_count
      ,sum(fact.question_user_count) as question_user_count
      ,dim_contents.lob_rls_id
      ,c.business_lines
      ,eval_lbls.no_benchmark
    from ods.fact_evaluations_activity_individual_responses as fact
      LEFT JOIN ods.dim_contents AS dim_contents
          ON fact.content_key = dim_contents.content_key
      left join content_service_data.contents as c
        on c.id = dim_contents.content_id
      join ods.dim_evaluations e
        on e.evaluation_key = fact.evaluation_key
        and not e.sqs
    join ods.dim_evaluation_qna_texts dim_qna_texts
      on fact.evaluation_qna_key = dim_qna_texts.evaluation_qna_key
    join reference_data.evaluations_labels eval_lbls
      on dim_qna_texts.question_evaluation_id = eval_lbls.evaluation_id
        and dim_qna_texts.question_section_id = eval_lbls.section_id
        and dim_qna_texts.question_id = eval_lbls.question_id
        and dim_qna_texts.sourcesystem_id = eval_lbls.sourcesystem_id
    where
      fact.sourcesystem_id = 9
      and eval_lbls.report
    group by
      fact.organization_key
      ,fact.training_period_key
      ,fact.evaluation_key
      ,fact.evaluation_section_key
      ,fact.evaluation_qna_key
      ,fact.content_key
      ,dim_contents.lob_rls_id
      ,c.business_lines
      ,eval_lbls.no_benchmark;

    drop table if exists temp_a_table_evaluation_benchmark;
    create temp table temp_a_table_evaluation_benchmark
    as (
      select distinct
        evaluation_activity.answer_count,
        evaluation_activity.question_user_count,
        dim_orgs.organization_name,
        dim_orgs.organization_key,
        dim_orgs.organization_id,
        dim_training_periods.training_period_key,
        dim_training_periods.training_period_title,
        dim_eval.evaluation_key,
        dim_eval.evaluation_title,
        dim_eval.evaluation_name,
        dim_eval.evaluation_slug,
        dim_eval.evaluation_labels,
        dim_sections.section_description,
        evaluation_activity.evaluation_section_key as section_key,
        dim_sections.section_title,
        dim_sections.section_labels,
        case when dim_sections.organization_id is not null then True else False end as custom_survey_section,
        dim_qna.evaluation_qna_key,
        dim_qna.answer_id,
        dim_qna.answer_position,
        dim_qna.answer_text,
        dim_qna.answer_translation_id,
        dim_qna.answer_value,
        dim_qna.column_score,
        dim_qna.matrix_question_id,
        dim_qna.question_active_flag,
        dim_qna.question_allow_prefer_not_to_answer_flag,
        dim_qna.question_category,
        dim_qna.question_correct_answer_ids,
        dim_qna.question_evaluation_id,
        dim_qna.question_fields,
        dim_qna.question_id,
        dim_qna.question_incorrect_feedback_text,
        dim_qna.question_media,
        dim_qna.question_name,
        dim_qna.question_position,
        dim_qna.question_required_flag,
        dim_qna.question_section_id,
        dim_qna.question_shuffle_flag,
        dim_qna.question_text,
        dim_qna.question_translation_id,
        dim_qna.question_type,
        dim_qna.question_weighted_response,
        dim_qna.question_labels,
        dim_qna.row_position,
        dim_qna.row_text,
        dim_qna.sourcesystem_id,
        dim_qna.choices_number,
        dim_contents.content_id,
        dim_contents.content_key,
        dim_contents.content_title,
        evaluation_activity.lob_rls_id,
        evaluation_activity.business_lines,
        (case when eal.type = 'scorm' then true else false end) as is_scorm,
        sum(eal.eval_user_count) as eval_user_count
      FROM evaluation_activity_a_table_tmp as evaluation_activity
      JOIN ods.dim_organizations AS dim_orgs
        ON evaluation_activity.organization_key = dim_orgs.organization_key
      LEFT JOIN ods.dim_training_periods AS dim_training_periods
        ON evaluation_activity.training_period_key = dim_training_periods.training_period_key
      JOIN ods.dim_evaluations AS dim_eval
        ON evaluation_activity.evaluation_key = dim_eval.evaluation_key
      LEFT JOIN ods.dim_evalufi_sections AS dim_sections
        ON evaluation_activity.evaluation_section_key = dim_sections.section_key
      JOIN ods.dim_evaluation_qna_texts AS dim_qna
        ON evaluation_activity.evaluation_qna_key = dim_qna.evaluation_qna_key
        AND dim_qna.question_type not in ('Questions::MultipleResponse')
      JOIN ods.dim_contents AS dim_contents
        ON evaluation_activity.content_key = dim_contents.content_key
      left join ods.fact_evaluations_assigned_learners eal
        on evaluation_activity.organization_key = eal.organization_key
        and evaluation_activity.evaluation_key = eal.evaluation_key
        and evaluation_activity.content_key = eal.content_key
      group by
        evaluation_activity.answer_count,
        evaluation_activity.question_user_count,
        dim_orgs.organization_name,
        dim_orgs.organization_key,
        dim_orgs.organization_id,
        dim_training_periods.training_period_key,
        dim_training_periods.training_period_title,
        dim_eval.evaluation_key,
        dim_eval.evaluation_title,
        dim_eval.evaluation_name,
        dim_eval.evaluation_slug,
        dim_eval.evaluation_labels,
        dim_sections.section_description,
        evaluation_activity.evaluation_section_key,
        dim_sections.section_title,
        dim_sections.section_labels,
        case when dim_sections.organization_id is not null then True else False end,
        dim_qna.evaluation_qna_key,
        dim_qna.answer_id,
        dim_qna.answer_position,
        dim_qna.answer_text,
        dim_qna.answer_translation_id,
        dim_qna.answer_value,
        dim_qna.column_score,
        dim_qna.matrix_question_id,
        dim_qna.question_active_flag,
        dim_qna.question_allow_prefer_not_to_answer_flag,
        dim_qna.question_category,
        dim_qna.question_correct_answer_ids,
        dim_qna.question_evaluation_id,
        dim_qna.question_fields,
        dim_qna.question_id,
        dim_qna.question_incorrect_feedback_text,
        dim_qna.question_media,
        dim_qna.question_name,
        dim_qna.question_position,
        dim_qna.question_required_flag,
        dim_qna.question_section_id,
        dim_qna.question_shuffle_flag,
        dim_qna.question_text,
        dim_qna.question_translation_id,
        dim_qna.question_type,
        dim_qna.question_weighted_response,
        dim_qna.question_labels,
        dim_qna.row_position,
        dim_qna.row_text,
        dim_qna.sourcesystem_id,
        dim_qna.choices_number,
        dim_contents.content_id,
        dim_contents.content_key,
        dim_contents.content_title,
        evaluation_activity.lob_rls_id,
        evaluation_activity.business_lines,
        (case when eal.type = 'scorm' then true else false end)
    );

    insert into temp_a_table_evaluation_benchmark
      select distinct
        evaluation_activity.answer_count,
        evaluation_activity.question_user_count,
        dim_orgs.organization_name,
        dim_orgs.organization_key,
        dim_orgs.organization_id,
        dim_training_periods.training_period_key,
        dim_training_periods.training_period_title,
        dim_eval.evaluation_key,
        dim_eval.evaluation_title,
        dim_eval.evaluation_name,
        dim_eval.evaluation_slug,
        dim_eval.evaluation_labels,
        dim_sections.section_description,
        evaluation_activity.evaluation_section_key as section_key,
        dim_sections.section_title,
        dim_sections.section_labels,
        case when dim_sections.organization_id is not null then True else False end as custom_survey_section,
        dim_qna.evaluation_qna_key,
        dim_qna.answer_id,
        dim_qna.answer_position,
        dim_qna.answer_text,
        dim_qna.answer_translation_id,
        dim_qna.answer_value,
        dim_qna.column_score,
        dim_qna.matrix_question_id,
        dim_qna.question_active_flag,
        dim_qna.question_allow_prefer_not_to_answer_flag,
        dim_qna.question_category,
        dim_qna.question_correct_answer_ids,
        dim_qna.question_evaluation_id,
        dim_qna.question_fields,
        dim_qna.question_id,
        dim_qna.question_incorrect_feedback_text,
        dim_qna.question_media,
        dim_qna.question_name,
        dim_qna.question_position,
        dim_qna.question_required_flag,
        dim_qna.question_section_id,
        dim_qna.question_shuffle_flag,
        dim_qna.question_text,
        dim_qna.question_translation_id,
        dim_qna.question_type,
        dim_qna.question_weighted_response,
        dim_qna.question_labels,
        dim_qna.row_position,
        dim_qna.row_text,
        dim_qna.sourcesystem_id,
        dim_qna.choices_number,
        dim_contents.content_id,
        dim_contents.content_key,
        dim_contents.content_title,
        evaluation_activity.lob_rls_id,
        evaluation_activity.business_lines,
        (case when eal.type = 'scorm' then true else false end) as is_scorm,
        sum(eal.eval_user_count) as eval_user_count
      FROM evaluation_activity_a_table_tmp as evaluation_activity
      JOIN ods.dim_organizations AS dim_orgs
        ON evaluation_activity.organization_key = dim_orgs.organization_key
      LEFT JOIN ods.dim_training_periods AS dim_training_periods
        ON evaluation_activity.training_period_key = dim_training_periods.training_period_key
      JOIN ods.dim_evaluations AS dim_eval
        ON evaluation_activity.evaluation_key = dim_eval.evaluation_key
      LEFT JOIN ods.dim_evalufi_sections AS dim_sections
        ON evaluation_activity.evaluation_section_key = dim_sections.section_key
      JOIN ods.dim_evaluation_qna_texts AS dim_qna
        ON evaluation_activity.evaluation_qna_key = dim_qna.evaluation_qna_key
          AND dim_qna.question_type in ('Questions::MultipleResponse')
      JOIN ods.dim_contents AS dim_contents
        ON evaluation_activity.content_key = dim_contents.content_key
      left join ods.fact_evaluations_assigned_learners eal
        on evaluation_activity.organization_key = eal.organization_key
        and evaluation_activity.evaluation_key = eal.evaluation_key
        and evaluation_activity.content_key = eal.content_key
      group by
        evaluation_activity.answer_count,
        evaluation_activity.question_user_count,
        dim_orgs.organization_name,
        dim_orgs.organization_key,
        dim_orgs.organization_id,
        dim_training_periods.training_period_key,
        dim_training_periods.training_period_title,
        dim_eval.evaluation_key,
        dim_eval.evaluation_title,
        dim_eval.evaluation_name,
        dim_eval.evaluation_slug,
        dim_eval.evaluation_labels,
        dim_sections.section_description,
        evaluation_activity.evaluation_section_key,
        dim_sections.section_title,
        dim_sections.section_labels,
        case when dim_sections.organization_id is not null then True else False end,
        dim_qna.evaluation_qna_key,
        dim_qna.answer_id,
        dim_qna.answer_position,
        dim_qna.answer_text,
        dim_qna.answer_translation_id,
        dim_qna.answer_value,
        dim_qna.column_score,
        dim_qna.matrix_question_id,
        dim_qna.question_active_flag,
        dim_qna.question_allow_prefer_not_to_answer_flag,
        dim_qna.question_category,
        dim_qna.question_correct_answer_ids,
        dim_qna.question_evaluation_id,
        dim_qna.question_fields,
        dim_qna.question_id,
        dim_qna.question_incorrect_feedback_text,
        dim_qna.question_media,
        dim_qna.question_name,
        dim_qna.question_position,
        dim_qna.question_required_flag,
        dim_qna.question_section_id,
        dim_qna.question_shuffle_flag,
        dim_qna.question_text,
        dim_qna.question_translation_id,
        dim_qna.question_type,
        dim_qna.question_weighted_response,
        dim_qna.question_labels,
        dim_qna.row_position,
        dim_qna.row_text,
        dim_qna.sourcesystem_id,
        dim_qna.choices_number,
        dim_contents.content_id,
        dim_contents.content_key,
        dim_contents.content_title,
        evaluation_activity.lob_rls_id,
        evaluation_activity.business_lines,
        (case when eal.type = 'scorm' then true else false end);

    drop table if exists question_org_count;
    create temp table question_org_count
    as (
      select
        bc.name as benchmark_key,
        bg.name as benchmark_value,
        evaluation_key,
        section_key,
        content_key,
        question_id,
        count(distinct f.organization_key) as org_count,
        sum(answer_count) as total_answer_count
      from
        temp_a_table_evaluation_benchmark  f
        LEFT JOIN ods.dim_organizations AS dim_orgs ON f.organization_key = dim_orgs.organization_key
        LEFT JOIN adminifi_data.benchmark_group_organizations AS bgo ON dim_orgs.organization_id = bgo.organization_id
        LEFT JOIN adminifi_data.benchmark_groups AS bg ON bgo.benchmark_group_id = bg.id
        LEFT JOIN adminifi_data.benchmark_categories AS bc ON bgo.benchmark_category_id = bc.id
      where
        f.sourcesystem_id = 9
        and bc.name is not null
      group by
        bc.name,
        bg.name,
        evaluation_key,
        section_key,
        content_key,
        question_id
     );

    drop table if exists question_org_percent;
    create temp table question_org_percent
    as (
      select
        bc.name as benchmark_key,
        bg.name as benchmark_value,
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        q.org_count,
        round((CAST(sum(t.answer_count) AS NUMERIC(12,4)) / CAST(max(total_answer_count) AS NUMERIC(12,4))) * 100) as answer_count_percent_by_org
      from
        temp_a_table_evaluation_benchmark t
        LEFT JOIN ods.dim_organizations AS dim_orgs ON t.organization_key = dim_orgs.organization_key
        LEFT JOIN adminifi_data.benchmark_group_organizations AS bgo ON dim_orgs.organization_id = bgo.organization_id
        LEFT JOIN adminifi_data.benchmark_groups AS bg ON bgo.benchmark_group_id = bg.id
        LEFT JOIN adminifi_data.benchmark_categories AS bc ON bgo.benchmark_category_id = bc.id
        join question_org_count q
          on t.evaluation_key = q.evaluation_key
          and t.section_key = q.section_key
          and t.question_id = q.question_id
          and t.content_key = q.content_key
          and bc.name = q.benchmark_key
          and bg.name = q.benchmark_value
      where q.total_answer_count > 0
        and t.sourcesystem_id = 9
        and bc.name is not null
      group by
        bc.name,
        bg.name,
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        q.org_count
     );
    drop table if exists question_org_count;

    drop table if exists max_percentage_by_question;
    create temp table max_percentage_by_question
     as (
      select
        benchmark_key,
        benchmark_value,
        evaluation_key,
        section_key,
        content_key,
        question_id,
        org_count,
        max(answer_count_percent_by_org) as answer_count_percent_by_question
      from question_org_percent
      group by
        benchmark_key,
        benchmark_value,
        evaluation_key,
        section_key,
        content_key,
        question_id,
        org_count
     );

     drop table if exists question_org_percent;


    /* For National Average Metrics */
    drop table if exists question_org_count_for_national_average;
    create temp table question_org_count_for_national_average
    as (
      select
        evaluation_key,
        section_key,
        content_key,
        question_id,
        count(distinct organization_key) as org_count,
        sum(answer_count) as total_answer_count
      from
        temp_a_table_evaluation_benchmark
      group by
        evaluation_key,
        section_key,
        content_key,
        question_id
     );

    drop table if exists question_org_percent_for_national_average;
    create temp table question_org_percent_for_national_average
    as (
      select
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        q.org_count,
        round((CAST(sum(t.answer_count) AS NUMERIC(12,4)) / CAST(max(total_answer_count) AS NUMERIC(12,4))) * 100) as answer_count_percent_by_org
      from
        temp_a_table_evaluation_benchmark t
        join question_org_count_for_national_average q
          on t.evaluation_key = q.evaluation_key
          and t.section_key = q.section_key
          and t.question_id = q.question_id
          and t.content_key = q.content_key
      where q.total_answer_count > 0
      group by
        t.evaluation_key,
        t.section_key,
        t.content_key,
        t.question_id,
        t.organization_key,
        q.org_count
     );
    drop table if exists question_org_count_for_national_average;

    drop table if exists max_percentage_by_question_for_national_average;
    create temp table max_percentage_by_question_for_national_average
     as (
      select
        evaluation_key,
        section_key,
        content_key,
        question_id,
        org_count,
        max(answer_count_percent_by_org) as answer_count_percent_by_question
      from question_org_percent_for_national_average
      group by
        evaluation_key,
        section_key,
        content_key,
        question_id,
        org_count
     );

     drop table if exists question_org_percent_for_national_average;

    /* All activities with benchmark_key = null at the beginning */
    drop table if exists evaluation_benchmark_activity_1;
    create temp table evaluation_benchmark_activity_1
    as (
      select
        eval.organization_key
        ,eval.content_key
        ,eval.evaluation_key
        ,eval.evaluation_section_key
        ,eval.evaluation_qna_key
        ,null as benchmark_key
        ,null as benchmark_value
        ,sum(eval.answer_count) as benchmark_value_count
        ,sum(eval.question_user_count) as benchmark_question_user_count
      from evaluation_activity_a_table_tmp eval
      group by
        eval.organization_key
        ,eval.content_key
        ,eval.evaluation_key
        ,eval.evaluation_section_key
        ,eval.evaluation_qna_key
    );

    /* 'National Average' category applied to all activities */
    drop table if exists evaluation_benchmark_activity_2;
    create temp table evaluation_benchmark_activity_2
    as (
      select
        eval.content_key
        ,eval.evaluation_key
        ,eval.evaluation_section_key
        ,eval.evaluation_qna_key
        ,'National Average' as benchmark_key
        , null as benchmark_value
        ,sum(eval.answer_count) as benchmark_value_count
        ,sum(eval.question_user_count) as benchmark_question_user_count
      from evaluation_activity_a_table_tmp eval
      where not eval.no_benchmark
      group by
        eval.content_key
        ,eval.evaluation_key
        ,eval.evaluation_section_key
        ,eval.evaluation_qna_key
    );

    /* Activities with categories from adminifi tables. */
    drop table if exists evaluation_benchmark_activity_3;
    create temp table evaluation_benchmark_activity_3
    as (
      select
        bc.name as benchmark_key
        ,bg.name as benchmark_value
        ,f.content_key
        ,f.evaluation_key
        ,f.evaluation_section_key
        ,f.evaluation_qna_key
        ,sum(f.answer_count) as benchmark_value_count
        ,sum(f.question_user_count) as benchmark_question_user_count
      from evaluation_activity_a_table_tmp as f
      LEFT JOIN ods.dim_organizations AS dim_orgs ON f.organization_key = dim_orgs.organization_key
      LEFT JOIN adminifi_data.benchmark_group_organizations AS bgo ON dim_orgs.organization_id = bgo.organization_id
      LEFT JOIN adminifi_data.benchmark_groups AS bg ON bgo.benchmark_group_id = bg.id
      LEFT JOIN adminifi_data.benchmark_categories AS bc ON bgo.benchmark_category_id = bc.id
      where
        benchmark_key is not null
        and not f.no_benchmark
      group by
        benchmark_key
        ,benchmark_value
        ,f.content_key
        ,f.evaluation_key
        ,f.evaluation_section_key
        ,f.evaluation_qna_key
    );

    drop table if exists evaluation_activity_a_table_tmp;

    drop table if exists reporting_data.a_table_evaluation_benchmark_staging;
    create table reporting_data.a_table_evaluation_benchmark_staging
    diststyle even
    as (
      SELECT
        tmp_fact.answer_count,
        benchmark_question_user_count as question_user_count,
        tmp_fact.organization_name,
        tmp_fact.organization_key,
        tmp_fact.organization_id,
        tmp_fact.training_period_key,
        tmp_fact.training_period_title,
        tmp_fact.evaluation_key,
        tmp_fact.evaluation_title,
        tmp_fact.evaluation_name,
        tmp_fact.evaluation_slug,
        tmp_fact.evaluation_labels,
        tmp_fact.section_description,
        tmp_fact.section_key,
        tmp_fact.section_title,
        tmp_fact.section_labels,
        tmp_fact.custom_survey_section,
        tmp_fact.evaluation_qna_key,
        tmp_fact.answer_id,
        tmp_fact.answer_position,
        tmp_fact.answer_text,
        tmp_fact.answer_translation_id,
        tmp_fact.answer_value,
        tmp_fact.column_score,
        tmp_fact.matrix_question_id,
        tmp_fact.question_active_flag,
        tmp_fact.question_allow_prefer_not_to_answer_flag,
        tmp_fact.question_category,
        tmp_fact.question_correct_answer_ids,
        tmp_fact.question_evaluation_id,
        tmp_fact.question_fields,
        tmp_fact.question_id,
        tmp_fact.question_incorrect_feedback_text,
        tmp_fact.question_media,
        tmp_fact.question_name,
        tmp_fact.question_position,
        tmp_fact.question_required_flag,
        tmp_fact.question_section_id,
        tmp_fact.question_shuffle_flag,
        tmp_fact.question_text,
        tmp_fact.question_translation_id,
        tmp_fact.question_type,
        tmp_fact.question_weighted_response,
        tmp_fact.question_labels,
        tmp_fact.row_position,
        tmp_fact.row_text,
        tmp_fact.sourcesystem_id,
        tmp_fact.choices_number,
        tmp_fact.content_id,
        tmp_fact.content_key,
        tmp_fact.content_title,
        benchmark_key,
        benchmark_value,
        benchmark_value_count,
        qoc.org_count,
        qoc.answer_count_percent_by_question as benchmark_percent,
        tmp_fact.eval_user_count,
        tmp_fact.lob_rls_id,
        tmp_fact.business_lines,
        tmp_fact.is_scorm
      FROM
        temp_a_table_evaluation_benchmark as tmp_fact
        JOIN evaluation_benchmark_activity_1 as bench_1
          ON tmp_fact.organization_key = bench_1.organization_key
          AND tmp_fact.content_key = bench_1.content_key
          AND tmp_fact.evaluation_key = bench_1.evaluation_key
          AND tmp_fact.section_key = bench_1.evaluation_section_key
          AND tmp_fact.evaluation_qna_key = bench_1.evaluation_qna_key
        left join max_percentage_by_question_for_national_average qoc
        on qoc.question_id = tmp_fact.question_id
        and qoc.evaluation_key = tmp_fact.evaluation_key
        and qoc.section_key = tmp_fact.section_key
        and qoc.content_key = tmp_fact.content_key

      UNION ALL

      SELECT
        tmp_fact.answer_count,
        benchmark_question_user_count as question_user_count,
        tmp_fact.organization_name,
        tmp_fact.organization_key,
        tmp_fact.organization_id,
        tmp_fact.training_period_key,
        tmp_fact.training_period_title,
        tmp_fact.evaluation_key,
        tmp_fact.evaluation_title,
        tmp_fact.evaluation_name,
        tmp_fact.evaluation_slug,
        tmp_fact.evaluation_labels,
        tmp_fact.section_description,
        tmp_fact.section_key,
        tmp_fact.section_title,
        tmp_fact.section_labels,
        tmp_fact.custom_survey_section,
        tmp_fact.evaluation_qna_key,
        tmp_fact.answer_id,
        tmp_fact.answer_position,
        tmp_fact.answer_text,
        tmp_fact.answer_translation_id,
        tmp_fact.answer_value,
        tmp_fact.column_score,
        tmp_fact.matrix_question_id,
        tmp_fact.question_active_flag,
        tmp_fact.question_allow_prefer_not_to_answer_flag,
        tmp_fact.question_category,
        tmp_fact.question_correct_answer_ids,
        tmp_fact.question_evaluation_id,
        tmp_fact.question_fields,
        tmp_fact.question_id,
        tmp_fact.question_incorrect_feedback_text,
        tmp_fact.question_media,
        tmp_fact.question_name,
        tmp_fact.question_position,
        tmp_fact.question_required_flag,
        tmp_fact.question_section_id,
        tmp_fact.question_shuffle_flag,
        tmp_fact.question_text,
        tmp_fact.question_translation_id,
        tmp_fact.question_type,
        tmp_fact.question_weighted_response,
        tmp_fact.question_labels,
        tmp_fact.row_position,
        tmp_fact.row_text,
        tmp_fact.sourcesystem_id,
        tmp_fact.choices_number,
        tmp_fact.content_id,
        tmp_fact.content_key,
        tmp_fact.content_title,
        benchmark_key,
        benchmark_value,
        benchmark_value_count,
        qoc.org_count,
        qoc.answer_count_percent_by_question as benchmark_percent,
        tmp_fact.eval_user_count,
        tmp_fact.lob_rls_id,
        tmp_fact.business_lines,
        tmp_fact.is_scorm
      FROM
        temp_a_table_evaluation_benchmark as tmp_fact
        JOIN evaluation_benchmark_activity_2 as bench_2
          ON  tmp_fact.content_key = bench_2.content_key
          AND tmp_fact.evaluation_key = bench_2.evaluation_key
          AND tmp_fact.section_key = bench_2.evaluation_section_key
          AND tmp_fact.evaluation_qna_key = bench_2.evaluation_qna_key
        left join max_percentage_by_question_for_national_average qoc
        on qoc.question_id = tmp_fact.question_id
        and qoc.evaluation_key = tmp_fact.evaluation_key
        and qoc.section_key = tmp_fact.section_key
        and qoc.content_key = tmp_fact.content_key

      UNION ALL

      SELECT
        tmp_fact.answer_count,
        bench_3.benchmark_question_user_count as question_user_count,
        tmp_fact.organization_name,
        tmp_fact.organization_key,
        tmp_fact.organization_id,
        tmp_fact.training_period_key,
        tmp_fact.training_period_title,
        tmp_fact.evaluation_key,
        tmp_fact.evaluation_title,
        tmp_fact.evaluation_name,
        tmp_fact.evaluation_slug,
        tmp_fact.evaluation_labels,
        tmp_fact.section_description,
        tmp_fact.section_key,
        tmp_fact.section_title,
        tmp_fact.section_labels,
        tmp_fact.custom_survey_section,
        tmp_fact.evaluation_qna_key,
        tmp_fact.answer_id,
        tmp_fact.answer_position,
        tmp_fact.answer_text,
        tmp_fact.answer_translation_id,
        tmp_fact.answer_value,
        tmp_fact.column_score,
        tmp_fact.matrix_question_id,
        tmp_fact.question_active_flag,
        tmp_fact.question_allow_prefer_not_to_answer_flag,
        tmp_fact.question_category,
        tmp_fact.question_correct_answer_ids,
        tmp_fact.question_evaluation_id,
        tmp_fact.question_fields,
        tmp_fact.question_id,
        tmp_fact.question_incorrect_feedback_text,
        tmp_fact.question_media,
        tmp_fact.question_name,
        tmp_fact.question_position,
        tmp_fact.question_required_flag,
        tmp_fact.question_section_id,
        tmp_fact.question_shuffle_flag,
        tmp_fact.question_text,
        tmp_fact.question_translation_id,
        tmp_fact.question_type,
        tmp_fact.question_weighted_response,
        tmp_fact.question_labels,
        tmp_fact.row_position,
        tmp_fact.row_text,
        tmp_fact.sourcesystem_id,
        tmp_fact.choices_number,
        tmp_fact.content_id,
        tmp_fact.content_key,
        tmp_fact.content_title,
        bench_3.benchmark_key,
        bench_3.benchmark_value,
        bench_3.benchmark_value_count,
        qoc.org_count,
        qoc.answer_count_percent_by_question as benchmark_percent,
        tmp_fact.eval_user_count,
        tmp_fact.lob_rls_id,
        tmp_fact.business_lines,
        tmp_fact.is_scorm
      FROM
        temp_a_table_evaluation_benchmark as tmp_fact
        JOIN evaluation_benchmark_activity_3 as bench_3
              ON tmp_fact.content_key = bench_3.content_key
              AND tmp_fact.evaluation_key = bench_3.evaluation_key
              AND tmp_fact.section_key = bench_3.evaluation_section_key
              AND tmp_fact.evaluation_qna_key = bench_3.evaluation_qna_key
        left join max_percentage_by_question qoc
          on qoc.question_id = tmp_fact.question_id
          and qoc.evaluation_key = tmp_fact.evaluation_key
          and qoc.section_key = tmp_fact.section_key
          and qoc.content_key = tmp_fact.content_key
          and qoc.benchmark_key = bench_3.benchmark_key
          and qoc.benchmark_value = bench_3.benchmark_value
        JOIN ods.dim_organizations AS dim_orgs ON tmp_fact.organization_key = dim_orgs.organization_key
        LEFT JOIN adminifi_data.benchmark_group_organizations AS bgo ON dim_orgs.organization_id = bgo.organization_id
        LEFT JOIN adminifi_data.benchmark_groups AS bg ON bgo.benchmark_group_id = bg.id
        LEFT JOIN adminifi_data.benchmark_categories AS bc ON bgo.benchmark_category_id = bc.id
      WHERE
        bc.name = bench_3.benchmark_key AND bg.name = bench_3.benchmark_value
      GROUP BY
        tmp_fact.answer_count,
        tmp_fact.organization_name,
        tmp_fact.organization_key,
        tmp_fact.organization_id,
        tmp_fact.training_period_key,
        tmp_fact.training_period_title,
        tmp_fact.evaluation_key,
        tmp_fact.evaluation_title,
        tmp_fact.evaluation_name,
        tmp_fact.evaluation_slug,
        tmp_fact.evaluation_labels,
        tmp_fact.section_description,
        tmp_fact.section_key,
        tmp_fact.section_title,
        tmp_fact.section_labels,
        tmp_fact.custom_survey_section,
        tmp_fact.evaluation_qna_key,
        tmp_fact.answer_id,
        tmp_fact.answer_position,
        tmp_fact.answer_text,
        tmp_fact.answer_translation_id,
        tmp_fact.answer_value,
        tmp_fact.column_score,
        tmp_fact.matrix_question_id,
        tmp_fact.question_active_flag,
        tmp_fact.question_allow_prefer_not_to_answer_flag,
        tmp_fact.question_category,
        tmp_fact.question_correct_answer_ids,
        tmp_fact.question_evaluation_id,
        tmp_fact.question_fields,
        tmp_fact.question_id,
        tmp_fact.question_incorrect_feedback_text,
        tmp_fact.question_media,
        tmp_fact.question_name,
        tmp_fact.question_position,
        tmp_fact.question_required_flag,
        tmp_fact.question_section_id,
        tmp_fact.question_shuffle_flag,
        tmp_fact.question_text,
        tmp_fact.question_translation_id,
        tmp_fact.question_type,
        tmp_fact.question_weighted_response,
        tmp_fact.question_labels,
        tmp_fact.row_position,
        tmp_fact.row_text,
        tmp_fact.sourcesystem_id,
        tmp_fact.choices_number,
        tmp_fact.content_id,
        tmp_fact.content_key,
        tmp_fact.content_title,
        bench_3.benchmark_key,
        bench_3.benchmark_value,
        bench_3.benchmark_value_count,
        bench_3.benchmark_question_user_count,
        qoc.org_count,
        qoc.answer_count_percent_by_question,
        tmp_fact.eval_user_count,
        tmp_fact.lob_rls_id,
        tmp_fact.business_lines,
        tmp_fact.is_scorm
    );

    alter table reporting_data.a_table_evaluation_benchmark rename to a_table_evaluation_benchmark_old;
    alter table reporting_data.a_table_evaluation_benchmark_staging rename to a_table_evaluation_benchmark;
    alter table reporting_data.a_table_evaluation_benchmark owner to datapipeline_app;

    grant all on reporting_data.a_table_evaluation_benchmark to group admin_group;
    grant select, insert, update, delete on reporting_data.a_table_evaluation_benchmark to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.a_table_evaluation_benchmark to group querywriters_selective_rw;
    grant select on reporting_data.a_table_evaluation_benchmark to group internalapps_ro;
    grant select on reporting_data.a_table_evaluation_benchmark to group internalapps_rw_rt;
    grant select on reporting_data.a_table_evaluation_benchmark to group querywriters_ro;
    grant select on reporting_data.a_table_evaluation_benchmark to group tableau_progress_report;

    drop table if exists question_org_percent_for_national_average;
    drop table if exists question_org_percent;
    drop table if exists temp_a_table_evaluation_benchmark;
    drop table reporting_data.a_table_evaluation_benchmark_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1]
  input_node: []
  name: evaluation-activity-form-response
  command:
    create table reporting_data.free_text_responses_staging (
      organization_name varchar(255) encode zstd,
      organization_id   varchar(36) encode zstd,
      content_name      varchar(255) encode zstd,
      content_id        varchar(36) encode zstd,
      evaluation_name   varchar(255) encode zstd,
      evaluation_id     varchar(36) encode zstd,
      question_text     varchar(65535) encode zstd,
      question_id       integer encode az64,
      question_type     varchar(100) encode zstd,
      response_value    varchar(65535) encode zstd,
      response_count    integer encode az64
    );


    insert into reporting_data.free_text_responses_staging
      select org.organization_name
            ,rs.organization_id
            ,ct.name as content_name
            ,rs.content_id
            ,et.name as evaluation_name
            ,rs.evaluation_id
            ,qt.text as question_text
            ,r.question_id
            ,q.type as question_type
            ,r.value as response_value
            ,count(distinct r.id)
      from  evalufi_data.questions q
            left join evalufi_data.question_translations qt
                on q.id = qt.question_id
            left join evalufi_data.sections s
                on q.section_id = s.id
            left join evalufi_data.evaluations e
                on q.evaluation_id = e.id
            left join evalufi_data.evaluation_translations et
              on e.id = et.evaluation_id
              and et.locale in ('en', 'en-us')
            left join evalufi_data.responses r
                on q.id = r.question_id
            left join evalufi_data.response_sets rs
                on r.response_set_id = rs.id
            left join ods.dim_organizations as org
              on org.organization_id = rs.organization_id
            left join content_service_data.content_translations as ct
              on ct.content_id = rs.content_id
              and ct.locale  in ('en', 'en-US')
        where
          q.type in ('Questions::FreeText','Questions::Decimal','Questions::Integer')
          and qt.locale in ('en', 'en-US')
      group by
        org.organization_name
        ,rs.organization_id
        ,ct.name
        ,rs.content_id
        ,et.name
        ,rs.evaluation_id
        ,qt.text
        ,r.question_id
        ,q.type
        ,r.value
    ;

    alter table reporting_data.free_text_responses rename to free_text_responses_old;
    alter table reporting_data.free_text_responses_staging rename to free_text_responses;
    alter table reporting_data.free_text_responses owner to datapipeline_app;

    grant all on reporting_data.free_text_responses to group admin_group;
    grant select, insert, update, delete on reporting_data.free_text_responses to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.free_text_responses to group querywriters_selective_rw;
    grant select on reporting_data.free_text_responses to group internalapps_ro;
    grant select on reporting_data.free_text_responses to group internalapps_rw_rt;
    grant select on reporting_data.free_text_responses to group querywriters_ro;
    grant select on reporting_data.free_text_responses to group tableau_progress_report;

    drop table if exists reporting_data.free_text_responses_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, wait-for-others-pipelines]
  input_node: []
  name: evaluation-activity
  command:
    drop table if exists evaluation_activity_tmp;
    create temp table evaluation_activity_tmp
    (
      activity_month_year datetime encode zstd,
      organization_key character varying(163) encode zstd,
      training_period_key character varying(50) encode zstd,
      evaluation_key character varying(100) encode zstd,
      evaluation_section_key character varying(100) encode zstd,
      evaluation_qna_key character varying(1000)  encode zstd,
      content_key character varying(100) encode zstd,
      answer_count integer encode az64
    )distkey(evaluation_qna_key);

    insert into evaluation_activity_tmp
    select
      to_date(date_part(YEAR, dt.date)::varchar || '-' || date_Part(MONTH, dt.date)::varchar || '-01', 'YYYY-MM-DD') as activity_month_year
      ,eval.organization_key
      ,eval.training_period_key
      ,eval.evaluation_key
      ,eval.evaluation_section_key
      ,eval.evaluation_qna_key
      ,eval.content_key
      ,sum(eval.answer_count) as answer_count
    from ods.fact_evaluations_activity_individual_responses as eval
    join ods.dim_evaluations e
      on e.evaluation_key = eval.evaluation_key
      and not e.sqs
    inner join ods_static_data.dim_dates dt on dt.date_key = eval.date_key
    where eval.sourcesystem_id = 9
      and eval.date_key >= (date_part(YEAR, current_date)::varchar || lpad(date_Part(MONTH, current_date), 2, '0')::varchar || '01')::int
    group by
      to_date(date_part(YEAR, dt.date)::varchar || '-' || date_Part(MONTH, dt.date)::varchar || '-01', 'YYYY-MM-DD')
      ,eval.organization_key
      ,eval.training_period_key
      ,eval.evaluation_key
      ,eval.evaluation_section_key
      ,eval.evaluation_qna_key
      ,eval.content_key;

    delete from reporting_data.evaluation_activity
    where activity_month_year >= to_date(date_part(YEAR, current_date)::varchar || '-' || date_Part(MONTH, current_date)::varchar || '-01', 'YYYY-MM-DD');

    insert into reporting_data.evaluation_activity
    select distinct
      evaluation_activity.answer_count,
      evaluation_activity.activity_month_year,
      dim_orgs.organization_name,
      dim_orgs.organization_id,
      dim_training_periods.training_period_title,
      dim_eval.evaluation_title,
      dim_eval.evaluation_name,
      dim_eval.evaluation_slug,
      dim_eval.evaluation_labels,
      dim_sections.section_description,
      dim_sections.section_title,
      dim_sections.section_labels,
      case when dim_sections.organization_id is not null then True else False end as custom_survey_section,
      dim_qna.answer_id,
      dim_qna.answer_position,
      dim_qna.answer_text,
      dim_qna.answer_translation_id,
      dim_qna.answer_value,
      dim_qna.column_score,
      dim_qna.matrix_question_id,
      dim_qna.question_active_flag,
      dim_qna.question_allow_prefer_not_to_answer_flag,
      dim_qna.question_category,
      dim_qna.question_correct_answer_ids,
      dim_qna.question_evaluation_id,
      dim_qna.question_fields,
      dim_qna.question_id,
      dim_qna.question_incorrect_feedback_text,
      dim_qna.question_media,
      dim_qna.question_name,
      dim_qna.question_position,
      dim_qna.question_required_flag,
      dim_qna.question_section_id,
      dim_qna.question_shuffle_flag,
      dim_qna.question_text,
      dim_qna.question_translation_id,
      dim_qna.question_type,
      dim_qna.question_weighted_response,
      dim_qna.question_labels,
      dim_qna.row_position,
      dim_qna.row_text,
      dim_qna.sourcesystem_id,
      dim_contents.content_id,
      dim_contents.content_title,
      max(eal.eval_user_count) as eval_user_count
    FROM evaluation_activity_tmp as evaluation_activity
    JOIN ods.dim_organizations AS dim_orgs
      ON evaluation_activity.organization_key = dim_orgs.organization_key
    LEFT JOIN ods.dim_training_periods AS dim_training_periods
      ON evaluation_activity.training_period_key = dim_training_periods.training_period_key
    JOIN ods.dim_evaluations AS dim_eval
      ON evaluation_activity.evaluation_key = dim_eval.evaluation_key
    JOIN ods.dim_evalufi_sections AS dim_sections
      ON evaluation_activity.evaluation_section_key = dim_sections.section_key
    JOIN ods.dim_evaluation_qna_texts AS dim_qna
      ON evaluation_activity.evaluation_qna_key = dim_qna.evaluation_qna_key
    JOIN ods.dim_contents AS dim_contents
      ON evaluation_activity.content_key = dim_contents.content_key
    left join ods.fact_evaluations_assigned_learners eal
      on evaluation_activity.organization_key = eal.organization_key
      and evaluation_activity.evaluation_key = eal.evaluation_key
      and evaluation_activity.content_key = eal.content_key
    group by
      evaluation_activity.answer_count,
      evaluation_activity.activity_month_year,
      dim_orgs.organization_name,
      dim_orgs.organization_id,
      dim_training_periods.training_period_title,
      dim_eval.evaluation_title,
      dim_eval.evaluation_name,
      dim_eval.evaluation_slug,
      dim_eval.evaluation_labels,
      dim_sections.section_description,
      dim_sections.section_title,
      dim_sections.section_labels,
      case when dim_sections.organization_id is not null then True else False end,
      dim_qna.answer_id,
      dim_qna.answer_position,
      dim_qna.answer_text,
      dim_qna.answer_translation_id,
      dim_qna.answer_value,
      dim_qna.column_score,
      dim_qna.matrix_question_id,
      dim_qna.question_active_flag,
      dim_qna.question_allow_prefer_not_to_answer_flag,
      dim_qna.question_category,
      dim_qna.question_correct_answer_ids,
      dim_qna.question_evaluation_id,
      dim_qna.question_fields,
      dim_qna.question_id,
      dim_qna.question_incorrect_feedback_text,
      dim_qna.question_media,
      dim_qna.question_name,
      dim_qna.question_position,
      dim_qna.question_required_flag,
      dim_qna.question_section_id,
      dim_qna.question_shuffle_flag,
      dim_qna.question_text,
      dim_qna.question_translation_id,
      dim_qna.question_type,
      dim_qna.question_weighted_response,
      dim_qna.question_labels,
      dim_qna.row_position,
      dim_qna.row_text,
      dim_qna.sourcesystem_id,
      dim_contents.content_id,
      dim_contents.content_title;

    drop table if exists evaluation_activity_tmp;
    alter table reporting_data.evaluation_activity owner to datapipeline_app;

    grant all on reporting_data.evaluation_activity to group admin_group;
    grant select, insert, update, delete on reporting_data.evaluation_activity to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.evaluation_activity to group querywriters_selective_rw;
    grant select on reporting_data.evaluation_activity to group internalapps_ro;
    grant select on reporting_data.evaluation_activity to group internalapps_rw_rt;
    grant select on reporting_data.evaluation_activity to group querywriters_ro;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1]
  input_node: []
  name: free-text-individual-responses
  command:
    drop table if exists reporting_data.free_text_individual_responses_staging;
    create table reporting_data.free_text_individual_responses_staging (
      response_set_id   varchar(36) encode zstd,
      group_id          varchar(64) encode zstd,
      organization_name varchar(255) encode zstd,
      organization_id   varchar(36) encode zstd,
      content_name      varchar(255) encode zstd,
      content_id        varchar(36) encode zstd,
      evaluation_name   varchar(255) encode zstd,
      evaluation_id     varchar(36) encode zstd,
      question_text     varchar(65535) encode zstd,
      question_id       integer encode az64,
      question_type     varchar(100) encode zstd,
      response_value    varchar(65535) encode zstd
    );


    insert into reporting_data.free_text_individual_responses_staging
      select
        r.response_set_id
        ,nvl(rs.group_id, 'No Response Set Group Id') as group_id
        ,org.organization_name
        ,rs.organization_id
        ,ct.name as content_name
        ,rs.content_id
        ,et.name as evaluation_name
        ,rs.evaluation_id
        ,qt.text as question_text
        ,r.question_id
        ,q.type as question_type
        ,r.value as response_value
      from evalufi_data.responses r
      inner join evalufi_data.response_sets rs
        on r.response_set_id = rs.id
      inner join evalufi_data.questions q
        on q.id = r.question_id
      inner join evalufi_data.question_translations qt
        on q.id = qt.question_id
      left join evalufi_data.sections s
        on q.section_id = s.id
      left join evalufi_data.evaluations e
        on q.evaluation_id = e.id
      left join evalufi_data.evaluation_translations et
        on e.id = et.evaluation_id
        and et.locale in ('en', 'en-us')
      left join ods.dim_organizations as org
        on org.organization_id = rs.organization_id
      left join content_service_data.content_translations as ct
        on ct.content_id = rs.content_id
        and ct.locale  in ('en', 'en-US')
      where q.type in ('Questions::FreeText','Questions::Decimal','Questions::Integer')
        and qt.locale in ('en', 'en-US')
    ;

    alter table reporting_data.free_text_individual_responses rename to free_text_individual_responses_old;
    alter table reporting_data.free_text_individual_responses_staging rename to free_text_individual_responses;
    alter table reporting_data.free_text_individual_responses owner to datapipeline_app;

    grant all on reporting_data.free_text_individual_responses to group admin_group;
    grant select, insert, update, delete on reporting_data.free_text_individual_responses to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.free_text_individual_responses to group querywriters_selective_rw;
    grant select on reporting_data.free_text_individual_responses to group internalapps_ro;
    grant select on reporting_data.free_text_individual_responses to group internalapps_rw_rt;
    grant select on reporting_data.free_text_individual_responses to group querywriters_ro;
    grant select on reporting_data.free_text_individual_responses to group tableau_progress_report;

    drop table if exists reporting_data.free_text_individual_responses_old;

- step_type: sql-command
  depends_on: [progress-report-data]
  input_node: []
  name: progress-activities
  command:
    drop table if exists reporting_data.progress_activities_staging;
    create table reporting_data.progress_activities_staging (
      past_due                    boolean encode zstd,
      organization_id             varchar(36) encode zstd,
      organization_name           varchar(255) encode zstd,
      content_id                  varchar(36) encode zstd,
      content_title               varchar(255) encode zstd,
      line_of_business            varchar(48) encode zstd,
      training_period_id          integer encode az64,
      training_period_title       varchar(256) encode zstd,
      progress_status             varchar(50) encode zstd,
      rls_administrator_uuid      varchar(50) encode zstd,
      is_scorm                    boolean encode zstd,
      user_count                  integer encode az64
    );

    insert into reporting_data.progress_activities_staging
      select
        case
          when progress_data.past_due is null then false
          else progress_data.past_due
        end                                     as past_due
        ,progress_data.orgid                    as organization_id
        ,progress_data.orgname                  as organization_name
        ,progress_data.progress_content_id      as content_id
        ,contents.content_title                 as content_title
        ,progress_data.assignment_business_line as line_of_business
        ,progress_data.training_period_id       as training_period_id
        ,progress_data.training_period_title    as training_period_title
        ,progress_data.assignment_progress_status as progress_status
        ,rls.administrator_uuid                 as rls_administrator_uuid
        ,progress_data.is_scorm
        ,count(distinct progress_data.users_id) as user_count
      from reporting_data.progress_report_data as progress_data
      join rls_data.rls_org_lob_team_admin_user as rls on  progress_data.orgid = rls.organization_uuid
        and progress_data.lob_rls_id & rls.administrator_lob_rls_id
        and progress_data.users_id = rls.user_uuid
      left join ods.dim_contents as contents
        on progress_data.progress_content_id = contents.content_id
        and contents.sourcesystem_id = 10
      where assignment_status in ('started', 'ended', 'N/A')
      group by
        progress_data.past_due
        ,progress_data.orgid
        ,progress_data.orgname
        ,progress_data.progress_content_id
        ,contents.content_title
        ,progress_data.assignment_business_line
        ,progress_data.training_period_id
        ,progress_data.training_period_title
        ,progress_data.assignment_progress_status
        ,rls.administrator_uuid
        ,progress_data.is_scorm
    ;

    alter table reporting_data.progress_activities rename to progress_activities_old;
    alter table reporting_data.progress_activities_staging rename to progress_activities;
    alter table reporting_data.progress_activities owner to datapipeline_app;

    grant all on reporting_data.progress_activities to group admin_group;
    grant select, insert, update, delete on reporting_data.progress_activities to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.progress_activities to group querywriters_selective_rw;
    grant select on reporting_data.progress_activities to group internalapps_ro;
    grant select on reporting_data.progress_activities to group internalapps_rw_rt;
    grant select on reporting_data.progress_activities to group querywriters_ro;
    grant select on reporting_data.progress_activities to group tableau_progress_report;

    drop table if exists reporting_data.progress_activities_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, wait-for-ods-pipeline-3, wait-for-others-content-service-pipelines, wait-for-others-admini-pipelines, wait-for-others-pipelines]
  input_node: []
  name: student-engagement-survey
  command:
    drop table if exists reference_data.ses_report_data_progress_tmp_1 ;
    create table reference_data.ses_report_data_progress_tmp_1
    diststyle key
    distkey(user_id)
    as
    select
      p.group_id,
      p.progress_id,
      nvl(cont_prog.training_period_id, asgn.training_period_id) as training_period_id,
      asgn.organization_id,
      p.user_id,
      asgn.business_line,
      p.response_set_id,
      p.content_id,
      p.assignment_id
    from
      reference_data.user_content_progress_response_set_assignment p
      left join content_service_data.assignments as asgn on asgn.id = p.assignment_id
      left join content_service_data.progress cont_prog on cont_prog.id = p.progress_id;

    drop table if exists reference_data.ses_report_data_progress_tmp_2 ;
    create table reference_data.ses_report_data_progress_tmp_2
    diststyle key
    distkey (group_id)
    as
    select
      p.group_id,
      p.progress_id,
      p.training_period_id,
      p.organization_id,
      p.user_id,
      p.business_line,
      users.uuid,
      users.email as email,
      users.first_name,
      users.last_name,
      users.sso_id,
      p.response_set_id,
      p.content_id,
      p.assignment_id
    from
      reference_data.ses_report_data_progress_tmp_1 p
      inner join adminifi_data.users users on users.uuid=p.user_id;

    drop table reference_data.ses_report_data_progress_tmp_1;

    drop table if exists reference_data.ses_response_data;
    create table reference_data.ses_response_data
    diststyle key
    distkey (response_set_id)
    sortkey (question_id, answer_id)
    as
    (
      select
        min(r.id) as response_id
        ,rs.id as response_set_id
        ,min(r.response_created_date) as response_created_date
        ,rs.group_id
        ,r.question_id
        ,r.answer_ids as answer_id
        ,rs.evaluation_id
        ,rs.training_period_id
        ,rs.organization_id
      from
        evalufi_data.response_sets rs
        inner join reference_data.responses_reorder r on rs.id = r.response_set_id
      where
        r.type = 'Responses::SingleSelection'
      group by
        rs.id
        ,rs.group_id
        ,r.question_id
        ,r.answer_ids
        ,rs.evaluation_id
        ,rs.training_period_id
        ,rs.organization_id
    );

    insert into reference_data.ses_response_data
    select
      min(srsa.id) as response_id
      ,rs.id as response_set_id
      ,min(srsa.created_at) as response_created_date
      ,rs.group_id
      ,srsa.question_id
      ,srsa.answer_id as answer_id
      ,rs.evaluation_id
      ,rs.training_period_id
      ,rs.organization_id
    from
      spectrum_schema.evalufi_data_response_answer_ids srsa
      inner join evalufi_data.response_sets rs on srsa.response_set_id = rs.id
      inner join reference_data.responses_reorder r on rs.id = r.response_set_id
    where
      r.type = 'Responses::MultipleSelection'
    group by
      rs.id
      ,rs.group_id
      ,srsa.question_id
      ,srsa.answer_id
      ,rs.evaluation_id
      ,rs.training_period_id
      ,rs.organization_id;

    insert into reference_data.ses_response_data
    select
        min(r.id) as response_id
        ,rs.id as response_set_id
        ,min(r.response_created_date) as response_created_date
        ,rs.group_id
        ,r.question_id
        ,r.calendar as answer_id
        ,rs.evaluation_id
        ,rs.training_period_id
        ,rs.organization_id
      from
        evalufi_data.response_sets rs
        inner join reference_data.responses_reorder r on rs.id = r.response_set_id
      where
        r.type = 'Responses::Calendar'
      group by
        rs.id
        ,rs.group_id
        ,r.question_id
        ,r.calendar
        ,rs.evaluation_id
        ,rs.training_period_id
        ,rs.organization_id ;

    drop table if exists reporting_data.student_engagement_survey_staging;
    create table reporting_data.student_engagement_survey_staging
    diststyle key
    distkey (organization_id)
    as(
      select distinct
        ser_rs_data.response_created_date::Date as "Date"
        ,orgs.organization_id
        ,orgs.organization_name
        ,tp.training_period_title
        ,pt2.uuid
        ,pt2.email
        ,pt2.first_name
        ,pt2.last_name
        ,pt2.sso_id
        ,evals.evaluation_slug
        ,evals.evaluation_name
        ,cont.content_id
        ,cont.content_title as course
        ,eval_qna_texts.question_slug
        ,eval_qna_texts.question_text
        ,eval_qna_texts.question_labels as question_label
        ,eval_qna_texts.answer_slug
        ,eval_qna_texts.answer_text
        ,evals.evaluation_labels as survey_label
        ,(case when pt2.assignment_id is not null then ods.f_lob_rls_finder(pt2.business_line)
            else cont.lob_rls_id end) as lob_rls_id
      from
        reference_data.ses_response_data ser_rs_data
        inner join ods.dim_evaluation_qna_texts as eval_qna_texts on eval_qna_texts.question_id = ser_rs_data.question_id
          and eval_qna_texts.answer_id = ser_rs_data.answer_id
          and eval_qna_texts.sourcesystem_id = 9   /* EvaluFi 9 */
        inner join ods.dim_evaluations as evals on evals.evaluation_id = ser_rs_data.evaluation_id
          and evals.sourcesystem_id = 9   /* EvaluFi 9 */
        inner join reference_data.ses_report_data_progress_tmp_2 pt2 on pt2.response_set_id = ser_rs_data.response_set_id
        inner join ods.dim_contents cont on cont.content_id = pt2.content_id
          and cont.sourcesystem_id = 10      /* Content Service 10 */
        inner join ods.dim_training_periods as tp on tp.training_period_id = nvl(ser_rs_data.training_period_id, pt2.training_period_id)
          and tp.sourcesystem_id = 1 /* Adminifi 1 */
        inner join ods.dim_organizations as orgs on ser_rs_data.organization_id = nvl(orgs.organization_id, pt2.organization_id)
        and orgs.sourcesystem_id = 1 /* Adminifi 1 */
      group by
        ser_rs_data.response_created_date::Date
        ,orgs.organization_id
        ,orgs.organization_name
        ,tp.training_period_title
        ,pt2.uuid
        ,pt2.email
        ,pt2.first_name
        ,pt2.last_name
        ,pt2.sso_id
        ,evals.evaluation_slug
        ,evals.evaluation_name
        ,cont.content_id
        ,cont.content_title
        ,eval_qna_texts.question_slug
        ,eval_qna_texts.question_text
        ,eval_qna_texts.question_labels
        ,eval_qna_texts.answer_slug
        ,eval_qna_texts.answer_text
        ,evals.evaluation_labels
        ,(case when pt2.assignment_id is not null then ods.f_lob_rls_finder(pt2.business_line)
            else cont.lob_rls_id end)
     );

    drop table if exists reference_data.ses_response_data;
    drop table if exists reference_data.ses_report_data_progress_tmp_2 ;

    alter table reporting_data.student_engagement_survey rename to student_engagement_survey_old;
    alter table reporting_data.student_engagement_survey_staging rename to student_engagement_survey;
    alter table reporting_data.student_engagement_survey owner to datapipeline_app;

    grant all on reporting_data.student_engagement_survey to group admin_group;
    grant select, insert, update, delete on reporting_data.student_engagement_survey to group internalapps_rw;
    grant select, insert, update, delete on reporting_data.student_engagement_survey to group querywriters_selective_rw;
    grant select on reporting_data.student_engagement_survey to group internalapps_ro;
    grant select on reporting_data.student_engagement_survey to group internalapps_rw_rt;
    grant select on reporting_data.student_engagement_survey to group querywriters_ro;
    grant select on reporting_data.student_engagement_survey to group tableau_progress_report;

    drop table if exists reporting_data.student_engagement_survey_old;

- step_type: sql-command
  depends_on: [wait-for-ods-pipeline-1, wait-for-ods-pipeline-2, wait-for-ods-pipeline-3, wait-for-others-pipelines]
  input_node: []
  name: assigned-learning-evaluations-clean
  command:
    drop table if exists reporting_data.a_table_evaluations_clean_staging;
    create table reporting_data.a_table_evaluations_clean_staging
    distkey(organization_id) as
    (
      select
        rs.organization_id
        ,org.organization_name
        ,usr.user_id
        ,usr.first_name as user_first_name
        ,usr.last_name as user_last_name
        ,usr.email as user_email
        ,cont.content_id
        ,cont.content_title as content_name
        ,eval.evaluation_id
        ,eval.evaluation_slug
        ,sec.section_id
        ,sec.section_title
        ,ucprs.progress_id
        ,prog.business_lines
        ,r.question_id
        ,qt.text as question_text
        ,r.answer_id as response_answer_id
        ,(case when quest.type = 'Questions::FreeText' then r.value else anstrans.text end) as response_answer_text
        ,r.user_supplied_text as response_user_supplied_text
        ,(case when quest.type = 'Questions::MultipleChoice' and r.user_supplied_text is not null then anstrans.text || ' - ' || nvl(r.user_supplied_text,'')
          when quest.type in ( 'Questions::MultipleChoice', 'Questions::Likert' ) then anstrans.text
          else r.value end) as answer_text_display
        ,rs.id as response_set_id
        ,rs.group_id as response_set_group_id
        ,rs.created_at as response_set_created_at
        ,r.id as response_id
        ,r.created_at as response_created_at
        ,ods.f_lob_rls_finder(nvl(prog.business_lines, '[]')) as lob_rls_id
        ,(case when sc.progress_id is null then true else false end) as is_scorm
      from
        ods.dim_evaluations eval
        inner join evalufi_data.response_sets rs on rs.evaluation_id = eval.evaluation_id
        inner join evalufi_data.responses r on r.response_set_id = rs.id
        inner join reference_data.user_content_progress_response_set ucprs on rs.id = ucprs.response_set_id
        inner join content_service_data.progress prog on ucprs.progress_id = prog.id
        inner join ods.dim_organizations org on rs.organization_id = org.organization_id
          and org.sourcesystem_id = 1 /* 1 1 */
        inner join ods.dim_users usr on usr.user_id = ucprs.user_id
          and usr.sourcesystem_id = 1 /* 1 1 */
        inner join evalufi_data.questions quest on quest.id = r.question_id
        inner join evalufi_data.question_translations qt on r.question_id = qt.question_id
          and qt.locale in ('en','en-US')
        inner join ods.dim_evalufi_sections sec on sec.section_id = quest.section_id
          and sec.sourcesystem_id = 9 /* 9 9*/
        inner join ods.dim_contents cont on cont.content_id = ucprs.content_id
          and cont.sourcesystem_id = 10 /* 10 10 */
        left join content_service_data.scorm_contexts sc on sc.progress_id = ucprs.progress_id
        left join evalufi_data.answer_translations anstrans on r.answer_id = anstrans.answer_id
          and anstrans.locale in ('en','en-US')
      where
        eval.evaluation_slug = 'clox-survey-m7'
    );

    alter table reporting_data.a_table_evaluations_clean rename to a_table_evaluations_clean_old;
    alter table reporting_data.a_table_evaluations_clean_staging rename to a_table_evaluations_clean;
    alter table reporting_data.a_table_evaluations_clean owner to datapipeline_app;

